{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Array Languages Course","text":"<p>A self-study introduction to array programming languages with exercises. This course consists of a series of short instructional notes interleaved with problem sets.</p> <p>Originally written for Dyalog APL, extended by Daniel Gregoire for BQN, J, and K (ngn/k) as a learning exercise.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#dyalog-apl","title":"Dyalog APL","text":"<p>If you're just starting out, you can use the TryAPL online interpreter. Put TryAPL on one half of your screen, and view the course on the other half.</p> <p>Chapters and exercises involving the use of external files and some system functions require the full Dyalog system, which can be downloaded for free from the Dyalog website.</p> <p>If you need help typing APL glyphs (e.g. <code>\u00d7\u233f\u2373</code>) then see the APL Wiki.</p>"},{"location":"#bqn","title":"BQN","text":"<p>If you're just starting out, you can use the BQN online REPL. Put the online REPL on one half of your screen, and view the course on the other half.</p> <p>Chapters and exercises involving the use of external files and some system values require the full BQN system, which can be installed using instructions in the CBQN repository.</p>"},{"location":"#j","title":"J","text":"<p>If you're just starting out, you can use the J Playground. Put the J Playground on one half of your screen, and view the course on the other half.</p> <p>Chapters and exercises involving the use of external files and some foreign system functions require the full J system, which can be installed using instructions on the J wiki.</p>"},{"location":"#k-ngnk","title":"K (ngn/k)","text":"<p>If you're just starting out, you can use the K online REPL. Put the online REPL on one half of your screen, and view the course on the other half.</p> <p>Chapters and exercises involving the use of external files and some operating system facilities require the full K system, which can be installed using the instructions in K's readme.txt.</p>"},{"location":"#audience","title":"Audience","text":"<p>This course assumes high-school / secondary level mathematics knowledge, and some familiarity with basic programming terminology (e.g. function, variable, recursion). It is not intended as a general introduction to programming, but more of a fast-track to getting up and running with modern APL.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any suggestions, criticisms or praise, please create an issue on GitHub .</p>"},{"location":"examples/","title":"Introductory examples","text":""},{"location":"examples/#histogram","title":"Histogram","text":"<pre><code>throws \u2190 ?100\u23746\ncounts \u2190 +/(\u222acounts)\u2218.=counts\nhist \u2190 `' \u2218'[1+counts\u2218.&gt;\u2373\u2308/counts]`</code></pre>"},{"location":"examples/#simple-statistics","title":"Simple statistics","text":"<pre><code>students\u2190\u2395A\nscores\u21904 9 4 6 8 8 7 4 5 10 9 8 6 10 9 4 8 4 8 4 7 10 7 4 10 6\nclasses\u2190'ACABAAABCCABCBBBACBCCACABA'\n\n(score=\u2308/score)/student\nclasses{(+\u233f\u2375)\u00f7\u2262\u2375}\u2338scores</code></pre>"},{"location":"examples/#grille-cypher","title":"Grille cypher","text":"<pre><code>\u2395\u2190(grid grille)\u21905 5\u2218\u2374\u00a8'VRYIALCLQIFKNEVPLARKMPLFF' '\u233a\u233a\u233a \u233a \u233a\u233a\u233a \u233a \u233a \u233a\u233a\u233a \u233a\u233a\u233a  \u233a\u233a'\n(' '=grille)/\u2365,grid\ngrid[\u2378grille=' ']</code></pre> <ul> <li>matrices</li> <li>compress</li> <li>where <code>{\u2375/\u2373\u2374\u2375}</code></li> <li>indexing</li> </ul>"},{"location":"examples/#before-during-after","title":"Before during after","text":"<pre><code>      from_til \u2190 14 16\n      times \u2190 14 19 11 15 15 18 12\n      'before' 'during' 'after'[1++\u233ffrom_til\u2218.\u2264times]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502during\u2502after\u2502before\u2502during\u2502during\u2502after\u2502before\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      'before' 'during' 'after'[1+from_til\u2378times]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502during\u2502after\u2502before\u2502during\u2502during\u2502after\u2502before\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre> <ul> <li>indexing</li> <li>outer product</li> <li>interval index/binning</li> <li>related: histograms</li> </ul>"},{"location":"examples/#fruits","title":"Fruits","text":"<p>Anna, Ben and Charlie are having a competition. They want to see who can eat the most fruit in a week.</p> <pre><code>      fruits \u2190 4 7\u2374'Apples MangoesOrangesBananas'\n      days \u2190 7 3\u2374'SunMonTueWedThuFriSat'\n      names \u2190 3 7\u2374'Anna   Ben    Charlie'\n      \u2395RL \u2190 42 1 \u22c4 ate \u2190 ?3 4 7\u23743</code></pre> <ul> <li>high rank arrays</li> <li>selection</li> <li>summaries along different axes/ranks</li> </ul>"},{"location":"examples/#take-4-words","title":"Take 4 words","text":"<pre><code>      {\u2375\u233f\u23684&gt;+\\' '=\u2375}'this is a sentence with seven words'\nthis is a sentence\n      {\u2283(\u22a3,' ',\u22a2)/4\u2191' '(\u2260\u2286\u22a2)\u2375}'this is a sentence with seven words'\nthis is a sentence</code></pre>"},{"location":"examples/#look-and-say","title":"Look and say","text":"<pre><code>      {\u220a(\u2262,\u2283)\u00a8\u2375\u2282\u23681,2\u2260/\u2375},1 3 3 3 3 \n1 1 4 3\n      {\u2283(//)\u2193\u2349\u2375\u2374\u23682,\u23682\u00f7\u2368\u2262\u2375}1 1 4 3\n1 3 3 3 3\n      {\u220a(//)\u2375\u2374\u23682,\u23682\u00f7\u2368\u2262\u2375}1 1 4 3\n1 3 3 3 3</code></pre>"},{"location":"problem-ideas/","title":"Problem ideas","text":""},{"location":"problem-ideas/#cells-and-axes","title":"cells and axes","text":""},{"location":"problem-ideas/#car-wash","title":"car wash","text":"<ul> <li>rates times times? then check the lowest in each matrix</li> </ul> <p>We want to choose which to use of 3 competing car wash services. They are all the same distance from our house, so the only thing we will use to choose from is price. We will choose to use the service with the lowest price.</p> <p>Sometimes lots of people want to get their cars washed at the same time, and some times not very many people do. This means that the demand changes throughout the day and the week. To try and balance the demand, the services vary their pricing throughout the day to incentivise people to try and go at different times.</p> <p>The services are open from 08:30 until 18:30, 7 days a week. The rates for each car wash, 1 2 3 (TODO: snazzy names) are given as a 3-row matrix.</p> <p><code>\u22a2rates \u2190 .99+?3 12\u237420</code> TODO should very sensibly?</p> <p>Want to end up with a 3D array from which to return a single number, or perhaps a vector or matrix. We want to determine, for each day of the week and each time of day, which car wash 1 2 or 3 should we choose to go to.</p> <p>We start with 3 vectors and must use outer products to generate the 3D array, then reduce?</p>"},{"location":"solutions/","title":"Solutions","text":""},{"location":"solutions/#findword","title":"FindWord","text":"<p>The FindWord problem</p> <pre><code>    An outer product or reshape can be used for the comparison, but we need to make sure our character vector has the right shape.\n    ```APL\n    FindWord \u2190 {\u2227/\u2228/\u237a\u2218.=\u2375\u2191\u23682\u2337\u2374\u237a}\n    ```\n\n    This outer product generates a 3-dimensional array. It is more efficient to reshape the vector to match the matrix:\n\n    ```APL\n    FindWord \u2190 {\u2227/\u237a=(\u2374\u237a)\u2374\u2375\u2191\u23682\u2337\u2374\u237a}\n    ```\n\n    We can compare one row with several using [the rank operator](./cells-and-axes.md#the-rank-operator).\n\n    ```APL\n    FindWord \u2190 {\u2227/\u237a(=\u23641)\u2375\u2191\u2368(\u2374\u237a)[2]}\n    ```\n\n    The comparison followed by a reduction is also expressed neatly using [the inner product operator](./Operators.md#the-inner-product).\n\n    ```APL\n    FindWord \u2190 {\u237a\u2227.=\u2375\u2191\u23682\u2337\u2374\u237a}\n    ```\n\n</code></pre>"},{"location":"test/","title":"Test","text":"<p>This is a page to test and demonstrate page elements. Some notes refer to the formatting of the markdown source.</p>"},{"location":"test/#code-input","title":"Code input","text":"Okay <p><pre><code>      1 2 3</code></pre> <pre><code>1 2 3</code></pre></p> <p><pre><code>      4 5 6</code></pre> <pre><code>4 5 6</code></pre></p> <p><pre><code>\u235d no output needs empty block after</code></pre> <pre><code></code></pre></p> <ol> <li>Some stuff</li> <li> <p>Code blocks in a list require a blank line above and below</p> <p><pre><code>      1 2 3</code></pre> <pre><code>1 2 3</code></pre></p> <p><pre><code>      4 5 6</code></pre> <pre><code>4 5 6</code></pre></p> </li> <li> <p>And another thing</p> </li> </ol> <p>Output with low characters followed by input.</p> <p><pre><code>      '\u235d Low \u2c64'</code></pre> <pre><code>\u235d Low \u2c64</code></pre></p> <p><pre><code>      'HHH'</code></pre> <pre><code>HHH</code></pre></p> <p><pre><code>      1 2 3 + 4 5 6</code></pre> <pre><code>5 7 9</code></pre></p> <p><pre><code>      'nested' 'vectors'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502nested\u2502vectors\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      3 3\u2374\u23739</code></pre> <pre><code>1 2 3\n4 5 6\n7 8 9</code></pre></p> <p>Text between code blocks must be surrounded by a blank line above and below.</p> <p><pre><code>      2 3\u2374,\u00a8'APL'   \u235d Low \u2c64</code></pre> <pre><code>\u250c\u2500\u252c\u2500\u252c\u2500\u2510\n\u2502A\u2502P\u2502L\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u2524\n\u2502A\u2502P\u2502L\u2502\n\u2514\u2500\u2534\u2500\u2534\u2500\u2518</code></pre></p>"},{"location":"todo/","title":"TODO","text":"<ul> <li> <p>bracket axis versions of rank problems?</p> </li> <li> <p>horizontal scroll on narrow partial code blocks</p> </li> <li>more description in array logic problem 1</li> <li>move finding and replacing problems interval index broken keyboard problems</li> <li>link to section: http://localhost:8000/array-logic-data-driven-conditionals/#the-outer-product</li> <li>outer product link: http://localhost:8000/basic-syntax-and-arithmetic/#singleton-extension</li> <li> </li> <li>windows <code>2f/</code></li> <li>key</li> <li>negative index generator link to problem: http://localhost:8000/basic-syntax-and-arithmetic/#what-do-these-errors-mean</li> <li>http://localhost:8000/array-logic-data-driven-conditionals/#problem-set link to membership version in the solutions</li> <li>in problem set N (finding replacing)</li> <li>proper treatment of scalar functions</li> <li>put back info about the language bar and finding out what unfamiliar primitives do</li> <li>Mean <code>{+\u233f\u2375\u00f7\u2262\u2375}</code> vs <code>{(+\u233f\u2375)\u00f7\u2262\u2375}</code></li> <li>find-replace-vals AnyVowels use Any idiom <code>\u2228/</code></li> <li>The idiom for joining a nested list into a simple list is <code>\u2283,/</code></li> <li>outer product<ul> <li>identity matrix</li> <li>countful membership</li> </ul> </li> <li>shape, reshape<ul> <li>look-and-say</li> </ul> </li> <li>take, drop</li> <li>replicate/compress</li> </ul> <p>Perhaps many more of the functions should be introduced well before the rank operator.</p>"},{"location":"todo/#todo-links","title":"TODO links","text":""},{"location":"todo/#notes","title":"NOTES","text":"<p>Bind essentially fills one of the \u201cslots\u201d of a dyadic function with an array value. 2\u23743 4 5 gives 3 4. The \u2375 is reshaped by the \u237a. If we fill the \u2375 slot, then we get a monadic function where the only argument must take the place of the \u237a slot.</p> <p>\u2374\u22183 4 5  \u235d A monadic function which reshapes 3 4 5 according to \u2375       (\u2374\u22183 4 5)2 3 4       (\u2374\u22183 4 5)5 3 4 5 3 4       (\u2374\u22183 4 5)\u00a82 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25023 4\u25023 4 5 3 4\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Reshape (3 4 5) using each of 2 and 5</p> <ol> <li>A company owns 5 stores which each sell the same 3 items.</li> </ol> <p>The quantity sold of each product in each store over a 7-day week are given in the array <code>qty</code>:</p> <pre><code>\u2395RL\u219042 \u22c4 qty\u2190\u00af1+?5 3 7\u237410</code></pre> <p>The prices of the three products are \u00a34.99, \u00a324.99 and \u00a399.99.</p> <pre><code>price \u2190 .99 + 4 24 99</code></pre> <p>The total costs each day to run each store are given in the matrix <code>cost</code>:</p> <pre><code>\u2395RL\u219042 \u22c4 costs \u2190 94+?5 7\u237411</code></pre> <p>Each store has its own weekly profit target:</p> <pre><code>target \u2190 3000 1250 800 6000 3200</code></pre> <ul> <li> <p>what is the price of each item? \u00a34.99 \u00a324.99 \u00a399.99</p> </li> <li> <p>which day had the most?</p> </li> <li>which stores made at least their target profit?</li> </ul> <p>target\u2190400</p> <ol> <li>The game naughts and cross, also known as tic-tac-toe, is played on a 3 by 3 grid. Two players take turns placing their tokens on the grid until one player has made a complete line either horizontally, vertically or diagonally which consists of just that player's tokens.</li> </ol> <p>We can represent a game using a character matrix. </p> <ol> <li></li> </ol> <p>Now, instead of several 2-dimensional games, we will use a 3-dimensional array to represent a single 3-dimensional game.</p> <ol> <li> <p>These are the heights of some students in 3 classes. Students have numeric identifiers <code>id</code>.     <pre><code>student \u2190 10 7\u2374'Kane   Jonah  JessicaPadma  Katie  CharlieAmil   David  Zara   Filipa '\nclass \u2190 'CBACCCBBAB'\nheight \u2190 167 177 171 176 178 164 177 177 173 160</code></pre></p> <p>Use APL to:</p> <ol> <li>Find the name of the tallest student</li> <li>Find the class which class has the tallest average height</li> <li>Find the class with the narrowest range of heights</li> </ol> </li> </ol>"},{"location":"todo/#making-scalars","title":"Making scalars","text":"<ol> <li>Turn the 1-element vector <code>v</code> into a scalar.</li> <li>Write an expression using <code>\u2374</code> which returns an empty numeric vector.</li> <li> <p>Write an expression using <code>\u2373</code> which returns an empty numeric vector.</p> Answer <p><ol> <li> The shape of a scalar is an empty numeric vector. We can therefore use an empty numeric vector as the left argument to the reshape function: <pre><code>\u236c\u2374v</code></pre> </li> <li> The shape of any scalar is an empty numeric vector. <pre><code>      \u23740</code></pre> <pre><code>\u00a0</code></pre> <p><pre><code>      \u237435</code></pre> <pre><code>\u00a0</code></pre></p> <p><pre><code>      \u2374'Q'</code></pre> <pre><code>\u00a0</code></pre></p> <p><pre><code>      \u236c\u2261\u237442</code></pre> <pre><code>1</code></pre> <li> If we can generate a length <code>n</code> vector with <code>\u2373n</code>, what happens when <code>n=0</code>? <p><pre><code>      \u23730</code></pre> <pre><code>\u00a0</code></pre> </p> </li>"},{"location":"bqn/array-logic-data-driven-conditionals/","title":"Array Logic and Data-driven Conditionals","text":""},{"location":"bqn/array-logic-data-driven-conditionals/#logic-and-conditions","title":"Logic and conditions","text":"<p>BQN has logical and comparison functions as in-built primitives. Much like the arithmetic, these symbols are like those used in conventional notation.</p> <code>&lt;</code> <code>\u2264</code> <code>=</code> <code>\u2260</code> <code>\u2265</code> <code>&gt;</code> <code>\u2227</code> <code>\u2228</code> <code>\u2372</code> <code>\u2371</code> <code>~</code> <p>Some of these are more general mathematical functions which happen to be the same as logical functions when used with Booleans (<code>1</code>s and <code>0</code>s). Unlike APL, in BQN the <code>\u2227</code> and <code>\u2228</code> primitives do not provide LCM and GCD respectively (see Why not GCD and LCM? for details).</p> <p><pre><code>   0\u203f1\u203f0\u203f1 \u2227 0\u203f0\u203f1\u203f1   # Logical AND</code></pre> <pre><code>\u27e8 0 0 0 1 \u27e9</code></pre></p> <p><pre><code>   0\u203f1\u203f0\u203f1 \u2228 0\u203f0\u203f1\u203f1   # Logical OR</code></pre> <pre><code>\u27e8 0 1 1 1 \u27e9</code></pre></p> <p><pre><code>   'P' \u2260 'Q'           # Not equal to</code></pre> <pre><code>1</code></pre></p> <p><pre><code>   0\u203f1\u203f0\u203f1 \u2260 0\u203f0\u203f1\u203f1   # Logical XOR </code></pre> <pre><code>\u27e8 0 1 1 0 \u27e9</code></pre></p> Logic Functions <p>The 16 possible logic functions for two binary variables can all be expressed succinctly in BQN. The following explanation and table have been adapted from an APL version found in this notebook.</p> <p>The binary column here represets the output of the logic gate for all combinations of two 1-bit inputs \u2014 also known as the truth table. For example, the truth table for an OR gate:</p> <pre><code>   0\u203f0\u203f1\u203f1 \u2228 0\u203f1\u203f0\u203f1\n</code></pre> <p>\u27e8 0 1 1 1 \u27e9</p> <pre><code>   +\u00b4(\u233d2\u22c6\u21954)\u22b8\u00d7 0\u203f1\u203f1\u203f1\n</code></pre> <p>7</p> <p> Binary Decimal <code>+\u00b4(\u233d2\u22c6\u21954)\u22b8\u00d7</code> Function <code>\ud835\udd3d</code> Description <code>0 0 0 0</code> <code>0</code> <code>0\u02d9</code> FALSE <code>0 0 0 1</code> <code>1</code> <code>\u2227</code> AND <code>0 0 1 0</code> <code>2</code> <code>&gt;</code> Left but not right <code>0 0 1 1</code> <code>3</code> <code>\u22a3</code> Left <code>0 1 0 0</code> <code>4</code> <code>&lt;</code> Right but not left <code>0 1 0 1</code> <code>5</code> <code>\u22a2</code> Right <code>0 1 1 0</code> <code>6</code> <code>\u2260</code> Exclusive OR <code>0 1 1 1</code> <code>7</code> <code>\u2228</code> OR <code>1 0 0 0</code> <code>8</code> <code>\u00ac\u2228</code> NOR <code>1 0 0 1</code> <code>9</code> <code>=</code> Exclusive NOR <code>1 0 1 0</code> <code>10</code> <code>\u00ac\u22a2</code> Not right <code>1 0 1 1</code> <code>11</code> <code>\u2265</code> Left OR Not right <code>1 1 0 0</code> <code>12</code> <code>\u00ac\u22a3</code> Not left <code>1 1 0 1</code> <code>13</code> <code>\u2264</code> Right OR Not left <code>1 1 1 0</code> <code>14</code> <code>\u00ac\u2227</code> NAND <code>1 1 1 1</code> <code>15</code> <code>1\u02d9</code> TRUE </p>"},{"location":"bqn/array-logic-data-driven-conditionals/#the-shape-of-data","title":"The shape of data","text":"<p>One of the distinguishing features of BQN is the multidimensional array. Single elements, lists and tables are quite familiar constructs.</p> <p>Tables are very useful for representing data which is related in some way. For example, let's say that the price of oranges changes daily. We can represent a week of prices as a 7-element numeric list.</p> <pre><code>   0.35\u203f0.3\u203f0.33\u203f0.32\u203f0.39\u203f0.33\u203f0.36</code></pre> <p>How about the amount spent on 3 items? We could store this in 3 separate lists, but it is convenient to keep it in a table with 3 rows and 7 columns.</p> <p>The reshape function <code>\ud835\udd68\u294a\ud835\udd69</code> takes data from <code>\ud835\udd69</code> and uses it to fill out an array of shape <code>\ud835\udd68</code>, one row at a time.</p> <p><pre><code>   cost \u2190 3\u203f7\u294a4.36\u203f4.22\u203f4.05\u203f4.14\u203f4.18\u203f4.19\u203f4.02\u203f2.79\u203f2.58\u203f2.68\u203f2.77\u203f2.88\u203f2.79\u203f2.52\u203f3.07\u203f3\u203f3.13\u203f3\u203f3.24\u203f3.06\u203f3.29</code></pre> <pre><code>\u250c\u2500                                    \n\u2575 4.36 4.22 4.05 4.14 4.18 4.19 4.02  \n  2.79 2.58 2.68 2.77 2.88 2.79 2.52  \n  3.07    3 3.13    3 3.24 3.06 3.29  \n                                     \u2518</code></pre></p> <p>So what is this table that we have created? In other languages, there are lists, and there are lists of lists. In BQN, a list of lists is not the same thing as a table (also known as a matrix). BQN arrays contain two essential pieces of information: their shape and their list of elements.</p> <p>The shape function <code>\u2262\ud835\udd69</code> returns the shape of its argument.</p> <pre><code>   \u22624\u203f12\u203f31\n3</code></pre> <p>The following table lists the rank (number of dimensions), some common names, and a geometric analogy for the three simplest types of multidimensional arrays.</p> Rank Name Geometric analogy diagram \\(0\\) scalar point \\(1\\) vector or list line \\(2\\) matrix or table rectangle <p>Arrays with \\(3\\) or more dimensions are sometimes called cube or cuboid, but they are generally referred to as N-dimensional arrays, rank-N arrays or high rank arrays. Arrays of rank greater than \\(3\\) are sometimes called noble arrays.</p> <p>For our <code>cost</code> matrix, the total spent on each item is a row-wise sum, or put a different way, the sum of each major cell: <pre><code>   +\u00b4\u02d8cost    # The total cost over the week</code></pre> <pre><code>\u27e8 29.16 19.009999999999998 21.79 \u27e9</code></pre></p> <p><pre><code>   \u2262+\u00b4\u02d8cost   # For 3 items. Shape is always an array.</code></pre> <pre><code>\u27e8 3 \u27e9</code></pre></p> <p>The total for each day across all items is a column-wise sum:</p> <p><pre><code>   +\u02ddcost    # The total cost of 3 items</code></pre> <pre><code>\u27e8 10.219999999999999 9.8 9.86 9.91 10.3 10.04 9.83 \u27e9</code></pre></p> <p><pre><code>   \u2262+\u02ddcost   # Over 7 days</code></pre> <pre><code>\u27e8 7 \u27e9</code></pre></p>"},{"location":"bqn/array-logic-data-driven-conditionals/#shape-and-deshape","title":"Shape and Deshape","text":"<p>When called monadically, the <code>\u294a</code> primitive is called deshape. It removes shape information from the array and lays out all the elements in a vector in index order.</p> <p><pre><code>   abc \u2190 'A' + \u219526\n   3\u203f3\u294aabc</code></pre> <pre><code>\u250c\u2500     \n\u2575\"ABC  \n  DEF  \n  GHI\" \n      \u2518</code></pre></p> <p><pre><code>   \u294a3\u203f3\u294aabc</code></pre> <pre><code>ABCDEFGHI</code></pre></p>"},{"location":"bqn/array-logic-data-driven-conditionals/#the-table-modifier","title":"The table modifier","text":"<p>The table modifier <code>\u231c</code> applies its function operand <code>\ud835\udd3d</code> between all combinations of elements of its left and right argument arrays. Quoting BQN's documentation, table is \"like a structure-preserving and function-applying Cartesian product,\" and is similar to APL's outer product.</p> <p><pre><code>   F \u2190 {\ud835\udd68+\ud835\udd69}\n   1\u203f2\u203f3 F\u231c 10\u203f20\u203f30</code></pre> <pre><code>\u250c\u2500          \n\u2575 11 21 31  \n  12 22 32  \n  13 23 33  \n           \u2518</code></pre></p> <p>For example, the join function <code>\u223e</code>  will join two lists together. We can use the table modifier to join combinations of words from two lists. </p> <p><pre><code>   1 4 9 , 6 5 4</code></pre> <pre><code>1 4 9 6 5 4</code></pre></p> <p><pre><code>   \"joined up\" \u223e \"text vectors\"</code></pre> <pre><code>\"joined uptext vectors\"\n\u00a0</code></pre></p> <p><pre><code>   \"chicken\"\u203f\"pork\"\u203f\"vegetable\" \u223e\u231c \" chow mein\"\u203f\" with cashew nuts\"</code></pre> <pre><code>\u250c\u2500                                                    \n\u2575 \"chicken chow mein\"   \"chicken with cashew nuts\"    \n  \"pork chow mein\"      \"pork with cashew nuts\"       \n  \"vegetable chow mein\" \"vegetable with cashew nuts\"  \n                                                     \u2518</code></pre></p> <p>What are those boxes around the output?</p> <p>In BQN, any value can be used an array element, including others arrays. The next section on multidimensional and nested arrays introduces them in more detail.</p>"},{"location":"bqn/array-logic-data-driven-conditionals/#replicatecompress","title":"Replicate/Compress","text":"<p>The replicate function <code>\ud835\udd68/\ud835\udd69</code> repeats each major cell in <code>\ud835\udd69</code> the corresponding number of times specified in <code>\ud835\udd68</code>.</p> <p><pre><code>   1\u203f2\u203f3/\"ABC\"</code></pre> <pre><code>\"ABBCCC\"</code></pre></p> <p><pre><code>   a \u2190 2\u203f3\u294a\"APLBQN\"</code></pre> <pre><code>\u250c\u2500     \n\u2575\"APL  \n  BQN\" \n      \u2518</code></pre></p> <p><pre><code>   1\u203f2/a</code></pre> <pre><code>\u250c\u2500     \n\u2575\"APL  \n  BQN  \n  BQN\" \n      \u2518</code></pre></p> <p>??? Why is this different than APL?     BQN's replicate behaves differently than APL's. BQN's replicate repeats each major cell.</p> <pre><code>To replicate (go ahead, roll your eyes) APL's behavior in BQN, we have to modify the replicate function to be applied to each major cell:\n\n```BQN\n   b /\u23891 a  # Specifying rank of 1\n   b\u22b8/\u02d8a    # Using the cells modifier\n```\n```\n\u250c\u2500        \n\u2575\"APPLLL  \n  BQQNNN\" \n         \u2518\n```\n\nWe'll cover the rank and cells primitives in later lessons.\n\n</code></pre> <p>When used with a Boolean array, the replicate function acts like filter.</p> <p><pre><code>   0\u203f1\u203f0\u203f0\u203f1\u203f0/\"APLBQN\"</code></pre> <pre><code>Y\nO</code></pre></p>"},{"location":"bqn/array-logic-data-driven-conditionals/#indexing","title":"Indexing","text":"<p>In many other programming languages, \"selection\" is used to describe control structures such as \"if then else\" or \"switch case\". In BQN, we can get a similar effect by literally \"selecting\" elements from arrays.</p> <p>The two means of selection here are the select function <code>\u228f</code> and the filtering usage of replicate which we saw earlier.</p> <p>Info</p> <p>Indexing starts from 0 by default, unlike APL which starts from 1 by default.</p> <p><pre><code>   0\u203f7\u203f10\u228f\"BOILED QUINOA\"</code></pre> <pre><code>BQN</code></pre></p> <p><pre><code>   / 1\u203f0\u203f0\u203f1\u203f0\u203f1</code></pre> <pre><code>\u27e8 0 3 5 \u27e9</code></pre></p> <p><pre><code>   IsDivisibleBy \u2190 {0=\ud835\udd69|\ud835\udd68}\n   3\u203f6\u203f8\u203f5\u203f2 IsDivisibleBy 2</code></pre> <pre><code>\u27e8 0 1 1 0 1 \u27e9</code></pre></p> <p><pre><code>   3\u203f6\u203f8\u203f5\u203f2 {(\ud835\udd68 IsDivisibleBy \ud835\udd69)/\ud835\udd68} 2</code></pre> <pre><code>\u27e8 6 8 2 \u27e9</code></pre></p>"},{"location":"bqn/array-logic-data-driven-conditionals/#problem-set-3","title":"Problem set 3","text":"<ol> <li> <p>Define the numeric vector <code>nums</code></p> <pre><code>   nums \u2190 3\u203f5\u203f8\u203f2\u203f1</code></pre> <ol> <li>Using <code>nums</code>, define <code>mat</code></li> </ol> <p><pre><code>   mat</code></pre> <pre><code>\u250c\u2500       \n\u2575 3 5 8  \n  2 1 3  \n        \u2518</code></pre></p> <ol> <li>Using <code>mat</code>, define <code>stack</code></li> </ol> <p><pre><code>   stack</code></pre> <pre><code>\u250c\u2500       \n\u2575 3 5 8  \n  2 1 3  \n  3 5 8  \n  2 1 3  \n        \u2518</code></pre></p> <ol> <li>Using <code>mat</code>, define <code>wide</code></li> </ol> <p><pre><code>   wide</code></pre> <pre><code>\u250c\u2500             \n\u2575 3 5 8 3 5 8  \n  2 1 3 2 1 3  \n              \u2518</code></pre></p> Answers <p><ol> <li> <pre><code>   mat \u2190 2\u203f3\u294anums</code></pre> </li> <li> <pre><code>   stack \u2190 2/mat</code></pre> </li> <li> <pre><code>   wide \u2190 mat(\u223e\u23891)mat</code></pre> </li> </ol></p> </li> <li> <p>Why does <code>101=\"101\"</code> evaluate to a 3-element list?</p> Answer <p><code>101</code> is a literal single number (a scalar), whereas <code>\"101\"</code> is a literal 3-element character vector.</p> <p>Due to singleton extension, <code>101=\"101\"</code> compares the single number <code>101</code> to each of the 3 characters in the 3-element character vector <code>\"101\"</code>. The character vector <code>\"101\"</code> is equivalent to <code>'1'\u203f'0'\u203f'1'</code> but the number <code>101</code> is not the same as the 3-element numeric vector <code>1\u203f0\u203f1</code>.</p> </li> <li> <p>Write a function <code>PassFail</code> which takes an array of scores and returns an array of the same shape in which <code>F</code> corresponds to a score less than 40 and <code>P</code> corresponds to a score of 40 or more.</p> <p><pre><code>   PassFail 35\u203f40\u203f45</code></pre> <pre><code>\"FPP\"</code></pre></p> <p><pre><code>   PassFail 2\u203f5\u294a89\u203f77\u203f15\u203f49\u203f72\u203f54\u203f25\u203f18\u203f57\u203f53</code></pre> <pre><code>\u250c\u2500       \n\u2575\"PPFPP  \n  PFFPP\" \n        \u2518</code></pre></p> Answer <pre><code>   PassFail \u2190 {(\ud835\udd69\u226540)\u228f\"FP\"}</code></pre> </li> <li> <p>This problem is taken from the 2019 APL Problem Solving Competition.</p> <p>A Grille is a square sheet with holes cut out of it which, when laid on top of a similarly-sized character matrix, reveals a hidden message.</p> <p></p> <p>Write a BQN function <code>DecodeGrille</code> which:</p> <ul> <li>takes a character matrix left argument where a hash <code>'#'</code> represents opaque material and a space <code>' '</code> represents a hole.</li> <li>takes a character matrix of the same shape as right argument</li> <li>returns the hidden message as a character vector</li> </ul> <p><pre><code>   (2\u203f2\u294a\"# # \") DecodeGrille 2\u203f2\u294a\"LHOI\"</code></pre> <pre><code>\"HI\"</code></pre></p> <p><pre><code>   grid   \u2190 5\u203f5\u294a\"VRYIALCLQIFKNEVPLBRKMQNFF\"\n   grille \u2190 5\u203f5\u294a\"\u233a\u233a\u233a \u233a \u233a\u233a\u233a \u233a \u233a \u233a\u233a\u233a \u233a\u233a\u233a  \u233a\u233a\"\n   grid \u22c8 grille</code></pre> <pre><code>\u250c\u2500                     \n\u00b7 \u250c\u2500        \u250c\u2500         \n  \u2575\"VRYIA   \u2575\"\u233a\u233a\u233a \u233a    \n    LCLQI      \u233a\u233a\u233a     \n    FKNEV     \u233a \u233a \u233a    \n    PLBRK     \u233a\u233a \u233a\u233a    \n    MQNFF\"    \u233a  \u233a\u233a\"   \n          \u2518         \u2518  \n                      \u2518</code></pre></p> <p><pre><code>   grille DecodeGrille grid</code></pre> <pre><code>\"ILIKEBQN\"</code></pre></p> Answer <p>We can take an approach that uses Select <code>\ud835\udd68\u228f\ud835\udd69</code> or an approach that uses Group <code>\ud835\udd68\u2294\ud835\udd69</code>.</p> <p>The Select function <code>\u228f</code> supports its left argument being a boolean mask, but requires that mask to be a rank-1 array. This means we have to deshape both of our arrays before selecting:</p> <pre><code>   DecodeGrille \u2190 {(' '=\u294a\ud835\udd68)/\u294a\ud835\udd69}</code></pre> <p>Here are two ways to read the above in English:</p> <p>\"Replicate items in the deshaped right argument according to the indices of space characters in the left argument.\"</p> <p>\"Keep items from the flattened right argument at the same indices where the flattened left argument has space characters.\"</p> <p>Alternatively, we can create a boolean mask of the same shape as the original grille and use that as the left argument to Group <code>\u2294</code>. The Group function will then bucket items from its right argument (our grid) according to whether the left argument has a <code>0</code> or a <code>1</code> at that same spot.</p> <pre><code>Grille \u2190 {1\u2291(grille=' ')\u2294grid}</code></pre> <p>Group returns an array of its groupings. We therefore have to grab the one-th item, because \"indices that match a space\" will have a value of <code>1</code> in the left argument, and thus values from the right argument at those spots will be grouped under index <code>1</code>.</p> <p>In English: \"Take the one-th value from the grouping of items in the right argument at indices where the left argument has space characters.\"</p> </li> <li> <p>Back to School</p> <ol> <li> <p>Write a function to produce the multiplication table from <code>1</code> to <code>\ud835\udd69</code>. </p> <p><pre><code>      MulTable 7</code></pre> <pre><code>\u250c\u2500                   \n\u2575 1  2  3  4  5  6  7\n  2  4  6  8 10 12 14\n  3  6  9 12 15 18 21\n  4  8 12 16 20 24 28\n  5 10 15 20 25 30 35\n  6 12 18 24 30 36 42\n  7 14 21 28 35 42 49\n                      \u2518</code></pre></p> </li> <li> <p>Write a function to produce the addition table from <code>0</code> to <code>\ud835\udd69</code>.</p> <p><pre><code>      AddTable 6</code></pre> <pre><code>\u250c\u2500            \n\u2575 0 1 2 3 4  5\n  1 2 3 4 5  6\n  2 3 4 5 6  7\n  3 4 5 6 7  8\n  4 5 6 7 8  9\n  5 6 7 8 9 10\n               \u2518</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>   MulTable \u2190 {(1+\u2195\ud835\udd69)\u00d7\u231c1+\u2195\ud835\udd69}</code></pre> <p>Avoid repeating yourself by assigning values to a name (<code>nums</code> in this example):</p> <pre><code>   MulTable \u2190 {nums\u21901+\u2195\ud835\udd69 \u22c4 nums\u00d7\u231cnums}</code></pre> <p>Or, if left and right arguments to a dyadic function are the same, use the modifier Self <code>F\u02dc\ud835\udd69</code> which takes one argument <code>\ud835\udd69</code> and passes it as both the left and right arguments to the function <code>F</code> it modifies:</p> <pre><code>   MulTable \u2190 {\u00d7\u231c\u02dc1+\u2195\ud835\udd69}</code></pre> <p> <li> <p>Using the same three styles as described in part (a) above:</p> <pre><code>   AddTable \u2190 {(\u2195\ud835\udd69)+\u231c\u2195\ud835\udd69}\n   AddTable \u2190 {nums\u2190\u2195\ud835\udd69 \u22c4 nums+\u231cnums}\n   AddTable \u2190 {+\u231c\u02dc\u2195\ud835\udd69}</code></pre> <p> </p> </li> <li> <p>Making the Grade</p> <p> Score Range <code>0-64</code> <code>65-69</code> <code>70-79</code> <code>80-89</code> <code>90-100</code> Letter Grade F D C B A </p> <p>Write a function that, given an array of integer test scores in the inclusive range 0 to 100, returns a list of letter grades according to the table above.</p> <p><pre><code>   Grade 0\u203f10\u203f75\u203f78\u203f85</code></pre> <pre><code>\"FFCCB\"</code></pre></p> Answer <p>Use the table modifier to compare all combinations of the lower bounds and the scores. The column-wise sum then tells us which \"bin\" each score belongs to:</p> <pre><code>Grade \u2190 {(1-\u02dc+\u02dd0\u203f65\u203f70\u203f80\u203f90\u2264\u231c\ud835\udd69)\u228f\"FDCBA\"}</code></pre> <p>Remembering that comparisons like <code>\u2264</code> return either <code>0</code> or <code>1</code>, this can be read in English as: Select the characters from <code>\"FDCBA\"</code> at the indices calculated by subtracting 1 from the column-wise sums of the comparison of the lowest-acceptable scores for each letter grade to the actual score.</p> <p>In the above solution, we've used the swap modifier <code>\u02dc</code> with <code>-</code> to avoid parentheses. We can get rid of all parenthese with one more: <code>Grade \u2190 {\"FDCBA\"\u228f\u02dc1-\u02dc+\u02dd0\u203f65\u203f70\u203f80\u203f90\u2264\u231c\ud835\udd69}</code></p> </li> <li> <p>Analysing text</p> <ol> <li> <p>Write a function test if there are any vowels <code>'aeiou'</code> in text vector <code>\u2375</code></p> <pre><code>   AnyVowels \"this text is made of characters\"\n1\n   AnyVowels \"bgxkz\"\n0</code></pre> </li> <li> <p>Write a function to count the number of vowels in its character vector argument <code>\u2375</code></p> <p><pre><code>      CountVowels \"this text is made of characters\"</code></pre> <pre><code>9</code></pre></p> <p><pre><code>      CountVowels \"we have twelve vowels in this sentence\"</code></pre> <pre><code>12</code></pre></p> </li> <li> <p>Write a function to remove the vowels from its argument</p> <pre><code>      RemoveVowels \"this text is made of characters\"\n\"ths txt s md f chrctrs\"</code></pre> </li> </ol> Answers <p>TODO Consider whether this tabling is helpful, or just use membership. <ol> <li> With two or-reductions, we ask \"are there any <code>1</code>s in each row?\" Then, \"are there any <code>1</code>s in any of the rows?\" <pre><code>AnyVowels \u2190 {\u2228/\u2228/'aeiou'\u2218.=\u2375}</code></pre> <p>Or we can ravel the contents of the array into a vector to perform one big or-reduction across all elements:</p> <pre><code>AnyVowels \u2190 {\u2228/,'aeiou'\u2218.=\u2375}</code></pre> <p> <li> <p>Similar techniques can be used for counting the ones:</p> <pre><code>CountVowels \u2190 {+/+/'aeiou'\u2218.=\u2375}\nCountVowels \u2190 {+/,'aeiou'\u2218.=\u2375}</code></pre> <p>Because we are comparing a single vector, +\u233f and \u2228\u233f both tell us if there is any vowel in that position:</p> <pre><code>CountVowels \u2190 {+/+\u233f'aeiou'\u2218.=\u2375}\nCountVowels \u2190 {+/\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> <p> <li> To remove vowels, we must consider the columns of our outer product equality. We then keep elements which are not <code>~\u2375</code> vowels. <pre><code>RemoveVowels \u2190 {\u2375/\u2368~\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> <p>Or rows if the arguments to our outer product are swapped:</p> <pre><code>RemoveVowels \u2190 {\u2375/\u2368~\u2228/'aeiou'\u2218.=\u2375}</code></pre> <p>Since we are compressing elements out of a vector, we can use either replicate <code>\u237a/\u2375</code> or replicate-first <code>\u237a\u233f\u2375</code>. This is because a vector only has a single dimension, or axis, and that axis is both the first and the last.</p> <pre><code>RemoveVowels \u2190 {\u2375/\u2368\u2228\u233f'aeiou'\u2218.=\u2375}\nRemoveVowels \u2190 {\u2375\u233f\u2368\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> </li> <li> <p>Matching shapes</p> <ol> <li> <p>Write a function to add a vector <code>\u2375</code> to each row of a matrix <code>\u237a</code>:</p> <pre><code>      (3 2\u23741 100) AddRows 1 9\n2 109\n2 109\n2 109\n      (5 3\u23741 10 100 1000) AddRows 5 10 15\n6   20  115\n1005   11   25\n105 1010   16\n15  110 1015\n6   20  115</code></pre> </li> <li> <p>Write a function to add a vector to each row of a matrix, regardless of the order in which they are supplied:</p> <pre><code>      1 9 AddRows 3 2\u23741 100\n2 109\n2 109\n2 109\n      (2 2\u23741 9 11 18) AddRows 9 1\n10 10\n20 19</code></pre> </li> </ol> Answers <p><ol> <li> Reshape recycles elements. We can use this to duplicate rows until we have the correct shape to allow <code>+</code> to map between elements for us: <pre><code>AddRows \u2190 {\u2375+(\u2374\u2375)\u2374\u237a}</code></pre> </li> <li> Finding the maximum shape is a more general solution: <pre><code>AddRows \u2190 {s\u2190(\u2374\u237a)\u2308\u2374\u2375 \u22c4 (s\u2374\u237a)+s\u2374\u2375}</code></pre> <p>This way of applying functions between arrays of different shapes is very common. As with many things in this course, eventually we will discover more elegant methods. Here is an example of using the rank operator:</p> <p><pre><code>AddRows \u2190 +\u23641</code></pre> </p> </li> <li> <p>These are the heights of some students in 3 classes.     <pre><code>student \u2190 10 7\u2374'Kane   Jonah  JessicaPadma  Katie  CharlieAmil   David  Zara   Filipa '\nclass \u2190 'CBACCCBBAB'\nheight \u2190 167 177 171 176 178 164 177 177 173 160</code></pre></p> <p>Use APL to:</p> <ol> <li>Find the height of the tallest student</li> <li>Find the name of the tallest student</li> <li>Find the class to which the tallest student belongs  </li> <li>Find the average height of students in class <code>B</code></li> </ol> Answers <p><ol> <li> <pre><code>      \u2308/height\n178</code></pre> </li> <li> <pre><code>      (height=\u2308/height)\u233fstudent\nKatie</code></pre> </li> <li> <pre><code>      (height=\u2308/height)\u233fclass\nC</code></pre> <p>You might have tried to use indexing and gotten an error:</p> <pre><code>RANK ERROR\n        student[\u2378height=\u2308/height]\n                \u2227</code></pre> <p>There is additional syntax in order to select from matrices and higher rank arrays.</p> <p> <li> We can use either compress or indexing to select from the <code>height</code> vector: <pre><code>      Mean \u2190 {(+/\u2375)\u00f7\u2262\u2375}\n      Mean (class='B')/height\n172.75\n      Mean height[\u2378class='B']\n172.75</code></pre> </li> </p> </li> <li> <p>Optimus Prime</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a dfn which returns all of the prime numbers between <code>1</code> and <code>\u2375</code>.</p> <p><pre><code>      Primes 10</code></pre> <pre><code>2 3 5 7</code></pre></p> <p><pre><code>      Primes 30</code></pre> <pre><code>2 3 5 7 11 13 17 19 23 29</code></pre></p> Answer <pre><code>Primes \u2190 {\u23782=+\u233f0=\u2218.|\u2368\u2373\u2375}</code></pre> <p>An alternative coding uses the multiplication table:</p> <pre><code>Primes \u2190 {i~\u2218.\u00d7\u2368i\u21901\u2193\u2373\u2375}</code></pre> <p>Of course, the outer product <code>\u2218.F</code> indicates that the number of calculations to compute both of these solutions increases with the square of the input size. We say they have a computational complexity \"of order n squared\" or \\(O(n^2)\\) in big-O notation. This is a very inefficient way to find prime numbers. To see discussions around more efficient ways to compute prime numbers in APL, see the dfns page on prime numbers.</p> </li> </ol>"},{"location":"bqn/basic-syntax-and-arithmetic/","title":"Basic syntax","text":""},{"location":"bqn/basic-syntax-and-arithmetic/#functions-and-arguments","title":"Functions and arguments","text":"<p>BQN has two-argument, infix functions. These are called dyadic functions.</p> <p><pre><code>      3 \u00d7 5</code></pre> <pre><code>15</code></pre></p> <p><pre><code>      3 - 5</code></pre> <pre><code>\u00af2</code></pre></p> <p>Some functions map between elements of their left and right argument arrays. It is easy to add lists of numbers together: <pre><code>      1\u203f2\u203f3 + 4\u203f5\u203f6</code></pre> <pre><code>\u27e8 5 7 9 \u27e9</code></pre></p> <p>Negative numbers are written with a high minus <code>\u00af</code> to differentiate between negation (<code>-3</code>) and literal negative numbers (<code>\u00af3</code>). <pre><code>      1\u203f2\u203f3 - 1\u203f0\u203f\u00af1</code></pre> <pre><code>0 2 4</code></pre></p> <p>There are also one-argument, prefix functions. These are called 1-argument or monadic functions. <pre><code>      - 5\u203f\u00af3\u203f0\u203f\u00af4\u203f2</code></pre> <pre><code>\u27e8 \u00af5 3 0 4 \u00af2 \u27e9</code></pre></p> <p><pre><code>      \u233d 1\u203f2\u203f3\u203f4\u203f5</code></pre> <pre><code>\u27e8 5 4 3 2 1 \u27e9</code></pre></p> <p>Some symbols represent both a 1-argument and a 2-argument function, but these are often closely related. As we will see later, even user-defined functions can be monadic, dyadic or even both (ambivalent).</p> <p> Try this: Use these functions monadically and dyadically:</p> <code>+</code> <code>-</code> <code>\u00d7</code> <code>\u00f7</code> <code>|</code> <code>*</code> <code>\u221a</code> <code>\u2308</code> <code>\u230a</code>"},{"location":"bqn/basic-syntax-and-arithmetic/#singleton-extension","title":"Singleton extension","text":"<p>Dyadic functions can map between a single value and an array of values. <pre><code>      3 \u00d7 1\u203f10\u203f100</code></pre> <pre><code>\u27e8 3 30 300 \u27e9</code></pre></p> <p><pre><code>      3 = 1\u203f2\u203f3\u203f4\u203f5</code></pre> <pre><code>\u27e8 0 0 1 0 0 \u27e9</code></pre></p> <p> Try this: Replace the functions in the previous two expressions with: <code>\u2308</code> <code>\u230a</code> <code>&lt;</code></p> <p>While experimenting, you may cause an error:</p> <p><pre><code>      1\u203f2 + 3\u203f4\u203f5</code></pre> <pre><code>Mapping: Equal-rank argument shapes don't agree\n\n1\u203f2 + 3\u203f4\u203f5\n    ^</code></pre></p> <p>Functions such as <code>+ \u00d7 \u2308</code> apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the function should be applied. Of course, you may want to apply a function between all combinations of elements of the left and right argument, but that will be addressed soon enough.</p>"},{"location":"bqn/basic-syntax-and-arithmetic/#order-of-execution","title":"Order of execution","text":"<p>Expressions are executed from right to left.</p> <p><pre><code>      10\u00d7\u21952+5</code></pre> <pre><code>\u27e8 0 10 20 30 40 50 60 \u27e9</code></pre></p> Show me step-by-step <p>To start, there is a literal number 5: <pre><code>            5\n5</code></pre></p> <p>Next, there is a plus <code>+</code> with a number 2 to its immediate left, so it is evaluated as two plus five: <pre><code>          2+5\n7</code></pre></p> <p>Then the symbol Range <code>\u2195</code>. To its left is another function, multiply <code>\u00d7</code>, not a value. So the function is called monadically. The monadic form of <code>\u2195</code> is the index generator, which generates an integer array of length defined by its right argument, where each element is also its own index: <pre><code>         \u21952+5\n\u27e8 0 1 2 3 4 5 6 \u27e9</code></pre></p> <p>Lastly, another dyadic function, we multiply our list by ten: <pre><code>         10\u00d7\u21952+5\n\u27e8 0 10 20 30 40 50 60 \u27e9</code></pre></p> <p>The expression above is \"ten times the indices from 0 to two plus five, or in short: \"ten times range two plus five\". We can make it clearer using (superfluous) parentheses <code>()</code>. <pre><code>      10\u00d7(\u2195(2+5))</code></pre> <pre><code>\u27e8 0 10 20 30 40 50 60 \u27e9</code></pre></p> <p>Of course, we can change the order of execution using different parentheses.</p> <p><pre><code>      (10\u00d7\u21952)+5</code></pre> <pre><code>\u27e8 5 15 \u27e9</code></pre></p> Show me step-by-step <p>Beginning from the right, there is a literal number 5: <pre><code>      (10\u00d7\u21952)+5\n              5</code></pre></p> <p>Then there is a plus symbol <code>+</code>. Before we can decide if it is being called monadically or dyadically, we must look to the left.</p> <pre><code>            )+5</code></pre> <p>A right parenthesis. We must evaluate the contents of the parentheses to see if it is a function or a value.</p> <pre><code>      (10\u00d7\u21952)</code></pre> <p>This expression evaluates to the list <code>\u27e8 0 10 \u27e9</code>. Since it is a value, it is used as the left argument to our add function.</p> <pre><code>      (10\u00d7\u21952)+5\n      \u27e80, 10\u27e9+5\n\u27e8 5 15 \u27e9</code></pre> <p>Infix (dyadic) functions have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. </p> <p>If there is one, the left argument is the value to the immediate left.</p> <p>BQN, unlike APL, does not perform stranding, as you may have surmised from the use of the <code>\u203f</code> character, which is called strand.</p> <p>This prevents the confusion called out in the APL lesson:</p> <pre><code>      2 + 2 2 + 2</code></pre> <p>Gives the following error:</p> <pre><code>Double subjects (missing \u203f?)\n\n      2 + 2 2 + 2\n            ^</code></pre> <p>Using the explicit stranding, we get the same result as APL would for the above expression:</p> <pre><code>      2 + 2\u203f2 + 2\n\u27e8 6 6 \u27e9</code></pre> Show me step-by-step <p>First, there is a literal number 2 <pre><code>                2\n2</code></pre></p> <p>Then there is a symbol <code>+</code>. What, if any, is the value to its immediate left? <pre><code>          2\u203f2 + 2</code></pre></p> <p>It is a 2-element vector <code>2\u203f2</code>. The add function maps between these elements and the single number on the right: <pre><code>          2\u203f2 + 2\n\u27e8 4 4 \u27e9</code></pre></p> <p>Finally there is another addition. The overall evaluation looks like the following: <pre><code>      2 + 2\u203f2 + 2\n      2 + 4\u203f4\n\u27e8 6 6 \u27e9</code></pre></p>"},{"location":"bqn/basic-syntax-and-arithmetic/#comments","title":"Comments","text":"<p>Anything after a hash symbol <code>#</code> is ignored.</p> <p><pre><code>      # nothing happens on this line\n      2 \u00d7 3 # 4 5</code></pre> <pre><code>6</code></pre></p> <p><pre><code>      'A'   # hash is hard to mistake for another letter</code></pre> <pre><code>A</code></pre></p>"},{"location":"bqn/basic-syntax-and-arithmetic/#the-reduction-operator","title":"The reduction operator","text":"<p>Adding a list of numbers could become very tedious... <pre><code>      1+2+3+4+5+6+7+8+9+10+11+12+13+14+15</code></pre> <pre><code>120</code></pre></p> <p>We can phrase this list of integers <code>1</code> through <code>15</code> more succinctly:</p> <pre><code>      1+\u219515\n\u27e8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u27e9</code></pre> <p>The fold operator <code>\ud835\udd3d\u00b4</code> inserts the function <code>\ud835\udd3d</code> to its left between parts of the right argument array. <pre><code>      +\u00b41+\u219515</code></pre> <pre><code>120</code></pre></p> <p>Fold is also known as reduce because it reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result.</p>"},{"location":"bqn/basic-syntax-and-arithmetic/#range-the-index-generator","title":"Range: The index generator","text":"<p>The Range function <code>\u2195\ud835\udd69</code> generates integers from <code>0</code> up to the integer right argument <code>\ud835\udd69</code> <pre><code>      \u219510</code></pre> <pre><code>\u27e8 0 1 2 3 4 5 6 7 8 9 \u27e9</code></pre></p> <p>Note: APL's <code>\u2373</code> starts at <code>1</code>, while BQN's <code>\u2195</code> starts at 0.</p> <p>So we can do an arithmetic sum as follows:</p> Traditional Mathematical Notation (TMN) BQN \\(\\sum_{n=1}^N n\\) <code>+\u00b4\u2195N</code>"},{"location":"bqn/basic-syntax-and-arithmetic/#what-do-these-errors-mean","title":"What do these errors mean?","text":"<p>While experimenting, you are very likely to come across these:</p> <p><pre><code>      \u2195\u00af4</code></pre> <pre><code>\u2195\ud835\udd69: \ud835\udd69 must consist of natural numbers\n\n\u2195\u00af4\n^</code></pre></p> <p>The error indicates that this function expects natural numbers, which do not include negative integers. Negative numbers are outside the domain of the index generator function. How might you generate integers from 1 to negative four?</p> <p><pre><code>      1+</code></pre> <pre><code>Second-level parts of a train must be functions\n\n1+\n^</code></pre></p> <p>This error represents a syntactic error. Here, BQN thinks you're trying to string together multiple functions (a train whose cars are functions). We'll study trains and partial function application in later lessons.</p> <p><pre><code>      a</code></pre> <pre><code>Undefined identifier\n\na\n^</code></pre></p> <p>We have not seen any named functions or variables yet; nothing has been assigned to the name <code>a</code>, so trying to use it in an expression is meaningless.</p>"},{"location":"bqn/basic-syntax-and-arithmetic/#problem-set-1","title":"Problem Set 1","text":"<ol> <li> <p>The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable <code>t_allweek</code>.</p> <pre><code>t_allweek \u2190 \u27e8 11.7 , 8.6 , 9.7 , 14.2 , 6.7 , 11.8 , 9.2 \u27e9</code></pre> <p>Use BQN to compute the follwing:</p> <ol> <li>The highest daily temperature</li> <li>The lowest daily temperature</li> <li>The range of (difference between the largest and the smallest) temperatures</li> <li>Each temperature rounded to the nearest whole number</li> </ol> Answers <p><ol> <li> <pre><code>      \u2308\u00b4t_allweek\n14.2</code></pre> </li> <li> <pre><code>      \u230a\u00b4t_allweek\n6.7</code></pre> </li> <li> <pre><code>      (\u2308\u00b4t_allweek)-\u230a\u00b4t_allweek\n7.499999999999999</code></pre> <p>You may have found the correct answer using the following expression: <pre><code>      \u2308\u00b4t_allweek-\u230a\u00b4t_allweek\n7.5</code></pre></p> <p>but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: <pre><code>      \u2308\u00b4      t_allweek                 - \u230a\u00b4 t_allweek\n      \u2308\u00b4      t_allweek                 - 6.7\n      \u2308\u00b4 11.7\u203f8.6\u203f9.7\u203f14.2\u203f6.7\u203f11.8\u203f9.2 - 6.7\n      \u2308\u00b4 5\u203f1.9\u203f3\u203f7.5\u203f0\u203f5.1\u203f2.5\n      7.5</code></pre></p> <p>if we use parentheses <code>()</code> to force BQN to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: <pre><code>      ( \u2308\u00b4t_allweek ) - \u230a\u00b4 t_allweek\n      ( \u2308\u00b4t_allweek ) - 6.7\n      (     14.2    ) - 6.7\n      7.5</code></pre></p> <p> <li> To round to the nearest whole number, either add 0.5 and round down: <pre><code>      \u230a0.5+t_allweek\n\u27e8 12 9 10 14 7 12 9 \u27e9</code></pre> <p>or subtract 0.5 and round up: <pre><code>      \u2308t_allweek-0.5\n\u27e8 12 9 10 14 7 12 9 \u27e9</code></pre> </p> </li> <li> <p>A Mathematical Notation</p> <p>Use BQN to evaluate the following</p> <ol> <li> <p>\\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers)</p> </li> <li> <p>In TMN, the following expression is equal to <code>0</code>, why does the following return <code>70</code> in BQN?     <pre><code>      84 - 12 - 1 - 13 - 28 - 9 - 6 - 15</code></pre> <pre><code>70</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>      \u00d7\u00b41+\u219512\n479001600</code></pre> </li> <li> <pre><code>      +\u00b4(1+\u219517)\u22c62\n1785</code></pre> Without parentheses we get the sum of the first 289 integers, instead of the first 17 integers squared. <p>We can use the Explain button in the BQN online REPL to see the difference:</p> <pre><code>+\u00b4(1+\u219517)\u22c62 \n|     |   |\n|    \u219517  |\n|  1+\u2518    |\n|  \u2514-----\u22c62\n+\u00b4       |\n|--------y\n|\n1785</code></pre> <p>Without parentheses:</p> <pre><code>+\u00b41+\u219517\u22c62   \n| |   | |\n| |  17\u22c62\n| |    |\n| | \u2195--\u2518\n| | |\n| 1+\u2518\n|  |\n+\u00b4 |\n |-\u2518\n |\n41905</code></pre> TMN BQN \\(\\sum_n^{17^2} n\\) <code>+\u00b4\u219517\u22c62</code> \\(\\sum_n^{17} n^2\\) <code>+\u00b4(\u219517)\u22c62</code> <p> <li> <pre><code>      +\u00b42\u00d71+\u2195100\n10100</code></pre> </li> <li> We can either subtract 1 from the even numbers: <pre><code>      +\u00b4(2\u00d71+\u2195100)-1\n10000</code></pre> <p>or we can add negative 1: <pre><code>      +\u00b4\u00af1+2\u00d71+\u2195100\n10000</code></pre> The high minus denotes a literal negative, whereas the hyphen indicates subtraction.  <li> Remember the right-to-left rule: functions take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how BQN evaluates our expression. <pre><code>      (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15)))))))\n70</code></pre> </li> </p> </li> <li> <p>Pyramid Schemes</p> <ol> <li> <p>Sugar cubes are stacked in an arrangement as shown by Figure 1.</p> <p> Figure 1. Stacked sugar cubes</p> <p>This stack has <code>4</code> layers and a total of <code>30</code> cubes. How many cubes are there in a similar stack with <code>467</code> layers?</p> </li> <li> <p>Now consider the stack in Figure 2.</p> <p> Figure 2. Differently stacked sugar cubes</p> <p>The arrangement in Figure 2 has <code>4</code> layers and <code>84</code> cubes. How many cubes are there in a similar stack with <code>812</code> layers?</p> </li> <li> <p>Now look at Figure 3.</p> <p> Figure 3. This is just a waste of sugar cubes by now...</p> <p>The stack in Figure 3 has <code>3</code> \"layers\" and <code>36</code> cubes in total. How many cubes are there in a similar stack with <code>68</code> \"layers\"?</p> </li> </ol> Answers <p><ol> <li> Each \\(n\\)th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. <pre><code>    +\u00b4(1+\u21954)\u22c62</code></pre> <pre><code>30</code></pre> <p><pre><code>    +\u00b4(1+\u2195467)\u22c62</code></pre> <pre><code>34058310</code></pre> <li> Each \\(n\\)th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. <pre><code>    +\u00b4(\u00af1+2\u00d71+\u21954)\u22c62</code></pre> <pre><code>84</code></pre> <p><pre><code>    +\u00b4(\u00af1+2\u00d71+\u2195812)\u22c62</code></pre> <pre><code>713849500</code></pre> <li> Each \\(n\\)th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. <pre><code>    +\u00b4(1+\u21953)\u22c63</code></pre> <pre><code>36</code></pre> <p><pre><code>    +\u00b4(1+\u219568)\u22c63</code></pre> <pre><code>5503716</code></pre> </p> </li> <li> <p>Rewrite the following expressions so that they do not use parentheses.</p> <ol> <li><code>(\u00f7a)\u00d7b</code></li> <li><code>(\u00f7a)\u00f7b</code></li> <li><code>(a+b)-5</code></li> <li><code>(a+b)+5</code></li> </ol> Answers <p><ol> <li>Multiplication is commutative, which means that the order of arguments does not matter, so we can write <code>b\u00d7\u00f7a</code>. Even more simply, it is <code>b\u00f7a</code> because multiplication by a reciprocal is the same as division.</li> <li>\\({{{1}\\over{a}}\\div{b}} = {{1}\\over{a\\times{b}}}\\) so we can write <code>\u00f7a\u00d7b</code></li> <li>Use a literal negative five:<code>\u00af5+a+b</code></li> <li>No parentheses needed: <code>a+b+5</code></li> </ol></p> </li>"},{"location":"bqn/basic-syntax-and-arithmetic/#further-resources","title":"Further Resources","text":"<ul> <li>Tutorial: BQN expressions</li> <li>Expression Syntax</li> </ul>"},{"location":"bqn/fns-and-assignment/","title":"Functions and Assignment","text":"Before diving in <p>At this point, you should work through Tutorial: BQN expressions to get a general, BQN-focused introduction.</p> <p>As part of that, reviewing Expression syntax and Types would also serve you well, paying attention to sections about Roles in BQN.</p>"},{"location":"bqn/fns-and-assignment/#functions","title":"Functions","text":"<p>A function is an operation that takes one or two subject arguments. The left argument is called <code>\ud835\udd68</code> and the right argument <code>\ud835\udd69</code>.</p> <p>You can define your own explicit functions using block syntax:</p> <p><pre><code>      3{\ud835\udd68}5      # \ud835\udd68 is the (optional) left argument</code></pre> <pre><code>3</code></pre></p> <p><pre><code>      {\ud835\udd69}\"apl\"   # \ud835\udd69 is the right argument</code></pre> <pre><code>\"apl\"</code></pre></p> <p><pre><code>      {\ud835\udd68}5       # Calling a dyadic function monadically results in an error</code></pre> <pre><code>Error: Left argument required\n\n{\ud835\udd68}5\n^^^</code></pre></p> <p><pre><code>      3{\ud835\udd69}       # Calling a function without a right argument results in an error</code></pre> <pre><code>Error: Second-level parts of a train must be functions\n\n3{\ud835\udd69}\n^</code></pre></p> <p>From here, when functions are first introduced, <code>Fn \ud835\udd69</code> denotes a monadic function <code>Fn</code> and <code>\ud835\udd68 Fn \ud835\udd69</code> denotes a dyadic function.</p>"},{"location":"bqn/fns-and-assignment/#assignment","title":"Assignment","text":"<p>Names are assigned with the left arrow <code>name \u2190 expression</code>. We say \"name gets [function or array]\".</p> <p><pre><code>      one\u21901\n      three\u21903\n      Equals\u2190=\n      Plus\u2190+\n      four\u21904\n      four Equals one Plus three  # 1 means true, 0 means false</code></pre> <pre><code>1</code></pre></p> <p>Note that the role of both sides of an assignment must match. If you try to assign <code>Equals</code> as <code>equals</code>, you get the following error:</p> <p><pre><code>equals\u2190=</code></pre> <pre><code>Error: Role of the two sides in assignment must match\n\nequals\u2190=\n^^^^^^</code></pre></p> <p>Consult the resources in Before diving in above if the term \"role\" or this error doesn't make sense.</p> <p>We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short.</p> <p>Read the following as \"squared numbers divided by the sum of squares\": <pre><code>      squared\u00f7+\u00b4squared\u2190\u00af1\u203f0\u203f1\u203f2\u22c62</code></pre> <pre><code>\u27e8 0.16666666666666666 0 0.16666666666666666 0.6666666666666666 \u27e9</code></pre></p>"},{"location":"bqn/fns-and-assignment/#mutating-variables","title":"Mutating Variables","text":"<p>You may come across the following error:</p> <p><pre><code>      Count \u2190 {+\u00b4\ud835\udd69}\n      count \u2190 {+\u00b4\ud835\udd69} 1\u203f0\u203f0\u203f1\u203f0\u203f1\u203f0</code></pre> <pre><code>Error: Redefinition\n\n      count \u2190 {+\u00b4\ud835\udd69} 1\u203f0\u203f0\u203f1\u203f0\u203f1\u203f0\n      ^^^^^</code></pre></p> <p>BQN does not permit reassigning a variable within the same scope.  You can, however, mutate an already-defined variable using <code>\u21a9</code>.</p> <p><pre><code>      a \u2190 4</code></pre> <pre><code>4</code></pre></p> <p><pre><code>      a \u221a\u21a9     # a is now the square root of its previous value</code></pre> <pre><code>2</code></pre></p> <p><pre><code>      a \u22c6\u21a9 3   # a is now its previous value cubed</code></pre> <pre><code>8</code></pre></p> <p>These expressions expand as found in BQN's online documentation:</p> Syntax Meaning <code>a F\u21a9</code> <code>a \u21a9 F a</code> <code>a F\u21a9 b</code> <code>a \u21a9 a F b</code>"},{"location":"bqn/fns-and-assignment/#multiline-functions","title":"Multiline functions","text":"<p>You can do quite a lot in a single line of BQN. However, it is not long before you want to keep sequences of multiple statements available for re-use. Of course we can write functions which consist of multiple statements.</p> <p>The statement separator, <code>\u22c4</code> (diamond), allows us to write multiple APL statements in a single line. Some people think that it is more readable to spread multiple statements across multiple lines of a function. However, it is worth being aware that BQN diamonds <code>\u22c4</code> are equivalent to newline characters in terms of execution. The following two definitions of the <code>Mean</code> function are equivalent.</p> <pre><code> Mean \u2190 {\n    sum \u2190 +\u00b4\ud835\udd69\n    count \u2190 \u2262\ud835\udd69\n    sum \u00f7 count\n }\n\n Mean \u2190 { sum \u2190 +\u00b4\ud835\udd69 \u22c4 count \u2190 \u2262\ud835\udd69 \u22c4 sum \u00f7 count }</code></pre> <p>Separate statements are executed from left to right and top to bottom.</p>"},{"location":"bqn/fns-and-assignment/#problem-set-2","title":"Problem set 2","text":"<p>The following problems can be solved with single-line functions.</p> <ol> <li> <p>Eggs</p> <p>A recipe serving 4 people uses 3 eggs. Write the function <code>Eggs</code> which computes the number of eggs which need cracking to serve <code>\u2375</code> people. Using a fraction of an egg requires that a whole egg be cracked.</p> <p><pre><code>      Eggs 4</code></pre> <pre><code>3</code></pre></p> <p><pre><code>      Eggs 100</code></pre> <pre><code>75</code></pre></p> <p><pre><code>      Eggs 1+\u219512</code></pre> <pre><code>1 2 3 3 4 5 6 6 7 8 9 9</code></pre></p> Answer <pre><code>Eggs \u2190 {\u2308\ud835\udd69\u00d73\u00f74}</code></pre> </li> <li> <p>Write a function <code>To</code> which returns integers from <code>\ud835\udd68</code> to <code>\ud835\udd69</code> inclusive.</p> <pre><code>      3 To 3\n3\n      3 To 4\n\u27e8 3 4 \u27e9\n      1 To 7\n\u27e8 1 2 3 4 5 6 7 \u27e9\n      \u00af3 To 5\n\u27e8 \u00af3 \u00af2 \u00af1 0 1 2 3 4 5 \u27e9</code></pre> <p>BONUS: What if <code>\ud835\udd68&gt;\ud835\udd69</code>? <pre><code>      3 To 5\n\u27e8 3 4 5 \u27e9\n      5 To 3\n\u27e8 5 4 3 \u27e9\n      5 To \u00af2\n\u27e8 5 4 3 2 1 0 \u00af1 \u00af2 \u27e9</code></pre></p> Answer <p>In the simple case, make sure to generate enough numbers and use <code>\ud835\udd68</code> as an offset: <pre><code>To \u2190 {\ud835\udd68+\u21951+\ud835\udd69-\ud835\udd68}</code></pre> In general we take into account whether the difference is positive or negative: <pre><code>To \u2190 {\ud835\udd68+(\u00d7d)\u00d7\u21951+|d\u2190\ud835\udd69-\ud835\udd68}</code></pre></p> </li> <li> <p>The formula to convert temperature from Celsius (\\(T_C\\)) to Fahrenheit (\\(T_F\\)) in traditional mathematical notation is as follows:</p> \\[T_F = {32 + {{9}\\over{5}}\\times {T_C}}\\] <p>Write the function <code>CtoF</code> to convert temperatures from Celcius to Farenheit. <pre><code>      CtoF 11.3\u203f23\u203f0\u203f16\u203f\u00af10\u203f38\n\u27e8 52.34 73.4 32 60.8 14 100.4 \u27e9</code></pre></p> Answer <pre><code>CtoF \u2190 {32+\u2375\u00d79\u00f75}</code></pre> </li> <li> <p>Prime Time</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a function which returns <code>1</code> if its argument is prime and <code>0</code> otherwise.</p> <pre><code>          IsPrime 21\n0\n          IsPrime 17\n1\n</code></pre> Answer <p>There are several ways to code this, but the basic method is to count the number of divisors. <pre><code>IsPrime \u2190 {2=+\u00b4d=\u230ad\u2190\ud835\udd69\u00f71+\u2195\ud835\udd69}\nIsPrime \u2190 {2=+\u00b40=(1+\u2195\ud835\udd69)|\ud835\udd69}</code></pre></p> </li> </ol>"},{"location":"dyalog/Assignment/","title":"Assigning to arrays","text":""},{"location":"dyalog/Assignment/#indexed-assignment","title":"Indexed Assignment","text":"<p>Assign values at specified indices.</p> <pre><code>      t\u21904 4\u2374'some sample text'\n      t[\u2378t\u220a'aeiou']\u2190'!'</code></pre>"},{"location":"dyalog/Assignment/#selective-assignment","title":"Selective Assignment","text":"<p>Define <code>n\u21905 5\u2374\u237325</code> in your workspace.</p> <ol> <li> <p>Using selections, find at least four different ways to set the bottom-right 3 by 3 submatrix in <code>n</code> to <code>0</code>.     For example, <code>(2 2\u2193n)\u21900</code>.</p> Hint <p>See which primitives may be used in a selective assignment</p> </li> </ol>"},{"location":"dyalog/Assignment/#modified-assignment","title":"Modified Assignment","text":"<p>Experiment with the following expressions, paying particular attention to the <code>name f\u2190 array</code> construct.</p> <pre><code>      salaries\u219018250 42500 56000 57250 48640\n      codes\u2190'ACDDC'\n      salaries\u00d7\u21901.1\n      salaries[\u2378codes='C']\u00d7\u21901.05\n\n      a\u2190\u2395A\n      (3\u2191a),\u2190'abcd'</code></pre>"},{"location":"dyalog/Assignment/#at","title":"At","text":"<p>Monadic functions take a single right argument array as input. Dyadic functions take two argument arrays.</p> <p>Monadic operators take a single left operand which can be a function or an array (as in <code>+/</code> where plus <code>+</code> is the function operand and reduce <code>/</code> is the operator). </p> <p>Dyadic operators take two operands which could be functions or arrays depending on the operator's definition. For example, the rank operator <code>F\u2364k</code> takes a function left operand <code>F</code> and array right operand <code>k</code> of up to 3 elements.</p> <p>Selective and indexed assignment methods will change the values of variables. The \"at\" operator <code>@</code> merges two arrays at specified indices and returns a new array.</p> <p>If a function right operand returns a boolean array when applied to <code>\u2375</code> (e.g. <code>3=1 3 5</code>) then ones <code>1</code> in the boolean array determine where scalars of <code>\u237a</code> are inserted.</p> <pre><code>      ('\u2206\u2365'@{\u2375\u220a'AEIOU'})2 3\u2374'DYALOG'\n      (' '@2 3 4)'DYALOG'\n      (' '@(1 2)(1 3)(2 1))2 3\u2374'DYALOG'</code></pre> <ol> <li>The following expression contains an error: <code>('\u2206\u2365'@1)2 3\u2374'DYALOG'</code>     Change the parenthesised function containing <code>@</code> in two ways so that it gives the following results:  <ol> <li> <p><pre><code>\u2206\u2206\u2206\nLOG</code></pre> </p> </li> <li> <p><pre><code>\u2206\u2206\u2206\n\u2365\u2365\u2365</code></pre></p> </li> </ol> </li> </ol> <p>Generally, the left operand to <code>@</code> is a function applied to scalars in <code>\u2375</code> which are specified by a right operand that is either an array of scalar (simple or enclosed vector) indices or a boolean array returned by a right operand function. An array left operand is shorthand for a constant function that returns the array.</p> <pre><code>      {1\u2193(1\u2218(819\u2336)@{\u00af1\u233d' '=\u2375})' ',\u2375}'my excellent heading'</code></pre>"},{"location":"dyalog/Assignment/#strand-assignment","title":"Strand Assignment","text":"<p>Distributed assignment or strand assignment allows multiple names to be defined using a single assignment arrow <code>\u2190</code>.</p> <pre><code>      (max min avg)\u2190{(\u2308\u233f\u2375)(\u230a\u233f\u2375)((+\u233f\u00f7\u2262)\u2375)}3 1 4 1 5</code></pre> <p>Note</p> <p>Strand assignment does not require names to be parenthesised, but we strongly recommend it for clarity.</p> <p>We can assign items in <code>nest</code> to the three variables <code>s\u2190'A'</code> <code>v\u21901 2 3</code> and <code>m\u21903 3\u2374\u23739</code> using a single assignment arrow.</p> <pre><code>      nest\u2190('A'(1 2 3))(3 3\u2374\u23739)\n      ((s v) m)\u2190nest</code></pre> <p>Warning</p> <p>You might have some issues when using inline, modified or strand assignment in dfns. This is by design, but can be a source of confusion. <pre><code>      {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a}\u236c\n3\n      a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a\n6</code></pre> </p> <p>You can get around these problems by writing <code>\u2218\u22a2</code> (or in 12.1: <code>\u2218{\u2375}</code> ) to the immediate right of any function involved: <pre><code>      {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u2218{\u2375}\u21903 \u22c4 a}\u236c\n6</code></pre></p>"},{"location":"dyalog/Code/","title":"Importing, Exporting and Distributing Code","text":"<p>We have already learned the basics of saving and loading workspaces. Here we address some more specific things like how to use other people's code, how to let other people use your code, and how to distribute your application to end users.</p>"},{"location":"dyalog/Code/#installed-libraries","title":"Installed Libraries","text":"<p>Dyalog installations come with a suite of libraries with pre-written code utilities and examples.</p> <p>Find which ones are available to you now with <code>)lib</code>. </p> <p>There is also a code libraries reference guide in the documentation.</p> <p>You can copy code into the workspace in several ways:</p> <ul> <li> <p>Copy the entire library into the current namespace (use pcopy to ensure that existing names are not overwritten):</p> <p><code>)pcopy dfns</code></p> </li> <li> <p>Copy selected functions into the current namespace:     <pre><code>)copy dfns cal date days\ncal 2\u2191\u2395ts</code></pre></p> </li> <li> <p>Copy the entire library into a specific namespace:     <pre><code>'dfns'\u2395ns\u236c\ndfns.\u2395cy'dfns'</code></pre></p> </li> <li> <p>Copy the selected functions into a specific namespace:     <pre><code>'dfns'\u2395ns\u236c\n'cal' 'date' 'days'dfns.\u2395cy'dfns'</code></pre></p> </li> </ul> <p>Alongside APLcart, the dfns library (not to be confused with the dfns construct) contains a large number of useful functions for use cases ranging from number theory, graphs and tree data structures to games and graphics.</p>"},{"location":"dyalog/Code/#user-commands","title":"User Commands","text":"<p>Some of these, such as the <code>]box</code> one, have been mentioned already. Commands which begin with a right-square-bracket <code>]</code> are called User Commands. These are only used while interacting with the session, but you can customise them and create your own.</p> <p>Dyalog webinar: Creating and Managing your own User Commands</p> <p>Custom user commands are scripted classes or namespaces containing specific member functions <code>List</code>, <code>Run</code> and <code>Help</code>. They should be saved as plain text .dyalog, .apln or .aplc files and placed in the folder [HOME]/MyUCMDs where [HOME] is either /home/user on Unix-like systems or C:\\Users\\user\\Documents on Microsoft Windows.</p> <p>Some particularly useful in-built user commands for getting information about your workspace are mentioned in the section on workspaces.</p>"},{"location":"dyalog/Code/#creating-and-sharing-your-own-utilities","title":"Creating and sharing your own utilities","text":"<p>The user command system is designed for utilities to help during application development and debugging. It is not intended as a system for programmatic utilities. Due to its terse nature, APL vendors have not really established a full-fledged, public package management system like Python's pip or Node/JavaScript's npm. Usually, the source code is distributed either in code files, workspaces or in text files and copied wholesale into other code bases.</p> <p>However, you might find or develop utility functions which you use frequently and that you copy into code bases frequently. In this case, you might like to make such utilities easy to access. One option is to define the function as a member of a custom namespace within the session namespace <code>\u2395SE</code>.</p> <p>Here is an example of using this technique so that you don't have to write such a long function reference to use <code>repObj</code>.</p> <pre><code>      'X'\u2395SE.\u2395NS\u236c\n      \u2395SE.X.rep\u2190\u2395SE.Dyalog.Utils.repObj</code></pre> <p>Once your custom name (function, variable etc.) has been defined within \u2395SE, save the session file. In the Microsoft Windows IDE, go to Session \u2192 Save to overwrite the default session file. In general, the expression for saving the session file is </p> <pre><code>{2\u2395NQ\u2395SE'FileWrite'\u22a3\u2395SE\u2395WS'File'\u2375}</code></pre> <p>which can also be found on APLcart.</p> <p>Of course, you might instead define <code>rep</code> in the root namespace when starting an exploratory coding session, for convenience.</p> <p>Warning</p> <p>Remember that others running your code base might not have comparable environments to that in which which you developed the code. Best practice is to ensure that all necessary code and data is contained locally within your application. </p> <p>Your organisation might also have rules relating to the types and locations of custom items that prevent you from using such techniques.</p>"},{"location":"dyalog/Code/#code-in-component-files","title":"Code in component files","text":"<p>The object representation <code>\u2395OR</code> of an APL function or operator can be used to store code in component files. These can then be fixed (defined) with <code>\u2395FX</code> upon loading.</p>"},{"location":"dyalog/Code/#source-code-in-text-files","title":"Source code in text files","text":"<p>Until recently, while it was possible to print source code as text for use in articles and tutorials, generally code was distributed in binary workspaces. The exact format and file extension varies between APL implementations, but for Dyalog these are .dws files.</p> <p>Nowadays, Unicode has enabled the widespread ability to represent characters other than just ASCII. Source code management systems, such as Git and SVN, have encouraged the use of Unicode text files as source code representation.</p> <p>Dyalog provides mechanisms for importing text source into the active workspace, and vice versa, including the ability to associate text files with names in the workspace such that changing one will affect the other.</p>"},{"location":"dyalog/Code/#salt","title":"SALT","text":"<p>The Simple APL Library Toolkit allows you to store APL source code as text files with the extension .dyalog</p> <pre><code>      Foo\u2190{3\u00d7\u2375}\n      ]save Foo /tmp/Foo\n\\tmp\\Foo.dyalog\n\n      ]load /tmp/Foo\nFoo</code></pre> <p>If the full file path is not specified, SALT will look in a configurable collection of folders on the file system for Dyalog source files. The source folders can be viewed and configured in Options \u2192 Configure \u2192 SALT.</p> <p>Read Chapter R of Mastering Dyalog APL and the SALT User Guide.</p>"},{"location":"dyalog/Code/#fx","title":"\u2395FX","text":"<p>The <code>\u2395FX</code> system function can be used to define functions or operators from various forms of source code.</p>"},{"location":"dyalog/Code/#fix","title":"\u2395FIX","text":"<p>The <code>\u2395FIX</code> system function can be used to define various APL items (functions, operators, namespaces etc.) from scripts.</p> <p>If <code>2\u2395FIX</code> is used and changes are made to the APL name using the Dyalog editor, the system will give you the option to save those changes to the text source file at the same time. </p> <p>If changes are made to the text file outside of Dyalog, using a standard text editor, then opening that name for editing within Dyalog will give the option to update the code in the active workspace using the modified external source.</p> <p>Using HttpCommand together with <code>\u2395FIX</code> is a way to import code from the internet.</p>"},{"location":"dyalog/Code/#link","title":"Link","text":"<p>For newer applications, we encourage you to try using the Link system which supersedes SALT and associates namespaces in the active workspace with folders in the file system. Using Link, you do not have to remember to <code>)SAVE</code> your workspace, changes in the workspace are automatically reflected on the file system.</p>"},{"location":"dyalog/Code/#cmd-sh","title":"\u2395CMD \u2395SH","text":"<p>These two functions are used to run command prompt commands (Microsoft Windows) and shell commands (Linux/macOS). For example, try <code>\u2395CMD'whoami'</code>.</p> <p>Warning</p> <p>You should take caution when using <code>\u2395SH</code>, as a non-zero exit code from the command line can cause a <code>DOMAIN ERROR</code> and the system error code to be lost. <pre><code>      \u2395\u2190r\u2190\u2395SH'exit 3'\nDOMAIN ERROR: Command interpreter returned failure code 3\n      \u2395\u2190r\u2190\u2395SH'exit 3'\n          \u2227\n      r\nVALUE ERROR: Undefined name: r\n      r\n      \u2227</code></pre> See the documentation for \u2395SH for more information.</p> <p>While these are quick-and-easy functions to use for those familiar with the command lines on particular operating systems, on some systems they can be slower than the more integrated alternatives. For example, reading a file using <code>\u2395SH</code> can be significantly slower than using <code>\u2395N...</code> system functions on some machines.</p> <p>Checking if a file exists: <pre><code>      \u234e\u2283\u2395SH'if test -f /tmp/text; then echo 1; else echo 0; fi'\n1\n      \u2395NEXISTS'/tmp/text'\n1</code></pre></p> <p>Reading a text file:</p> <pre><code>      \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8\u2395sh'cat /etc/passwd'\n44 7\n      \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8(\u2395ucs 10 13)((~\u220a\u2368)\u2286\u22a2)\u2283\u2395nget'/etc/passwd'\n44 7\n      \u2374\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd'\n44 7</code></pre> <p>Listing the contents of a directory: <pre><code>      \u2374\u2191\u2395sh'ls -l /tmp'\n14 127\n      \u2374\u2191\u22830\u2395NINFO\u23601\u22a2'/tmp/*'\n19 85</code></pre></p> <p>Searching within a file:</p> <pre><code>      \u2191':'(\u2260\u2286\u22a2)\u00a8\u2395SH'awk -F'';'' ''$1 ~ /games/ { print $0 }'' /etc/passwd'\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      {\u2375\u2337\u2368\u2282\u2378'games'\u2218\u2261\u00a8\u2375[;1]}\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd'\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre>"},{"location":"dyalog/Data/","title":"Data Input/Output","text":"<p>Although we have <code>\u2395IO</code>, \"IO\" in APL can still refer to input/output.</p>"},{"location":"dyalog/Data/#hello-world","title":"Hello, World!","text":"<p>If you have seen any kind of computer programming before, you are probably aware of a famous program called \"Hello, World!\".</p> <p>Here it is in APL: <pre><code>      \u2395\u2190'Hello, World!'</code></pre></p> <p>If you have learned programming before, maybe it is strange to have gotten so far in an introductory tutorial without meeting the language's \"print\" function. </p> <p>Note</p> <p>By default, non-assignment expressions output results to the session log. We strongly recommend using <code>\u2395\u2190</code> when you deliberately intend for an expression to print to the session log. You are then able to search for print statements for easier debugging.</p>"},{"location":"dyalog/Data/#back-2-school-4-maths","title":"Back 2 School 4 Maths","text":"<p>The function <code>Test</code> will ask the user <code>n</code> single-digit arithmetic questions, and return the number of correct answers.</p> <pre><code>     \u2207 points\u2190Test n;answer;solution          \n[1]    points\u21900                               \n[2]    :While n&gt;0                             \n[3]        solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10\n[4]        answer\u2190\u2395                           \n[5]        points+\u2190answer\u2261solution            \n[6]        n-\u21901                               \n[7]    :EndWhile                              \n[8]    \u2395\u2190'You scored',points,'points'         \n     \u2207  \n\n      Test 3</code></pre> <p>Examine the <code>Test</code> function and try it out. Which line asks for user input?</p> <p>Note</p> <p>The <code>\u2207</code> del representation of the <code>Test</code> function above is the vector representation result of <code>\u2395VR'Test'</code> which can be directly input into the session. Copy the <code>Test</code> function above, paste it into the session and press Enter to define the <code>Test</code> function in your workspace.</p> <p>You will see that it is quite possible to cheat the <code>Test</code> function by entering the same expression that it asks. To be even more sly, simply move the text cursor with the up arrow to the printed problem statement and press <code>Enter</code>.</p> <p>To ameliorate this, we can verify and fix input with <code>\u2395VFI</code>. Also note the use of quote-quad <code>\u235e</code>. </p> <pre><code>     \u2207 points\u2190Test2 n;answer;input;solution;valid\n[1]    points\u21900                                  \n[2]    :While n&gt;0                                \n[3]        solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10   \n[4]        input\u2190\u235e                               \n[5]        (valid answer)\u2190\u2395VFI input             \n[6]        answer\u2190valid/answer                   \n[7]        points+\u2190answer\u2261,solution              \n[8]        n-\u21901                                  \n[9]    :EndWhile                                 \n[10]   \u2395\u2190'You scored',points,'points'            \n     \u2207  \n\n      Test2 3</code></pre> <p>In this case, \"fix\" means to define as an APL value in the workspace, as if it had been typed into the session.</p> <p>Verify and Fix Input <code>\u2395VFI</code> is used when you need to process numeric data from an external source, but it has arrived in a text format. This is very common when working with data from the internet or from files.</p> <p>You might be tempted to use the Execute function <code>\u234e\u2375</code> but this is very dangerous because it will execute any text as APL code.</p> More about <code>\u2395VFI</code> <p><code>(valid numbers) \u2190 \u2395VFI text</code></p> <p>The Boolean vector <code>valid</code> indicates the locations of elements in <code>numbers</code> which were converted from <code>text</code>.</p> <p>By default, any valid number representation - including engineering exponential notation <code>XeY</code> and complex numbers of the form <code>xJy</code> - surrounded by spaces is considered valid input. You may provide a list of separator characters as left argument. <pre><code>    \u2395VFI'7 4.3 1e3 3j4 5,300 ok'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 1 1 1 0 0\u25027 4.3 1000 3J4 0 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    ' ,'\u2395VFI'7 4.3 1e3 3j4 5,300 ok'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 1 1 1 1 1 0\u25027 4.3 1000 3J4 5 300 0\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p>"},{"location":"dyalog/Data/#convenient-text-input","title":"Convenient text input","text":"<p>Single quotes <code>'</code> in APL character arrays must be escaped by doubling. It can be sometimes easier to paste input by assigning <code>\u235e</code>: <pre><code>      text\u2190\u235e\nMy great string 'which has some quoted text' </code></pre></p> <p><pre><code>      ]Repr text</code></pre> <pre><code>'My great string ''which has some quoted text'' '</code></pre></p> <p>Note</p> <p>The user command <code>]Repr</code> can generate APL expressions which produce most arrays. In some sense, it is like an inverse to execute <code>\u234e</code>. There is also a utility function <code>\u2395SE.Dyalog.Utils.repObj</code> which can be used in code, but we do not recommend using it in applications; use the primitives to test the properties of arrays, as explained in the sections on error handling.</p>"},{"location":"dyalog/Data/#convenient-text-output","title":"Convenient text output","text":"<p>Once upon a time, APL was considered an incredible, revolutionary tool for scientists, artists and business people alike to be able to get work done using computers. In a time before spreadsheet software was so ubiquitous, APL terminals offered a way to quickly and easily process data, produce reports and format them for printing.</p> <p>Take a look at the Chapter F of Mastering Dyalog APL for how to use the formatting functionality of <code>\u2355</code> and <code>\u2395FMT</code>.</p> <ol> <li> <p>It is easy (but inefficient) to round numbers to a specific precision with dyadic format <code>\u2355</code>:</p> <p><pre><code>      \u2395\u2190rand\u2190?5\u23740\n0.2225024074 0.3282243862 0.314984696 0.9533625773 0.757200184\n      \u234e2\u2355rand\n0.22 0.33 0.31 0.95 0.76</code></pre></p> <ol> <li>Write a function equivalent to <code>{\u234e\u237a\u2355\u2375}</code> without using <code>\u234e</code> or <code>\u2355</code>.</li> <li>Why does <code>{\u234e\u237a\u2355\u2375}</code> fail for large values of <code>\u237a</code>?</li> </ol> </li> <li> <p>The following expression formats the current date as YY/MM/DD.  <pre><code>'I2,2(,ZI2)'\u2395FMT 1 3\u2374100|3\u2191\u2395TS</code></pre> Change the expression to produce YYYY-MM-DD.</p> </li> <li> <p>In Dyalog version 18.0, <code>1200\u2336</code> (twelve hundred eye beam) can convert date times into human readable formats according to some specification. For example:</p> <p><pre><code>      'Dddd Mmmm Doo YYYY'(1200\u2336)1\u2395dt\u22823\u2191\u2395ts\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Wednesday August 12th 2020\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>Write a function <code>DTFMT</code> to generate a similar output using a 3-element vector like <code>3\u2191\u2395TS</code>. That is,</p> <ul> <li>Full day name</li> <li>Full month name</li> <li>Ordinal day number (1st, 2nd 3rd, 4th etc.)</li> <li>Full year number</li> </ul> <p><pre><code>      DTFMT 2020 8 12\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Wednesday August 12th 2020\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> </li> </ol>"},{"location":"dyalog/Data/#native-files","title":"Native Files","text":"<p>The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files.</p>"},{"location":"dyalog/Data/#csv","title":"\u2395CSV","text":"<p>Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of <code>\u2395CSV</code>:</p> <ul> <li>Read data from and write data to files directly <pre><code>data \u2190 \u2395CSV '/path/to/file.csv'</code></pre></li> <li>Separate the header (first row) from the rest of the data <pre><code>(data header) \u2190 \u2395CSV '/path/to/file.csv' \u236c\u00a0\u236c\u00a01</code></pre></li> <li>Treat specific columns of input as numeric or text, depending on the options provided.     The <code>4</code> here indicates to convert numeric values if possible, else keep the value as text.     <pre><code>numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4</code></pre></li> <li>Use a separator other than commas, using the \"Separator\" variant option, for example using tabs (<code>\u2395UCS 9</code>) for Tab Separated Values (.tsv). <pre><code>tsv \u2190 \u2395CSV\u2360'Separator' (\u2395UCS 9)\u22a2'/path/to/file.csv'</code></pre></li> <li>Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. <pre><code>      path \u2190 '/path/to/file.csv'    \u235d The file path as simple character vector\n      ReadCSV10\u2190\u2395CSV\u2360'Records' 10   \u235d A function to read CSV 10 records at a time\n      tn\u2190path \u2395NTIE 0               \u235d Tie the file - this locks it from use by other applications\n      first10 \u2190 ReadCSV10 tn        \u235d Read the first 10 records (rows)\n      second10 \u2190 ReadCSV10 tn       \u235d Read the next 10\n      \u2262\u00a8first10 second10\n10 10\n      first10 second10\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u25021 \u2502JQZUK\u2502\u2502\u250211\u2502DECJM\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25022 \u2502ANPYW\u2502\u2502\u250212\u2502PXPGL\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25023 \u2502WYVSR\u2502\u2502\u250213\u2502SYSCN\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25024 \u2502ZOGOX\u2502\u2502\u250214\u2502EKDPS\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25025 \u2502CXKRS\u2502\u2502\u250215\u2502XCOHA\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25026 \u2502BFTYO\u2502\u2502\u250216\u2502RDAHR\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25027 \u2502VFLAS\u2502\u2502\u250217\u2502KPUTW\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25028 \u2502BAFYD\u2502\u2502\u250218\u2502TPDOD\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25029 \u2502XPEBP\u2502\u2502\u250219\u2502BGIVA\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u250210\u2502UVBFG\u2502\u2502\u250220\u2502IITSO\u2502\u2502\n\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2395NUNTIE tn                    \u235d Don't forget to untie the file after use!</code></pre></li> </ul>"},{"location":"dyalog/Data/#json","title":"\u2395JSON","text":"<p>JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. <code>\u2395JSON</code> converts between APL arrays, including namespaces and text vector representations of JSON.</p> <pre><code>      'ns'\u2395NS\u236c\n      ns.var\u21901 2 3\n      ns.char\u2190'abc'\n      \u2395JSON ns\n{\"char\":\"abc\",\"var\":[1,2,3]}</code></pre> <p>A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: <pre><code>      (\u2395JSON'{\"$name\": \"steve\", \"3var\": \"what\"}').\u2395nl-\u23739\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u23593var\u2502\u2359\u235936\u2359name\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces.</p> <pre><code>      'ns'\u2395NS\u236c\n      ns.fn\u2190{\u2375}\n      \u2395JSON ns\nDOMAIN ERROR: JSON export: item \"fn\" of the right argument cannot be \nconverted (\u2395IO=1)\n      \u2395JSON ns\n      \u2227</code></pre> <p>Recall the expression for an empty JSON object.</p> <p>Using <code>\u2395JSON</code>, we can also display error information in a human-readable format.</p>"},{"location":"dyalog/Data/#xml","title":"\u2395XML","text":"<p>XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to.</p>"},{"location":"dyalog/Data/#text-files","title":"Text Files","text":"<p>Generally the <code>\u2395N...</code> family of system functions are for reading and writing native files as described in the documentation. <code>\u2395NGET</code> and <code>\u2395NPUT</code> are useful for reading and writing text files without having to tie and untie them.</p> <pre><code>      (\u2282words)\u2395NPUT'data/words.txt'                      \u235d Write words to a unicode text file\n      (content encoding newline)\u2190\u2395NGET'data/words.txt'   \u235d Read words from a unicode text file\n      words\u2190(\u2395UCS newline)((~\u220a\u2368)\u2286\u22a2)content               \u235d Split words on each new line </code></pre>"},{"location":"dyalog/Data/#n","title":"\u2395N...","text":"<p>This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation.</p> <p>In the chapter on selecting from arrays there was an example of reading a text file using <code>\u2395NGET</code>. Before Dyalog version 15.0, reading text files required a couple of extra steps. Some <code>\u2395N...</code> native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt, read the data and store it in a variable, and finally untie the file.</p> <p>Note</p> <p>For multi-user systems, take care to set appropriate file access permissions when using <code>\u2395NCREATE</code>, <code>\u2395NTIE</code> and <code>\u2395NLOCK</code>.</p> <pre><code>      tn\u2190'assets/words.txt'\u2395NTIE 0\n      \u2395\u219010\u2191words\u2190(\u2395UCS 10)(\u2260\u2286\u22a2)\u2395NREAD tn 82(\u2395NSIZE tn)0\n\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502A\u2502A's\u2502AA's\u2502AB's\u2502ABM's\u2502AC's\u2502ACTH's\u2502AI's\u2502AIDS's\u2502AM's\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n      \u2395NUNTIE\u2395NNUMS</code></pre>"},{"location":"dyalog/Data/#map","title":"\u2395MAP","text":"<p>The memory mapping function <code>\u2395MAP</code> associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for <code>\u2395CSV</code>). Another approach is to use <code>\u2395MAP</code>.</p>"},{"location":"dyalog/Data/#component-files","title":"Component files","text":"<p>If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files.</p> <p>Here we will briefly look at the basic usage of component files. A full treatment of component files is provided in Chapter N of Mastering Dyalog APL and more information can be found in the component file documentation.</p> <p>System functions that deal with component files begin <code>\u2395F...</code>.</p>"},{"location":"dyalog/Data/#tie-and-untie","title":"Tie and untie","text":"<p>In Dyalog, component files have the extension .dcf (Dyalog Component File) and must be tied and untied.</p> <p>A component file may be exclusively tied (<code>\u2395FTIE</code>) or have a shared tie (<code>\u2395FSTIE</code>). With an exclusive tie, no other process may access the file.</p> <pre><code>      tn\u2190'cfile'\u2395FCREATE 0   \u235d The file is exclusively tied\n      \u2395FUNTIE tn             \u235d The file is untied, it can now be used by other applications and processes</code></pre> <p>The next time we want to use this file, we can use <code>\u2395FTIE</code> instead of <code>\u2395FCREATE</code>. The right argument to these functions specifies a tie number (which can be different each time the file is tied), but with a right argument of <code>0</code> the next available tie number is used (component file tie numbers start at 1).</p> <pre><code>      tn\u2190'cfile'\u2395FTIE 0   \u235d The file on disk is cfile.dcf, but this extension is assumed if not specified </code></pre> <p>The structure of a component file is analogous to a nested vector of arrays. We add new values by appending them to the end of a file.</p> <pre><code>      (3 3\u2374\u23739)\u2395FAPPEND tn\n      (\u2191'Dave' 'Sam' 'Ellie' 'Saif')\u2395FAPPEND tn\n      nested\u21902 2\u2374'this' 0 'that' (1 2 3)\n      nested \u2395FAPPEND tn</code></pre> <p>Each array stored in a component file (a component) is referred to by its index in the file (its component number), starting from 1 (not affected by <code>\u2395IO</code>).</p> <pre><code>      \u2395FREAD\u00a8tn,\u00a81 2 3\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u2502Dave \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u25024 5 6\u2502Sam  \u2502\u2502this\u25020    \u2502\u2502\n\u25027 8 9\u2502Ellie\u2502\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502     \u2502Saif \u2502\u2502that\u25021 2 3\u2502\u2502\n\u2502     \u2502     \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre> <p>A component can be replaced by any other array. <pre><code>      'Hello'\u2395FREPLACE tn 2\n      \u2395FREAD tn 2\nHello</code></pre></p> <p>Use <code>\u2395FSIZE</code> to find the range of components and file size: <pre><code>      \u2395FSIZE tn\n1 4 1744 1.8446744073709552E19</code></pre></p> <p>The elements of <code>\u2395FSIZE</code> are:</p> <ul> <li><code>[1]</code> The number of the first component</li> <li><code>[2]</code> 1 + the number of the last component (that is, where a new component will be if <code>\u2395FAPPEND</code> is used)</li> <li><code>[3]</code> The current size of the file in bytes</li> <li><code>[4]</code> The file size limit in bytes</li> </ul> <p>Components can be removed from the beginning or end of a component file, with the <code>\u2395FDROP</code> function analogous to <code>\u237a\u2193\u2375</code>.</p> <pre><code>      \u2395FDROP tn  1\n      \u2395FDROP tn \u00af1\n      \u2395FREAD\u00a8tn,\u00a81 2 3\nFILE INDEX ERROR: cfile.dcf: No such component\n      \u2395FREAD\u00a8tn,\u00a81 2 3\n      \u2227\n      \u2395FREAD tn 2   \u235d Only component number 2 remains\nDave \nSam  \nEllie\nSaif </code></pre> <p>After use, don't forget to untie all tied component files using <code>\u2395FUNTIE \u2395FNUMS</code>.</p>"},{"location":"dyalog/Data/#multi-user-access","title":"Multi-user access","text":"<p>If you are working on a system through which multiple users need to access the same component files, it is important to become familiar with multi-user access techniques and potential pitfalls. In particular, you will need to use <code>\u2395FSTIE</code>, <code>\u2395FHOLD</code>, <code>\u2395FSTACK</code> and probably <code>\u2395AN</code>.</p> <ul> <li>Chapter N of Mastering Dyalog APL</li> <li>Online documentation: Controlling multi-user access</li> </ul> <p>Multi-user access can mean manual access by actual human users, or automated access by separate computers or processes.</p>"},{"location":"dyalog/Data/#downloading-data-from-the-internet","title":"Downloading data from the internet","text":"<p>The HttpCommand class is built on top of the Conga framework for TCP/IP communications. At the most basic level, it can be used to perform HTTP requests to retrieve data from servers. </p> <pre><code>      ]Get HttpCommand\n#.HttpCommand\n      \u2374(#.HttpCommand.Get 'https://google.com').Data\n14107</code></pre> <p>Using <code>HttpCommand</code> with <code>\u2395FIX</code> is a way to download APL code from the internet.</p> <p>For more information, see the online documentation for HttpCommand. Alternatively, there is documentation within the comments of the code for the HttpCommand class; simply use <code>)ed HttpCommand</code> or press Shift+Enter with the text cursor on the name in the session.</p>"},{"location":"dyalog/Data/#problem-set-13","title":"Problem set 13","text":""},{"location":"dyalog/Data/#indian-summer","title":"Indian Summer","text":"<p>IndiaRainfall.csv is a file of comma separated values. It is adapted from IndiaRainfallSource.csv to remove incomplete records.</p> <p>The India Meteorological Department(IMD) has shared this dataset under Govt. Open Data License - India. It can be downloaded from the links above or from the Kaggle data science website.</p> <p>The data contains the total measured monthly rain fall in millimeters for <code>30</code> regions in India from the years <code>1915</code> to <code>2015</code> inclusive.</p> <ol> <li> <p>Load the data into the workspace</p> <p>By default, <code>\u2395CSV</code> will load all fields as text data:</p> <p><pre><code>      \u2395\u21903\u21911 2\u2193\u2395CSV'assets/IndiaRainfall.csv'</code></pre></p> <p>With the following parameters, <code>\u2395CSV</code> will try to interpret all fields as numeric, and fall back to text if that fails. It will also import the first line as a separate array:</p> <p><pre><code>      (raindata header)\u2190\u2395CSV'assets/IndiaRainfall.csv' \u236c 4 1\n      \u2395\u21903\u21910 2\u2193raindata</code></pre></p> <p>Bonus</p> <p>Try reading IndiaRainfallSource.csv and removing the missing records for yourself. When data sets contain a very small amount of missing data, sometimes it is appropriate to estimate those values in a process called imputation. Most of the time, it is best to just remove the sections containing missing records.</p> </li> <li> <p>What was the total rainfall in Punjab in 1995?</p> </li> <li>Which month in which region had the highest rainfall?</li> <li>Use a least squares linear fit to estimate the total rainfall in all 30 regions in 2018</li> <li> <p>Use a least squares linear fit to estimate the total rainfall in Punjab in 2018</p> Hint <p>No one would expect you to derive an expression for the least squares linear fit with little APL experience. If you have done it, kudos to you. The expression <code>Mv(\u22a2\u23391,\u2218\u236a\u22a3)Nv</code> from APLcart will compute coefficients of a least squares linear fit given a vector of X values <code>Mv</code> and a vector of Y values <code>Nv</code>.</p> </li> <li> <p>Inspect the data in IndiaRainfallSource.csv to see how close the true values were to your estimates. Were they within your standard error?</p> Hint <p>If the error <code>e</code> is a vector of the differences between Y values predicted by the linear fit and the actual Y values</p> \\[e_i=Y_i^{\\text{predicted}}-Y_i^{\\text{actual}}\\] <p>then an estimate for the variance is given by</p> \\[s^2=\\sum_{i=1}^n{{e_i^2}\\over{n-2}}\\] <p>where the standard deviation (standard error) is \\(s\\).</p> </li> </ol>"},{"location":"dyalog/Data/#markdown-sort","title":"MarkDown Sort","text":"<p>Write a program which reads in a markdown file, rearranges the sections by the alphabetical order of their headers, and writes the sorted file to a new file. For extra credit, include a method by which the user can decide whether to overwrite the existing file or provide the name or path to a new file. For example files, feel free to use any of the source files for these course materials.</p> <p>Fun facts If you are not very familiar with the workings of modern software, you might be surprised to see how accessible file types are. Many text editors might try to open a wide range of files by interpreting their data as text. In the audio editing program Audacity, native files can be inspected and manipulated as audio waveforms. These are a couple of techniques used in an art style called databending.</p>"},{"location":"dyalog/Help/","title":"Getting Help","text":"<p>Following this course should give you at least an overview of all of the aspects of Dyalog which are needed to solve problems and build applications. By the end, hopefully you'll start to feel comfortable solving problems, reading and writing APL, and at least have an idea of where to look when you need to do some systems programming or interfacing with the outside world.</p> <p>To that end, here is a list of some of the resources available to you if you ever get stuck.</p>"},{"location":"dyalog/Help/#what-does-this-thing-do","title":"What does this thing do?","text":"<p>If you need help with a particular primitive or quad-name, the Dyalog online help can answer what does this do?-style questions. Press <code>F1</code> in the session while highlighting a construct to go to its help page.</p> <p><pre><code>      \u2363              \u235d Primitives\n      \u2395THIS          \u235d Quad-names\n      HTMLRenderer   \u235d Some keywords related to specific objects</code></pre> Many of the keywords which have documentation pages are the names of GUI objects.</p> <p>It is also possible to set a custom URL to use for queries when the interpreter doesn't recognise something. In the IDE for Microsoft Windows, go to Options \u2192 Configure \u2192 Help/DMX. Tick \"Use online help for non-Dyalog topics\" and set the custom URL of your choice. For example, you can try using <code>https://aplcart.info/?q=%s</code>, so that F1 brings up the aplcart website search for that term.</p> <p>In the RIDE, F1 opens a browser window to the Dyalog online documentation.</p> <p>The online help is a subset of the full materials available from the Documentation Centre.</p> <p>Version Information</p> <p>Documentation for previously released versions of Dyalog is still available online.  </p> <ul> <li>Full documentation for Dyalog version 12.1</li> <li>Online help system for 12.1</li> <li>Full documentation for Dyalog version 17.1.</li> <li>Online help system for 17.1</li> </ul>"},{"location":"dyalog/Help/#how-do-i-do-this","title":"How do I do this?","text":"<p>This is a much more difficult thing to overcome. Sometimes you have an idea of what you want to achieve, but you either aren't sure what constructs are available to help you achieve it, or you aren't sure that the solution you've come up with is the best way to go about it.</p> <p>If you need help with how to do something, try searching in APLcart, the searchable library of idiomatic expressions.</p>"},{"location":"dyalog/Help/#has-this-been-done","title":"Has this been done?","text":"<p>We strongly recommend that you spend some time on a regular basis reading and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements. Some of these are listed on the further reading page.</p>"},{"location":"dyalog/Help/#talk-to-humans","title":"Talk to humans","text":"<ul> <li>If you cannot find a solution on APLcart, please ask on Stack Overflow. There are a number of keen APLers who monitor this site and will eagerly answer any questions asked there.</li> <li>Introduce yourself in the APL Orchard Stack Exchange chat room, where you can usually get same-day replies to your queries. To get permission to post messages, see apl.wiki/APL_Orchard#Access.</li> <li>As well as Stack Overflow, the Dyalog forums are full of interesting discussions and are quite active.</li> <li>The APL Wiki has hundreds of articles about both the history of APL, as well as specific language features and usage examples.</li> </ul>"},{"location":"dyalog/Interfaces/","title":"External Interfaces","text":"<p>In an ideal world, we'd spend our entire lives blissfully in the warm comfort of the APL session. All of our data would magically appear and we would write perfect, beautiful algorithms to solve idealised problems.</p> <p>In the real world, we must interface with external systems. After all, the entire point of learning this tool is to use it to solve real world problems.</p>"},{"location":"dyalog/Interfaces/#name-association","title":"Name Association","text":"<p>Sufficiently knowledgeable programmers can interface directly between APL and a compiled library using <code>\u2395NA</code>. Input and output data types must be explicitly declared. For more information see the online documentation about \u2395NA.</p>"},{"location":"dyalog/Interfaces/#apl-as-a-shared-library","title":"APL as a Shared Library","text":"<p>It is also possible to bundle an APL application as a compiled native shared or static object (.dll, .dylib or .so) which exposes APL functions and makes them accessible via another programming language or application's foreign function interface. </p> <p>Examples of usage and links to documentation are available on github.com/Dyalog/NativeLib</p>"},{"location":"dyalog/Interfaces/#pynapl","title":"Py'n'APL","text":"<p>Start instances of Python from Dyalog, and start instances of Dyalog from Python. Leverage the convenience of Python's vast collection of libraries and combine it with the expressive power of APL. See github.com/Dyalog/pynapl for more information.</p>"},{"location":"dyalog/Interfaces/#rsconnect-and-rconnect","title":"RSConnect and RConnect","text":"<p>R is a very popular language with a large collection of statistical libraries. Two R interfaces exist for Dyalog:</p> <p>RSconnect R interface for Dyalog using Rserve</p> <p>RConnect R interface for Dyalog using rscproxy</p>"},{"location":"dyalog/Interfaces/#net","title":".NET","text":"<p>Microsoft's .NET Framework contains a plethora of useful libraries for business applications. </p> <p>To enable reference to .NET namespaces, set <code>\u2395USING</code>: <pre><code>      \u2395USING\u2190''\n      System.TimeZone.CurrentTimeZone.StandardName\nGMT Standard Time</code></pre></p> <p>Set the system variable <code>\u2395USING</code> in order to access names within .NET namespaces. <pre><code>      \u2395USING\u2190'System'\n      TimeZone.CurrentTimeZone.StandardName\nGMT Standard Time</code></pre></p> <p>In recent years, Microsoft have been developing a cross-platform equivalent called .NET Core (or .NET 5). This allows the same libraries to be used on Microsoft Windows, macOS and Linux. It must be installed separately and enabled by setting the configuration parameter <code>DYALOG_NETCORE=1</code>.</p>"},{"location":"dyalog/Interfaces/#comole","title":"COM/OLE","text":"<p>Dyalog is able to directly control certain Microsoft applications using the Component Object Model. For examples, see:</p> <ul> <li>Dyalog Webinar: APL and Microsoft Excel</li> <li>Document: Charting the APL/Excel waters</li> <li>Chapter 9 of the Dyalog for Microsoft Windows Interfaces Guide.</li> </ul>"},{"location":"dyalog/Interfaces/#null","title":"\u2395NULL","text":"<p>The core APL language does not have a \"null\" value as such. While you might think that the empty numeric vector <code>\u236c</code> could be considered a type of \"null\", it already has type information associated with it so it doesn't really work - it is more accurate to call it an empty numeric vector. In order to cooperate with the COM and .NET interfaces described above, Dyalog has a proper null value which can be invoked with <code>\u2395NULL</code>.</p>"},{"location":"dyalog/Interfaces/#conga-and-http","title":"Conga and HTTP","text":"<p>Conga is the core TCP/IP framework for Dyalog. On top of this, there are several higher level utilities for various web-based applications.</p> <p>HttpCommand can be used to issue requests to web servers and retrieve data.</p> <p>Jarvis is a very convenient way to expose APL functions as either a JSON or RESTful web service. It can even serve a simple static web interface and is the web service component of TryAPL.</p> <p>DUI (Dyalog User Interface) is a cross-platform GUI framework for building web-based front-ends in APL. It includes its own web server, so the same code can be used for a standalone desktop application, web app and website. There is an example site for its predecessor (identical in most ways, but without standalone desktop deployment) called MiServer.</p>"},{"location":"dyalog/Interpreter-internals/","title":"Interpreter Internals","text":"<p>Just some of the nitty-gritty under the covers.</p>"},{"location":"dyalog/Interpreter-internals/#storage","title":"Storage","text":"<p>Memory allocated to store an array needs space for:</p> <ul> <li>Each element of the array (which could be a reference to another array)</li> <li><code>8\u00d7\u2262\u2374array</code> bytes for the shape (<code>4\u00d7</code> in 32-bit)</li> <li>4 bytes for the type/rank</li> </ul> <p>For a reference, the object requires an 8-byte pointer, plus space for the contents of the object.</p>"},{"location":"dyalog/Interpreter-internals/#data-types","title":"Data types","text":"<p>Internally, Dyalog represents data with the following types. As a program runs, occasionally the interpreter will squeeze arrays into the smallest data type that can represent a particular figure, which helps keep memory usage low and may allow the interpreter to use vectorised instructions for certain operations on certain data types.</p>"},{"location":"dyalog/Interpreter-internals/#character","title":"Character","text":"<pre><code>      \u2395DR'APL'           \u235d 1-byte\n80\n      \u2395DR'\u914d\u5217'           \u235d 2-byte\n160\n      \u2395DR\u2395\u2190\u2395UCS 128077   \u235d 4-byte\n\ud83d\udc4d\n320</code></pre>"},{"location":"dyalog/Interpreter-internals/#number","title":"Number","text":"<pre><code>      \u2395DR 1 0 1 0 1 0   \u235d 1 bit\n11\n      \u2395DR 42            \u235d 1 byte\n83\n      \u2395DR 128           \u235d 2 byte\n163\n      \u2395DR 2*15          \u235d 4 byte\n323\n      \u2395DR 0J1           \u235d Complex (2\u00d78 byte double)\n1289</code></pre>"},{"location":"dyalog/Interpreter-internals/#floating-point-representation","title":"Floating-point representation","text":"<p>There are also 16-byte decimal floating point numbers available, but you need to enable them with <code>\u2395FR</code>.</p> <pre><code>      \u2395PP\u219034\n      \u25cb1\n3.141592653589793\n      \u2395FR\u2190645    \u235d 64-bit float (default)\n      \u25cb1\n3.141592653589793\n      \u2395FR\u21901287   \u235d 128-bit decimal\n      \u25cb1\n3.141592653589793238462643383279503</code></pre>"},{"location":"dyalog/Interpreter-internals/#comparison-tolerance","title":"Comparison tolerance","text":"<p>APL systems prefer to act like traditional arithmetic where possible. However, the base-2 (binary) representation used by computers is unable to represent certain decimal numbers precisely. Therefore, floating point arithmetic voids certain mathematical properties:</p> <p>\\({{1}\\over{3}} = 3 \\times {{5}\\over{9}} \\div 5\\)</p> <p><pre><code>      \u2395CT\u21901e\u00af14   \u235d Default comparison tolerance\n      (1\u00f73)=3\u00d7(5\u00f79)\u00f75</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      \u2395CT\u21900       \u235d No comparison tolerance\n      (1\u00f73)=3\u00d7(5\u00f79)\u00f75</code></pre> <pre><code>0</code></pre></p> <p><pre><code>      \u2395FR\u2190645 \u22c4 \u2395CT\u21901E\u00af14\n      {\u2191\u2375(1=1+10*-\u2375)}\u237316</code></pre> <pre><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n0 0 0 0 0 0 0 0 0  0  0  0  0  1  1  1</code></pre></p> <p><pre><code>      \u2395FR\u21901287 \u22c4 \u2395\u2190\u2395DCT</code></pre> <pre><code>1E\u00af28</code></pre></p> <p><pre><code>      {\u2191\u2375(1=1+10*-\u2375)}\u237330</code></pre> <pre><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1</code></pre></p> <p>For exact comparisons set <code>\u2395CT</code> to <code>0</code>, but beware:</p> <p><pre><code>      10=+/100\u23740.1</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      \u2395CT\u21900\n      10=+/100\u23740.1</code></pre> <pre><code>0</code></pre></p> <p><pre><code>      10-+/100\u23740.1</code></pre> <pre><code>1.953992523E\u00af14</code></pre></p>"},{"location":"dyalog/Interpreter-internals/#value-types","title":"Value types","text":"<p>If more than one name points to the same array value: <pre><code>      a\u2190b\u21901 2 3 4</code></pre> then there is a reference count internally, and only one copy of the data is stored in memory.</p> <p>If one of those arrays is modified: <pre><code>      b[2]\u219099</code></pre> then a copy of the data is taken at that point so that other arrays are unaffected: <pre><code>      a b\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3 4\u25021 99 3 4\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>For a nested array, however, the elements are separate. <pre><code>      a\u2190b\u2190(1 2 3)(4 5)</code></pre> if one of the elements is modified <pre><code>      b[\u22822 1]\u219099</code></pre> then the other elements remain shared between names. In this example, the <code>1 2 3</code> array remains shared.</p>"},{"location":"dyalog/Interpreter-internals/#reference-types","title":"Reference types","text":"<p>While APL arrays are pass-by-value, namespaces and other objects are pass-by-reference.</p> <pre><code>      nsref\u2190\u2395NS\u236c\n      jsonref\u2190\u2395JSON'{}'\n      \u2395FIX':Class myclass' ':Endclass'\n      \u2395DR\u00a8nsref jsonref myclass\n326 326 326</code></pre> <p>Although namespaces are pass-by-reference, the references themselves are still values: <pre><code>      (ns1 ns2)\u2190\u2395NS\u00a82\u2374\u2282\u236c\n      (ns1 ns2).var\u219042 99\n      a\u2190ns1\n      a.var\n42\n      a\u2190ns2\n      a.var\n99</code></pre></p>"},{"location":"dyalog/Interpreter-internals/#configuration-parameters","title":"Configuration parameters","text":"<p>Many aspects of the interpreter environment can be modified before runtime using configuration parameters. The values of configuration parameters are determined by a hierarchy of scope on the operating system. On Microsoft Windows, these are often registry settings at the base level. On Unix-like systems, they are environment variables.</p> <p>For example, we can set parameters on the command line in a batch file before starting Dyalog. We can even create custom parameters.</p> <p>Save the following as a .bat file and run it on Windows</p> <pre><code>@SET FOO=bar\n@START \"Dyalog\" \"C:\\Program Files\\Dyalog\\Dyalog APL-64 18.0 Unicode\\dyalog.exe\"</code></pre> <p>See the value of a configuration parameter with <code>\u2395NQ</code>:</p> <p><pre><code>      \u2395\u21902\u2395NQ'.' 'GetEnvironment' 'FOO'</code></pre> <pre><code>bar</code></pre></p> <p>You might find it useful to read the Dyalog for Microsoft Windows Installation and Configuration Guide and the Dyalog for UNIX Installation and Configuration Guide.</p> <p>Recent versions of Dyalog support universal configuration files which work across all supported platforms.</p>"},{"location":"dyalog/Interpreter-internals/#what-am-i-running","title":"What am I running?","text":"<p>Here are some useful code snippets for finding information about the currently running interpreter:</p> <p>What version of Dyalog am I running?</p> <pre><code>'#'\u2395WG'APLVersion'   \u235d '#' is '.' in older versions of Dyalog</code></pre> <p>For error reports, get the BuildID:</p> <pre><code>\u2395\u21902\u2395NQ'#' 'GetBuildID'</code></pre> <p>Am I a Unicode interpreter?</p> <pre><code>80=\u2395DR''</code></pre> <p>Am I big endian?</p> <pre><code>\u236c\u237483 \u2395DR 256</code></pre> <p>What is my word width?</p> <pre><code>32\u00d71+'4'\u220a\u2283#\u2395WG'APLVersion'   \u235d 64-bit has 64 in the platform name. Otherwise the interpreter is 32-bit.</code></pre>"},{"location":"dyalog/Interpreter-internals/#performance","title":"Performance","text":"<p>This course is intended to teach not only the symbols, syntax and system interactions of Dyalog APL, but also to try and teach you the APL way. This is a combination of array-oriented problem solving and ability to combine primitives to solve all manner of problems using computers.</p> <p>There are some inherent benefits to APL, such as the fact that exploring with APL can often lead you to optimal solutions to particular types of problems. Not only this, but the terseness makes it very easy to experiment and play with different approaches to the same problem.</p> <p>Besides APL itself, however, there are particular techniques, considerations, and special optimisations within the Dyalog interpreter that you should be aware of in case you find a performance bottleneck in your application and are wondering how to solve it.</p>"},{"location":"dyalog/Interpreter-internals/#flat-array-techniques","title":"Flat array techniques","text":"<p>Nested arrays are a very convenient construct and can be used to write incredibly elegant expressions for certain operations. For example:</p> <pre><code>      \u2262\u00a8\u2286\u23681 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1\n3 4 2 4 4</code></pre> <p>However, for long arguments this statement involves allocating many potentially disparate regions of memory and chasing pointers. Try to think of an approach which uses only flat arrays.</p> Answer <p>One solution from APLcart:</p> <p><pre><code>(0~\u2368\u00af1-2-/\u2218\u23781,1,\u2368~)</code></pre></p> <p>Of course, for certain arguments simply having more functions can be a performance penalty. Compare <code>]runtime</code> of the two expressions with <code>short\u21901=?10\u23742</code> and <code>long\u21901=?1e6\u23742</code></p>"},{"location":"dyalog/Interpreter-internals/#peppery-code","title":"Peppery code","text":"<p>One of the code smells in APL is large amounts of code to achieve something relatively simple. This is usually (but not always!) an indication that the problem can be thought of in a different way to achieve a more elegant and efficient solution.</p> <p>Another code smell is when a solution is littered with the each operator <code>F\u00a8</code> . These are explicit looping operations and often suggest that the code can be re-written to take advantage of the implicit iteration and potential parallelisation of the core primitives acting on flat arrays.</p> <p><pre><code>      arg\u2190?5 3\u237410\n\n      ]runtime -c \"{\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg\" \"{\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg\" \"{\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg\"</code></pre> <pre><code>\n  {\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg         \u2192 1.1E\u00af6 |   0% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395                \n  {\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg       \u2192 8.6E\u00af7 | -25% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395                      \n  {\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg \u2192 1.8E\u00af6 | +60% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 </code></pre></p>"},{"location":"dyalog/Interpreter-internals/#loop-sometimes","title":"Loop sometimes","text":"<p>Some types of algorithms really aren't amenable to parallelisation and array-oriented techniques. These are usually problems with heavy dependence on intermediate results. Sometimes they can be encoded in a custom scan or reduction, but the overall algorithm isn't able to take advantage of parallelisation that primitive scans and reductions can.</p> <p>Another consideration is that sometimes an elegant-looking solution in APL is quite inefficient. Take the prime number filter we saw early on:</p> <pre><code>Primes \u2190 {\u23782=+\u233f0=\u2218.|\u2368\u2373\u2375}</code></pre> <p>An alternative coding uses the multiplication table:</p> <pre><code>Primes \u2190 {i~\u2218.\u00d7\u2368i\u21901\u2193\u2373\u2375}</code></pre> <p>Of course, the outer product <code>\u2218.F</code> indicates that the number of calculations to compute both of these solutions increases with the square of the input size. We say they have a computational complexity \"of order n squared\" or \\(O(n^2)\\) in big-O notation. This is a very inefficient way to find prime numbers.</p> <p>To see discussions around more efficient ways to compute prime numbers in APL, see the dfns page on prime numbers.</p> <p>Put simply, the fastest algorithm in general is the one which performs the fewest computations. Sometimes there are solutions in APL which use a relatively large amount of memory but are fast in time due to optimised primitives. However, sometimes the domain of the problem grows so large that even these solutions are outperformed by a scalar looping solution. When this is the case, if performance is very important for this part of your application, it can be a good idea to search for pre-existing high performance solutions, or to write the solution in a lower level language, and use <code>\u2395NA</code> to integrate it with your APL code.</p> <ol> <li>Try to find an optimised expression which uses the rank operator <code>F\u2364k</code>.</li> <li>What is the computational complexity of a custom reduction <code>F/\u2375</code>?</li> <li>What is the computational complexity of a custom scan?</li> <li>How do custom scans and reductions compare with primitive scans and reductions for <code>+ - \u00d7 \u00f7</code>?</li> </ol>"},{"location":"dyalog/Interpreter-internals/#idioms","title":"Idioms","text":"<p>APL idioms are short expressions to perform certain tasks. APLcart is a comprehensive, searchable list of idioms. Some of these include slightly obscure but performant versions of particular tasks, especially those related to partitioned functions.</p> <p>In Dyalog APL, there are also \"idioms\" which are specially recognised phrases, or combinations of characters, which are treated as individual tokens and executed with special code, rather than parsed symbol-by-symbol and executed function-at-a-time. These offer significant performance improvements for particular tasks, and are all listed:</p> <ul> <li>latest</li> <li>17.1</li> <li>12.1</li> </ul>"},{"location":"dyalog/Interpreter-internals/#philosophical-tangent","title":"Philosophical tangent","text":"<p>In an ideal world, programmers could focus on writing purely the \"most readable\" or \"most maintainable\" versions of their code. Or, in some sense, simply write \"whatever feels right\" and the interpreter or compiler could analyse the program and determine the optimal. This is part of what compilers hope to achieve. However, even in one the strongest attempts at this so far, Julia, they emphasise that you still need to learn to write \"idiomatic Julia\" code. This means understanding how the language works both in terms of semantics and which constructs can be written in a particular way to lead to high performance.</p> <p>In Dyalog APL, one example of this is in the primitive operators.</p> <p>The key operator <code>F\u2338</code> applies its operand function <code>F</code> to grouped major cells of its argument array. An alternative approach is to have a function <code>{\u2282\u2375}\u2338</code> perform the grouping first and then to apply using each <code>F\u00a8{\u2282\u2375}\u2338</code> . The end result of the computation is the same, but by having an operator, the interpreter implementors can use especially efficient special code for certain operand functions.</p>"},{"location":"dyalog/Namespaces/","title":"Namespaces and other objects","text":"<p>If you are familiar with Object Oriented Programming (OOP) concepts and have experience using them from another language, then Dyalog's classes and namespaces should hopefully feel quite straightforward to you.</p> <p>There is a video  Namespaces in Dyalog APL with a basic introduction to the concepts and usage of namespaces.</p> <p>Two documents are also worth looking at, whether or not you are familiar with OOP:</p> <ul> <li>Object Oriented Programming for APL Programmers</li> <li>A Quick Introduction to Object Oriented Programming for Impatient APL Programmers</li> </ul> <p>If nested arrays are arrays inside arrays; namespaces are a bit like a workspace within a workspace. They are objects which contain collections of names, and these names can be listed as before, but using the dot <code>.</code> syntax from object-oriented programming.</p> <pre><code>      )ns ns         \u235d Create an empty namespace called ns\n      ns.var\u21901 2 3   \u235d Create a variable in ns called var\n      ns.fn\u2190{\u237a,\u2375}    \u235d Create a function in ns called fn\n      \u2395nl-9          \u235d List the names of objects in the current namespace\n\u250c\u2500\u2500\u2510\n\u2502ns\u2502\n\u2514\u2500\u2500\u2518\n      ns.\u2395nl-\u23739      \u235d List all names in ns\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502fn\u2502var\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      )cs ns         \u235d Change into ns\n      \u2395this.\u2395nl-\u23739   \u235d The current namespace is \u2395THIS\n\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502fn\u2502var\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n      #.\u2395nl-\u23739       \u235d The root namespace is #\n\u250c\u2500\u2500\u2510\n\u2502ns\u2502\n\u2514\u2500\u2500\u2518</code></pre>"},{"location":"dyalog/Namespaces/#mutable-objects","title":"Mutable objects","text":"<p>Variables are pass-by-value. This means that if one name is used to assign another name, changes to the first name are not reflected in the second name.</p> <pre><code>      var1\u21901 2 3\n      var2\u2190var1     \u235d The value of var1 is assigned to var2\n      var1\u2190var1+6   \u235d The value of var2 is changed\n      \u2395\u2190var2        \u235d var2 retains the previous value\n1 2 3</code></pre> <p>Namespaces are objects and are pass-by-reference. All names which are assigned a reference (or pointer) can be used to refer to the original object.</p> <pre><code>      )ns ns1\n#.ns1\n      ns1.name\u2190'Bob'\n      ns2\u2190ns1\n      ns2.name\u2190'Steve'\n      \u2395\u2190ns1.name\nSteve</code></pre> <p>Discussion</p> <ol> <li>Should there be a difference between <code>(\u2395NS\u236c)(\u2395NS\u236c)</code> and <code>(2\u2374\u2395NS\u236c)</code>?<ol> <li>With \"by value\" semantics?</li> <li>With \"by reference\" semantics?</li> </ol> </li> <li>What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster?<ul> <li>Using \"by value\" semantics?</li> <li>By reference: when they originate from the same call to <code>\u2395NS</code>?</li> </ul> </li> <li>Can you find a way to achieve \"by value\" semantics when using namespaces?</li> </ol> Discussion notes <ol> <li>Should there be a difference between <code>(\u2395NS\u236c)(\u2395NS\u236c)</code> and <code>(2\u2374\u2395NS\u236c)</code>?<ol> <li>No difference in this case, there are just empty namespaces: <code>(2\u2374\u2395NS\u236c)\u2261(\u2395NS\u236c)(\u2395NS\u236c)</code></li> <li>Yes. In <code>(\u2395NS\u236c)(\u2395NS\u236c)</code> we create two entities. In <code>(2\u2374\u2395NS\u236c)</code> we create only one.</li> </ol> </li> <li>What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster?<ol> <li>By value: when the two namespace have the exact same content. This is slow as it requires recursively inspecting each namespace for its contents and doing comparisons on every member.</li> <li>By reference: When the two namespaces originate from the same call to <code>\u2395NS</code>. This is fast as it requires only the comparison of two pointers.</li> </ol> </li> <li>Clone (or make a deep copy of) a namespace     <pre><code>      ns1\u2190\u2395NS\u236c\n      ns1.vec\u21901 2 3\n      ns3\u2190\u2395NS ns1\n      ns3.vec[2]\u219010   \u235d Only the new copy is changed\n      ]disp ns1.vec ns3.vec\n\u250c\u2192\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25027 8 9\u25027 10 9\u2502\n\u2514~\u2500\u2500\u2500\u2192\u2534~\u2500\u2500\u2500\u2500\u2192\u2518</code></pre></li> </ol>"},{"location":"dyalog/Namespaces/#dyadic-execute","title":"Dyadic execute <code>\u234e</code>","text":"<p>Namespaces can be used as a simple dictionary structure.</p> <pre><code>      value \u2190 dictionary.name   \u235d Get value\n      dictionary.name \u2190 value   \u235d Set value</code></pre> <p>But how do we do this when the name can vary? Use variables to store the name.</p> <p><pre><code>      ns\u2190\u2395NS\u236c\n      name\u2190'foo'\n\n      ns\u234ename,'\u21901 2 3'\n      10\u00d7ns.foo</code></pre> <pre><code>10 20 30</code></pre></p> <p>Warning</p> <p>Beware: <code>\u234e</code> is potentially dangerous:</p> <p><pre><code>      ns\u2190\u2395NS\u236c\n      name\u2190'\u2395OFF\u22c4'   \u235d !!!\n      value\u21901 2 3\n      ns {\u237a.{\u234e\u237a,'\u2190\u2375'}/\u2375} name value</code></pre></p> <p>In production, validate your arguments.</p>"},{"location":"dyalog/Namespaces/#modifying-namespaces","title":"Modifying namespaces","text":"<p>In some applications, it is useful to keep a namespace as an object that holds the state of something.</p> <p>It is reasonable in this case to write a tradfn that uses a namespace reference as both its argument and result. While tradfns can have the side effect of modifying a namespace, we strongly recommend that functions take arguments and return results anyway.</p> <pre><code>      \u2207 nsref \u2190 rate Modify nsref\n         nsref.var +\u2190 rate\n      \u2207 </code></pre>"},{"location":"dyalog/Namespaces/#code-organisation","title":"Code organisation","text":"<p>Having modular code organisation is a very sensible idea. However, it is a recent invention relative to APL. In a newer application, it is not hard to imagine a <code>utils</code> namespace, a <code>maths</code> namespace, an <code>interface</code> namespace and so on. In older applications, such compartmentalisation is often achieved using a naming convention. For example:</p> <pre><code>      \u2395NL 3\ndisplayINPUT\ndisplaySHOW \nmathsAVG    \nmathsDET    \nmathsSTDEV  \nutilLINES   \nutilSPLIT  </code></pre> <p>This type of code organisation is known as a flat workspace structure.</p>"},{"location":"dyalog/Namespaces/#names-and-references","title":"Names and references","text":"<p>In Dyalog there are both named and unnamed namespaces. Considering our use of the word \"name\" to refer to a token in the workspace, beginning with a letter, that refers to an array or function or operator, this is certainly a little confusing.</p> <p>When creating or modifying a namespace, we can assign the namespace to a name which is a namespace reference.</p> <pre><code>      nsref \u2190 \u2395NS\u236c\n      nsref.var \u2190 1 2 3\n      \u2395\u2190nsref</code></pre> <p>However, we can also use dyadic <code>\u2395NS</code> to give the namespace a name. This name also becomes the namespace's default display form. The default display form of an unnamed namespace is <code>[Namespace]</code>.</p> <p>If we assign a reference at the same time, we now have a two ways to refer to the namespace. However, notice that the namespace's name (shown by the display form) stays the same throughout as we are referring to the same namespace object.</p> <pre><code>      nsref \u2190 'nsname'\u2395NS\u236c   \u235d Assigning to the reference is optional\n      \u2395\u2190nsref \u22c4 \u2395\u2190nsname\n      nsref2 \u2190 nsname\n      \u2395\u2190nsref2</code></pre>"},{"location":"dyalog/Namespaces/#display-form","title":"Display form","text":"<p>The display form of an APL array is what is displayed when you execute an expression to display it: <pre><code>      x \u2190 1 2 3\n      x     \u235d The display form of x (depending on ]box settings)\n1 2 3\n      \u2395\u2190x   \u235d The display form of x (depending on ]box settings)\n1 2 3</code></pre></p> <p>Namespaces have a default display form. The display form can be altered with \u2395DF: <pre><code>      abc.\u2395DF '#.abc' \u22c4 abc\n#.abc\n      def.\u2395DF 'Hello' \u22c4 def\nHello\n      (abc def).\u2395DF \u2395NULL \u22c4 abc def  \u235d reset to default\n #.[Namespace]  #.def </code></pre></p>"},{"location":"dyalog/Namespaces/#scripted-namespaces","title":"Scripted namespaces","text":"<p>Store the source namespace as a single piece of text: <pre><code>      )ed \u235fns  \u235d equivalent to '\u235f'\u2395ED'ns'</code></pre> or <pre><code>      \u2395FIX  ':Namespace ns'  'var\u2190123'  ':EndNamespace'\n      ns.var\n123\n      \u2395SRC ns\n :Namespace ns  var\u2190123  :EndNamespace </code></pre></p> <p>Note</p> <p>Every time we \u201dfix\u201d, the namespace is reset per the script. This means that <code>ns.var\u2190456</code> would become <code>123</code> since the definition <code>var\u2190123</code> is found in the script.</p> <pre><code>\n      ns.var\u2190456\n      \u2395SRC ns\n :Namespace ns  var\u2190123  :EndNamespace \n      ns.var\n456\n      \u2395FIX \u2395SRC ns  \u235d similar to editing and fixing\n      ns.var\n123\n</code></pre> <p>The table below compares some methods for a namespace in the workspace versus a namespace script with text source.</p> Display Form Script Set:  <code>\u2375.\u2395DF</code> Set: <code>\u2395FIX source</code> Get:  <code>\u2355\u2375</code> Get: <code>\u2395SRC \u2375</code> Reset: <code>\u2375.\u2395DF \u2395NULL</code> Reset: <code>\u2395FIX \u2395SRC \u2375</code>"},{"location":"dyalog/Namespaces/#require","title":":Require","text":"<p>It is possible to have a script depend on other scripts. To do so, use the :require keyword.</p>"},{"location":"dyalog/Namespaces/#problem-set-9","title":"Problem set 9","text":"<ol> <li>Are namespaces created with <code>)NS</code> scripted or unscripted?</li> <li> <p>Use <code>\u2395FIX</code> to create an unnamed, scripted namespace  </p> <p>What happens if you try to edit this script using the Dyalog editor?</p> </li> <li> <p>Request handler</p> <ol> <li>Create a namespace called <code>req</code> containing<ul> <li>a variable <code>status</code> with the value <code>200</code></li> <li>a method <code>Method</code> which is the function <code>{4+2\u00d7\u2375}</code></li> </ul> </li> <li>Within the <code>req</code> namespace, apply <code>Method</code> to <code>status</code> and store the result in <code>status</code></li> </ol> </li> <li> <p>Write a function <code>Into</code> that copies a workspace into a namespace     <pre><code>      dfns\u2190\u2395NS\u236c\n      'dfns.dws' Into dfns\n      dfns.disp dfns.morse 'SOS'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502...\u2502---\u2502...\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p> Hint <p>See the documentation for <code>\u2395NS</code>.</p> </li> <li> <p>Write a function that swaps the values of two variables, the names of which are given as a 2-element nested vector of character vectors <code>\u237a</code>.     <pre><code>      ns\u2190\u2395NS\u236c\n      ns.(aa bb)\u219010 20\n      ns your_function 'aa' 'bb'\n      ns.(aa bb)\n20 10</code></pre></p> </li> <li> <p>Write an expression that swaps the values of the variables named <code>x</code> in the namespaces <code>ns1</code> and <code>ns2</code> .     <pre><code>      ns1\u2190\u2395NS\u236c \u22c4 ns2\u2190\u2395NS\u236c\n      ns1.x\u219010 \u22c4 ns2.x\u219020\n      ns1.y\u219030 \u22c4 ns2.y\u219040\n      your_expression\n      ns1.x ns1.y ns2.x ns2.y\n20 30 10 40</code></pre></p> </li> <li> <p>Write a function ScalarRef that returns a scalar Boolean value indicating whether its argument is a scalar namespace.     <pre><code>      ns\u2190\u2395NS\u236c \u22c4 ns.a\u219010\n      ]disp ScalarRef\u00a8 ns.a 'abc' (ns ns) ns (\u2395ns\u236c) 42\n0 0 0 1 1 0</code></pre></p> <p>Use one or more of these scalar namespace properties:</p> <ul> <li>Name Class (\u2395NC) is 9 (ref; non-scalar arrays and non-nss are 2)</li> <li>Data Representation (\u2395DR) is 326 (pointer)</li> <li>Depth (\u2261) is 0 (simple scalar)</li> <li>Allows dot syntax (ns.name)</li> </ul> </li> <li> <p>Write a function RefMask that returns an array of the same structure as its argument, but with bits indicating the namespace references.</p> <p><pre><code>      ]disp RefMask (\u2282\u2282\u2282\u22821 2 ns) 3 ns (2 2\u2374'abc',\u2395NS\u236c)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25020\u25021\u25020 0\u2502\n\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502 \u25020 1\u2502\n\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2502\u2502\u2502\u25020 0 1\u2502\u2502\u2502\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502 \u2502   \u2502\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p> </li> <li> <p>Write a function <code>Fetch</code> which takes namespace reference as left argument and a nested vector of character vector keys as right argument and returns the corresponding values from the namespace.</p> </li> <li> <p>Write a function <code>IsRoot</code> <pre><code>      FindRoot \u2395SE.Dyalog.Utils\n\u2395SE\n  FindRoot #\n#\n  FindRoot \u2395NS\u236c\n#</code></pre></p> </li> <li> <p>What are our roots?     Write a function FindRoots that takes an arbitrary array of namespaces and finds the root for each namespace.</p> <p><pre><code>      Line \u2395SE.Dyalog.Utils\n \u2395SE  \u2395SE.Dyalog  \u2395SE.Dyalog.Utils \n<p>Line \u2395SE.cbbot.bandsb2.sb.io\n \u2395SE  \u2395SE.cbbot  \u2395SE.cbbot.bandsb2  \u2395SE.cbbot.bandsb2.sb  \u2395SE.cbbot.bandsb2.sb.io</p>\n<li>\n<p>Where are my children?\n    Write a function that lists all the children of a given namespace.</p>\nHint\n<p>Note: <code>\u2395NL</code> is Name List, not Children List\nPlan: You'll have to crawl through the entire workspace\nThink: How could namespaces still be out of reach?</p>\n</li>"},{"location":"dyalog/Operators/","title":"Operators","text":""},{"location":"dyalog/Operators/#about","title":"About","text":"<p>Dyalog APL is not a functional programming language, but those familiar with functional languages will recognise APL's operators as higher-order functions. Operators in Dyalog can be:</p> <ul> <li>monadic (take a single left operand as in <code>F/</code>)</li> <li>dyadic (take a left and a right operand as in <code>F\u2364k</code>)</li> </ul> <p>but they cannot be ambivalent. However, the functions derived from operators can be monadic, dyadic or ambivalent in terms of arguments. </p> <p>Ambivalent dfns usually have a default left argument (<code>\u237a\u2190default</code>) and ambivalent tradfns test if their left argument exists (<code>0=\u2395NC'left_arg'</code>).</p>"},{"location":"dyalog/Operators/#primitive","title":"Primitive","text":"<p>We have already used a few primitive operators, but there is a complete summary of primitive operators in the online documentation.</p>"},{"location":"dyalog/Operators/#quick-guide","title":"Quick guide","text":"<p>For some commonly used operators</p> Operator Calling syntax Used for Reduce <code>F/</code> <code>F\u233f</code> Accumulation N-wise reduce <code>nF/</code> <code>nF\u233f</code> Windowed-reduction Scan <code>F\u2340</code> Accumulation with intermediate results Each <code>F\u00a8</code> Looping / element-wise application over non-simple scalars Rank <code>F\u2364k</code> Looping / pair-wise application over cells Power <code>F\u2363n</code> <code>F\u2363G</code> Iteration Key <code>F\u2338</code> Grouping"},{"location":"dyalog/Operators/#the-inner-product","title":"The Inner Product","text":"<p>Many people who have studied mathematics are familiar with one kind of inner product: matrix multiplication.</p> <pre><code>      (3 3\u23743 6 5 2)+.\u00d73 3\u23741 0 \u00af1</code></pre> <p>For two vectors:</p> <pre><code>      1 3 6((+/\u00d7)\u2261+.\u00d7)1 0 \u00af1</code></pre> <p>The generalisation to any two functions leads to some neat encodings:</p> <pre><code>      'abbcde'+.='cbccfe'     \u235d How many equal?\n      1 3 4 5 2+.&gt;0 3 3 6 3   \u235d How many greater than?</code></pre> <p>As a particularly interesting example, the transitive closure of a connectivity matrix shows which nodes can reach which other nodes in a graph.</p> <pre><code>      cm\u21905 5\u23741 0 0 1 0 0 0 0 0\n      (\u2228.\u2227\u2368\u2228\u22a2)\u2363\u2261cm</code></pre>"},{"location":"dyalog/Operators/#traditional","title":"Traditional","text":"<p>Just like their function counterparts, traditional operators or tradops have a definition syntax which reflects their calling syntax:</p> <p><pre><code>      \u2395VR'TradOp'\n     \u2207 {result}\u2190{left}(LF TradOp RF)right                   \n[1]   \u235d Dyadic operator which returns an ambivalent function\n[2]    :If 0=\u2395NC'left'                                      \n[3]        result\u2190LF RF right                               \n[4]    :Else                                                \n[5]        result\u2190LF left RF right                          \n[6]    :EndIf                                               \n     \u2207  </code></pre> <pre><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code></pre></p> <p><pre><code>      3 (\u00f7 TradOp +) 5     \u235d Shy results \n      \u2395\u21903 (\u00f7 TradOp +) 5   \u235d The result</code></pre> <pre><code>0.125</code></pre></p>"},{"location":"dyalog/Operators/#dop","title":"Dop","text":"<p>Dops can be named or anonymous. They are just like dfns, except <code>\u237a\u237a</code> refers to its left operand and, if dyadic, <code>\u2375\u2375</code> refers to its right operand. For recursion, double-del <code>\u2207\u2207</code> is used to refer to the operator itself (and therefore must be used with operands to become a function when called), whereas a single del <code>\u2207</code> is used to refer to the derived function.</p>"},{"location":"dyalog/Operators/#quirks-of-primitive-operators","title":"Quirks of primitive operators","text":""},{"location":"dyalog/Operators/#reduce-and-replicate","title":"Reduce and replicate","text":"<p>Reduce and replicate are both represented by forward-slash <code>/</code> (and forward-slash-bar <code>\u233f</code> for their first-axis equivalents). Operators bind tightly (see the binding table in the online documentation) to function operands, so a forward-slash in a function train will be interpreted as reduce. To force it to be the function replicate, use atop and right-tack.</p> <pre><code>(2\u2218|\u22a2\u2364/\u22a2)\u237310</code></pre> <p>Of course this is subjective, but sometimes even simple functions look nicer as dfns:</p> <pre><code>{\u2375\u233f\u23682|\u2375}\u237310</code></pre>"},{"location":"dyalog/Operators/#primitive-dyadic-operators","title":"Primitive dyadic operators","text":"<p>For no particular reason other than a technical limitation, dyadic primitive operators cannot be assigned to names. This is not a very useful thing to do in any case, but if you try this and find it does not work, just know that it is not supposed to work. </p> <p>If you must do this, the workaround is to wrap the operator in a simple dop. For example, <code>_Rank_\u2190{\u237a\u2190\u22a2 \u22c4 \u237a (\u237a\u237a\u2364\u2375\u2375) \u2375}</code>.</p>"},{"location":"dyalog/Operators/#problem-set-11","title":"Problem set 11","text":""},{"location":"dyalog/Operators/#filter","title":"Filter","text":"<p>The <code>_Filter</code> operator returns only scalars of <code>\u2375</code> which satisfy a predicate <code>\u237a\u237a</code>. That is, <code>\u2375</code> is part of the result where <code>1=\u237a\u237a \u2375</code>. Write the <code>_Filter</code> operator as a dop.</p> <pre><code>      2\u2218|_Filter \u237320              \u235d Odd numbers\n1 3 5 7 9 11 13 15 17 19\n      {(\u22a2=\u230a)0.5*\u2368\u2375}_Filter \u2373100   \u235d Square numbers\n1 4 9 16 25 36 49 64 81 100</code></pre>"},{"location":"dyalog/Operators/#apply","title":"Apply","text":"<p>The <code>_Apply_</code> operator will return its argument array <code>\u2375</code>, but with its right operand function <code>\u2375\u2375</code> applied to elements for which <code>1=\u237a\u237a \u2375</code>. </p> <pre><code>      3+_Apply_ 2\u2218|\u22a2\u237310\n1 5 3 4 5 6 7 8 9 10</code></pre> <ol> <li> <ol> <li>Which primitive operator behaves like this?</li> <li>What can that primitive operator do which is missing from the description of <code>_Apply_</code>?</li> </ol> </li> <li>Implement a simple version of <code>_Apply_</code> without using that primitive operator.</li> </ol>"},{"location":"dyalog/Operators/#numerical-integration","title":"Numerical integration","text":"<p>This problem is from Phase 2 of the 2019 APL Problem Solving Competition.</p> <p>The definite integral of a real valued function can be interpreted as the area under its graph over some interval (unless the function is negative or the endpoints are flipped but let's not get into that).</p> <p>              The same integral (left) approximated using the trapezoid rule (middle) and Simpson's rule (right). Red is overestimate and purple is underestimate.          </p> <p>Contrary to what introductory courses in calculus might lead you to believe, symbolic integration is not in general feasible. The function you want to integrate might not have an antiderivative in closed form (expressed in terms of \u201cstandard\u201d mathematical functions; and even if it does, it might be too hard to find), or the function itself might not be given in closed form, but rather as the result of some measurement, simulation, or something similar. In such cases, numerical methods must be employed. There are several such methods, three of which we will implement in this problem set as APL user-defined operators.</p>"},{"location":"dyalog/Operators/#trapezoid-rule","title":"Trapezoid Rule","text":"<p>In the trapezoid rule, the integral of a function \\(f\\) over an interval \\([a,b]\\) is estimated by dividing \\([a,b]\\) into \\(n\\) sub-intervals of size \\(\\Delta x=(b-a)/n\\), and approximating \\(f\\) by a straight line within each (see the figure above). This means that \\(f\\) only needs to be evaluated in the \\(n+1\\) points \\({x_i}=a+i\\Delta x\\). Putting it all together we get:</p> <p>\\({T_n}={{\\Delta x}\\over{2}}(f(x_0)+2f(x_1)+2f(x_2)+\\cdots+2f(x_{n-1})+f(x_n))\\)</p> <p>Write an APL operator, <code>_Trapezoid</code>, that:</p> <ul> <li>takes a left operand which is a scalar function.</li> <li>takes a positive integer left argument which is the number of subintervals.</li> <li>takes a 2-element numeric vector right argument which represents an interval \\([a,b]\\) where \\(a&lt;b\\).</li> <li>returns \\(T_n\\) for the given function and interval.</li> </ul> <p>Example:</p> <pre><code>      1 \u235f_Trapezoid 1,*1\n0.8591409142\n\n      (\u23734) \u235f_Trapezoid \u00a8 \u22821,*1\n0.8591409142 0.9623362015 0.9829803154 0.9903650088</code></pre>"},{"location":"dyalog/Operators/#simpsons-rule","title":"Simpson's Rule","text":"<p>Using Simpson's rule the interval is similarly divided but, instead of approximating \\(f\\) by a straight line, the sub-intervals are paired up and \\(f\\) is approximated by a parabola (see the figure above). In general, this reduces the error but leads to the slightly more involved formula:</p> <p>\\(S_n = {{\\Delta x}\\over{3}} (f(x_0)+4f(x_1)+2f(x_2)+4f(x_3)+2f(x_4)+\\cdots+4f(x_{n-1})+f(x_n))\\)</p> <p>Write an operator, <code>_Simpson</code>, that:</p> <ul> <li>takes a left operand which is a scalar function</li> <li>takes an even, positive, integer left argument which is the number of sub-intervals.</li> <li>takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a&lt;b\\).</li> <li>returns \\(S_n\\) for the given function and interval.</li> </ul> <p>Example:</p> <pre><code>      2 \u235f_Simpson 1,*1\n0.9967346307\n\n      (2\u00d7\u23734) \u235f_Simpson\u00a8 \u22821,*1\n0.9967346307 0.9997079446 0.999936071 0.9999788955</code></pre>"},{"location":"dyalog/Operators/#rombergs-method","title":"Romberg's Method","text":"<p>This problem is significantly more difficult than the previous two. If you are not confident to try it straight away, feel free to skip it and come back later.</p> <p>Romberg's method generalizes the Trapezoid and Simpson's rules. As it turns out, given that \\(f\\) has enough continuous derivatives, by using Taylor's formula, the error of the Trapezoid rule can be expressed in terms of these. Then, using a technique known as Richardson extrapolation one can combine approximations using different numbers of subintervals to cancel out term after term of the error. Glossing over a ton of (really cool!) detail we can define the Romberg method using the following recurrence:</p> <p>\\({R^0_n}=T_{2^n}\\)</p> <p>\\({R^m_n}={1\\over{4^m-1}}(4^m R^{m-1}_n - R^{m-1}_{n-1})\\)</p> <p>Write an operator, <code>_Romberg</code>, that:</p> <ul> <li>takes a left operand which is a scalar function</li> <li>takes an integer left argument greater than or equal to \\(0\\) representing \\(n\\).</li> <li>takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a&lt;b\\).</li> <li>returns \\(R^n_n\\) for the given function and interval.</li> </ul> <p>Try to find a solution that performs no unnecessary computation. That is, \\(f\\) should be computed at most once in each point, and \\(R^m_n\\) should be computed at most once for each \\(m\\) and \\(n\\).</p> <p>Example:</p> <pre><code>      ( \u03041+\u23734)\u235fRomberg \u0308\u22821,*1 \u235d Recognize the first two values?\n0.8591409142 0.9967346307 0.9999061655 0.9999984001</code></pre>"},{"location":"dyalog/Operators/#when-in-rome","title":"When in Rome...","text":"<p>This problem is from the 2012 APL Problem Solving Competition.</p> <p>Roman numerals, as used today, are based on seven symbols:</p> Symbol Value I \\(1\\) V \\(5\\) X \\(10\\) L \\(50\\) C \\(100\\) D \\(500\\) M \\(1000\\) <p>Numbers are formed by combining symbols together and adding the values. For example, MMVI is \\(1000 + 1000 + 5 + 1 = 2006\\). Generally, symbols are placed in order of value, starting with the largest values. When smaller values precede larger values, the smaller values are subtracted from the larger values, and the result is added to the total. For example MCMXLIV is \\(1000 + (1000 \u2212 100) + (50 \u2212 10) + (5 \u2212 1) = 1944\\). There has never been a universally accepted set of rules for Roman numerals. Because of this lack of standardization, there may be multiple ways of representing the same number in Roman numerals. Despite the lack of standardization, an additional set of rules has been frequently applied for the last few hundred years.</p> <ul> <li>The symbols I, X, C and M can be repeated three times in succession, but no more, unless the third and fourth are separated by a smaller value, as in XXXIX. D, L and V can never be repeated.</li> <li>I can be subtracted from V and X only. X can be subtracted from L and C only. C can be subtracted from D and M only. V, L and D can never be subtracted.</li> <li>Only one small-value symbol may be subtracted from any large-value symbol.</li> <li>A number written in Arabic numerals can be broken into digits. For example, 1903 is composed of \\(1\\), \\(9\\), \\(0\\), and \\(3\\). To write the Roman numeral, each of the non-zero digits should be treated separately. In the above example, 1000=CM and \\(3\\) is III. Therefore, \\(1903\\) is MCMIII.</li> </ul> <p>Using this additional set of rules, there is only one possible Roman numeral for any given number. In addition, for this problem, we will add the following rules:</p> <ul> <li>\\(0\\) (zero) should be represented by an empty character vector</li> <li>Negative numbers should be preceded by an APL high minus (<code>\u00af</code>)</li> <li>Non-integers should be rounded up (0.5 and above rounds up)</li> <li>Larger numbers simply have a number of leading M's. For example, \\(5005\\) is represented as MMMMMV</li> </ul> <p>The <code>_Roman</code> Operator</p> <p>Write a monadic operator <code>_Roman</code> that takes a function left operand and derived a function which is able to do computation on Roman numerals.</p> <pre><code>      'III'+_Roman'II'\nV\n\n      \u2373_Roman'X'\n\u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2510\n\u2502I\u2502II\u2502III\u2502IV\u2502V\u2502VI\u2502VII\u2502VIII\u2502IX\u2502X\u2502\n\u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2518\n\n      +/_Roman\u2373_Roman'X'\nLV</code></pre> <p>Don't worry about \"mixed\" types. We don't expect this to work: <pre><code>      'II' 'III'\u2374_Roman\u23736</code></pre></p> <p>But the following should: <pre><code>      'II' 'III'\u2374_Roman\u2373_Roman'VI'\n\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502I \u2502II\u2502III\u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502IV\u2502V \u2502VI \u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p> <p>Use <code>]Display</code> to get the full description of the structure. Single Roman symbols are simple character scalars, whereas compound numbers are enclosed character vectors.</p> <pre><code>      ]Display 2 3\u2374_Roman\u2373_Roman'VI'\n\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2193      \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502\n\u2502 I    \u2502II\u2502 \u2502III\u2502 \u2502\n\u2502 -    \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u250c\u2192\u2500\u2510      \u250c\u2192\u2500\u2510  \u2502\n\u2502 \u2502IV\u2502 V    \u2502VI\u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2518 -    \u2514\u2500\u2500\u2518  \u2502\n\u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre>"},{"location":"dyalog/Operators/#under-over","title":"Under Over","text":"<p>The over operator <code>\u237a\u237a\u2365\u2375\u2375</code> was introduced in Dyalog in version 18.0. It can be thought of as applying the left operand function <code>\u237a\u237a</code> to arguments which have been pre-processed using the right operand function <code>\u2375\u2375</code>.</p> <p>Example:</p> <pre><code>      1 3 2 +_O_\u00d7 5 0 \u00af5                    \u235d Sum of signs\n      'some text'\u2261_O_ 0\u2218(819\u2336)'SOME TEXT'   \u235d Case-insensitive match</code></pre> <p>The under (or dual) operator <code>\u237a\u237a\u2362\u2375\u2375</code> has not been implemented in Dyalog. However, it can be partially modelled. It is the same as over <code>\u2365</code>, except that the inverse of <code>\u2375\u2375</code> is applied to the result.</p> <p>Write the operator <code>_U_</code> to model the behaviour of under.</p> <p>Example: <pre><code>      3 +_U_\u235f 5          \u235d Multiplication is addition under logarithm\n15\n      3 \u00d7_U_* 5          \u235d Plus is times under power\n8\n      'C'+_U_(\u2395A\u2218\u2373)'D'   \u235d 7=3+4\nG</code></pre></p> Hint <p>Use the power operator <code>F\u2363n</code> to derive an inverse function.</p>"},{"location":"dyalog/Operators/#key-without","title":"Key without <code>\u2338</code>","text":"<p>The key operator groups major cells of <code>\u2375</code> according to keys <code>\u237a</code>, where <code>\u237a\u2261\u2365\u2262\u2375</code>. When called monadically, the derived function using key will use <code>\u2375</code> itself as the keys. Write the operator <code>_Key</code> which works like <code>\u2338</code> but does not use the <code>\u2338</code> glyph.</p> <p>Example:</p> <p><pre><code>      {\u237a,\u2262\u2375}_Key 'mississippi'</code></pre> <pre><code>m 1\ni 4\ns 4\np 2</code></pre></p> <p><pre><code>      {\u237a(\u2262\u2375)}_Key 5 2\u23741 0 0</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2510\n\u25021 0\u25022\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25020 1\u25022\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2524\n\u25020 0\u25021\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2518</code></pre></p> <p><pre><code>      'aabcc'{\u2282\u2375}_Key 5 2\u23741 0 0</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 0\u25020 0\u25021 0\u2502\n\u25020 1\u2502   \u25020 1\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p>"},{"location":"dyalog/Quad%20names/","title":"Quad names","text":""},{"location":"dyalog/Quad%20names/#overview","title":"Overview","text":"<p>There is a vendor-agnostic article about quad-names on the APL Wiki. This page is an overview focusing on application development with Dyalog.</p> <p>See the Dyalog online documentation for:</p> <ul> <li>a complete list of categorised system functions with descriptions</li> <li>a complete list of system variables with descriptions</li> <li>a complete list of system functions and variables</li> </ul>"},{"location":"dyalog/Quad%20names/#system-variables","title":"System variables","text":"<p>The Dyalog online documentation has a complete list of system variables.</p> <p>System variables describe the state of the system. Some variables are static and cannot change. Some variables are dynamic and can change without direct user intervention. The others can be changed by the user.</p> \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL <p>Of course, the majority of the time you can refer to the help system to remind yourself exactly how each of these works. There are many system variables built up over the decades, many of which are kept mostly for backwards compatibility.</p> <p>In the following table, the system variables you are most likely to come across in existing code are highlighted in red.</p>      .sv{color: black;}     .svimp{color: red;}  \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL"},{"location":"dyalog/Quad%20names/#constant","title":"Constant","text":"<pre><code>      \u2395A        \u235d Upper-case alphabet\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n      \u2395D        \u235d Digits 0-9\n0123456789\n      \u2395AN       \u235d User's ID\ndyalog\n      \u2395NULL     \u235d NULL constant\n[Null]\n      \u2395TC       \u235d BackSpace, LineFeed, CarriageReturn \n\n\n\n      \u2395UCS\u2395TC   \u235d BackSpace, LineFeed, CarriageReturn \n8 10 13</code></pre>"},{"location":"dyalog/Quad%20names/#dynamic","title":"Dynamic","text":"<pre><code>\u2395AV     \u235d List of APL characters\n\u2395DM     \u235d Last error message\n\u2395DMX    \u235d \u2395DM+\u2395EN in a thread safe form\n\u2395EN     \u235d Last error number\n\u2395RTL    \u235d Response time limit\n\u2395SE     \u235d The session object\n\u2395TS     \u235d Current date/time\n\u2395THIS   \u235d Current object</code></pre>"},{"location":"dyalog/Quad%20names/#settable","title":"Settable","text":"<pre><code>\u2395AVU   characters to use in \u2395AV\n\u2395CT    Comparison Tolerance\n\u2395DCT   Decimal Comparison Tolerance\n\u2395DIV   how to handle division by 0\n\u2395FR    float decimal system in use\n\u2395IO    index origin\n\u2395ML    Migration Level \n\u2395LX    Latent eXpression\n\u2395PATH  where to find functions \n\u2395RL    random number generation seed value</code></pre>"},{"location":"dyalog/Quad%20names/#division-control","title":"Division control","text":"<pre><code>      \u2395DIV\u21900   \u235d Default\n      3\u00f70\nDOMAIN ERROR: Divide by zero\n      3\u00f70\n       \u2227\n      0\u00f70\n1\n      \u2395DIV\u21901\n      3\u00f70\n0\n      0\u00f70\n0</code></pre>"},{"location":"dyalog/Quad%20names/#print-precision","title":"Print Precision","text":"<p>The number of significant digits in the display of numeric output. <pre><code>      \u2395PP\u21903\n      \u00f7812\n0.00123\n\u2262'123'\n3\n      \u2395PP\u219017\n      \u00f7812\n0.0012315270935960591\n\u2262'12315270935960591'\n17</code></pre></p>"},{"location":"dyalog/Quad%20names/#print-width","title":"Print Width","text":"<p>The Print Width <code>\u2395PW</code> sets the number of characters in the session before wrapping to a new line.</p> <p>It can be assigned to directly, or set to automatically adjust based on the IDE windows size. In the Microsoft Windows IDE, go to Options\u2192Configure\u2192Session and tick Auto PW. In the RIDE, go to Edit\u2192Preferences\u2192General\u2192Session and tick Auto PW.</p>"},{"location":"dyalog/Quad%20names/#system-functions","title":"System functions","text":"<p>In this course, we try to introduce relevant quad-names in appropriate contexts. However, not every quad-name is shown in this tutorial.</p> <p>A complete collection of categorised system functions is available from the Dyalog online documentation.</p> <p>Further treatment of system functions is provided in Chapter L of Mastering Dyalog APL.</p>"},{"location":"dyalog/Quirks/","title":"Out in the wild","text":"<p>Much of what is presented in this course is what is called modern APL in that it contains extensions to the original mathematical notation. The term \"modern APL\" generally means APL implementations with some form of general nested arrays.  </p> <p>Dyalog maintains long-term backwards compatibility, meaning that code which ran on Dyalog version 1 can be run on the latest version with little or no modification. Therefore it is good to be aware of all of the language constructs, even if some of them have fallen out of fashion in newly-written code.</p>"},{"location":"dyalog/Quirks/#branch","title":"Branch","text":"<p>Despite long and widespread use in many programming languages, <code>:If :Else</code>-style control structures are a relatively recent introduction to some APLs. Early on, the only way to control the flow of execution in APL was to using the branching arrow <code>\u2192</code>.</p> <p><pre><code>   \u2192ln             \u235d Go to integer line number ln or label ln:\n   \u21920              \u235d Exit current function and resume calling line\n   \u2192\u2395LC            \u235d Resume suspended execution\n   \u2192               \u235d Clear one stack suspension\n   \u2192condition/ln   \u235d If condition is true (1), go to line ln, otherwise go to next line</code></pre> <pre><code></code></pre></p> <p><pre><code>    \u2207  r\u2190BFac n   \u235d Branching Factorial\n[1]   \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1}              \n[2]    \u2192(n=1)/4                        \n[3]    r\u2190n\u00d7BFac n-1 \u22c4 \u21920               \n[4]    r\u2190n                             \n    \u2207   </code></pre> <pre><code></code></pre></p> <p>Keeping track of line numbers in this way would be a hassle for large programs. The introduction of labels makes understanding code easier.</p> <pre><code>    \u2207  r\u2190BFacL n   \u235d Branching Factorial\n[1]                \u235d with Label         \n[2]   \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1}               \n[3]    \u2192(n=1)/end                       \n[4]    r\u2190n\u00d7BFac n-1 \u22c4 \u21920                \n[5]   end:r\u2190n                           \n    \u2207    </code></pre> <p>The use of <code>:GoTo</code> might be more suggestive to those unfamiliar with <code>\u2192</code>.</p> <pre><code>    \u2207  r\u2190BFacG n   \u235d Branching Factorial\n[1]                \u235d with GoTo          \n[2]   \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1}               \n[3]    :If n=1                          \n[4]        :GoTo end                    \n[5]    :EndIf                           \n[6]    r\u2190n\u00d7BFac n-1                     \n[7]    :Return                          \n[8]   end:r\u2190n                           \n    \u2207   </code></pre> <p>You might prefer to use conditional keywords to keep blocks of statements together in a predictable way.</p> <pre><code>    \u2207  r\u2190BFacI n   \u235d Branching Factorial\n[1]                \u235d with If            \n[2]   \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1}               \n[3]    :If n=1                          \n[4]        r\u2190n                          \n[5]    :Else                            \n[6]        r\u2190n\u00d7BFac n-1                 \n[7]    :EndIf                           \n    \u2207  </code></pre>"},{"location":"dyalog/Quirks/#the-axis-operator","title":"The axis operator","text":"<p>Before the rank operator was invented1, certain functions had comparable behaviour when used in conjunction with the axis operator. However, the axis operator is not a true operator: it is not general, does not fit the standard function-operator syntax and does not work with user-defined functions.</p> <p>However, there are some useful applications of the axis operator which are handy to know. Some can be replicated with combinations of both <code>\u2364</code> rank and <code>\u2349</code> transpose, for example.</p> <pre><code>      A\u21902 3 4\u2374\u2395A\n      ,[1 2]A   \u235d Merge first two axes      \n      ,[2 3]A   \u235d Merge last two axes      \n\n      (2 3\u2374\u23736),[1]2 3\u2374\u2395A   \u235d Catenate first axis\n      (2 3\u2374\u23736),2 3\u2374\u2395A      \u235d Catenate last axis\n\n      (2 3\u2374\u23736),[0.5]2 3\u2374\u2395A   \u235d Laminate before 1st axis\n      (2 3\u2374\u23736),[2.5]2 3\u2374\u2395A   \u235d Laminate after 2nd axis\n\n      \u2282[1 3]A   \u235d Enclose matrices along the first and third axes</code></pre> <p>As an exercise, try to reformulate the expressions above using only combinations of the operand functions enclose (<code>\u2282\u2375</code>), ravel (<code>,\u2375</code>) or catenate-first (<code>\u236a\u2375</code>); the rank operator (<code>F\u2364k</code>); and dyadic transpose (<code>\u237a\u2349\u2375</code>).</p> Answers <pre><code>  A\u21902 3 4\u2374\u2395A\n  \u2349,\u23642\u22a22 3 1\u2349A   \u235d Transpose and ravel matrices\n  ,\u23642\u22a2A          \u235d Ravel matrices\n\n  (2 3\u2374\u23736)\u236a2 3\u2374\u2395A       \u235d Catenate first axis\n  (2 3\u2374\u23736)(\u236a\u23641)2 3\u2374\u2395A   \u235d Catenate vectors\n\n  (2 3\u2374\u23736)(2 3 1\u2349,\u23640\u23641)2 3\u2374\u2395A   \u235d Laminate scalars within each pair of rows and transpose the result\n  (2 3\u2374\u23736)(,\u23640\u23641)2 3\u2374\u2395A         \u235d Laminate scalars within each pair of rows\n\n  \u2282\u23642\u22a23 1 2\u2349A   \u235d Enclose matrices after transpose\n</code></pre> <p>Knowledge of the axis operator is required for anyone maintaining code which uses it, and it should be used to retain style unless all uses are to be replaced systematically with the rank operator. In any case, some people feel it provides pleasant syntactic sugar over the equivalent expressions which use rank and transpose.</p>"},{"location":"dyalog/Quirks/#portable-defaults","title":"Portable defaults","text":"<p>All system functions and variables have default values. However, to guarantee that your code will run correctly when copied into other users' code bases, it is a good idea to set some of these values at the top level of the namespaces or functions which constitute the entry points of your application.</p> <p>It is common to see <code>(\u2395ML \u2395IO)\u21901</code> or similar at the top of production functions and scripted namespaces.</p>"},{"location":"dyalog/Quirks/#migration-level","title":"Migration level","text":"<p>The system variable <code>\u2395ML</code> (\"quad-em-ell\") specifies a \"migration level\" in order to allow code bases from other APL systems to work unmodified in Dyalog. In particular, some primitive symbols (like <code>\u2283</code> and <code>\u2191</code>) have different definitions depending on the migration level.</p> <p>By default, this is set to 1. </p>"},{"location":"dyalog/Quirks/#index-origin","title":"Index origin","text":"<p>Due to its origin as a notational tool for teaching, arrays are indexed starting from 1 by default. However, some users are accustomed or find it convenient for indexing to start from 0 instead. In this way, it can be considered an \"offset from the beginning of the array\" rather than an ordinal index.</p> <p>Dyalog provides a way to choose whether arrays are indexed starting from zero or one:</p> <pre><code>      'ABCD'[1]\nA\n      \u2395IO\u21900      \u235d Quad eye-oh gets zero\n      'ABCD'[1]\nB</code></pre> <p>APLers all agree that it would be better if there was only one option for <code>\u2395IO</code>, but none of them can agree on what it should be.</p> <p>The author is sure that saying \"the zero-th element\" is incorrect. The first element may be labelled 0, but it is still the first element.</p>"},{"location":"dyalog/Quirks/#caution-with-namespace-references","title":"Caution with namespace references","text":"<p>It is a good idea to organise code bases into namespaces which each serve a particular purpose. In this case, you will likely want to somehow access names in one namespace from calling functions in a different namespace. There are ways to do this, but they should all be used with caution. </p> <p><code>\u2395CS</code> is a system function to change the current namespace.</p> <p>You can set the local search path for names using <code>\u2395PATH</code>. For example, if you have a collection of utilities in <code>#.utils</code>, you do not need to keep referring to those functions by their full paths <code>#.utils.Foo</code> <code>#.utils.Goo</code> if you set <code>\u2395PATH\u2190'#.utils'</code>.</p> <p><code>:With</code> was really designed when working with GUI objects:</p> <pre><code>  \u2207 make caption\n[1]    :With 'MyForm' \u2395WC 'Form'\n[2]        Caption\u2190caption\n[3]        Coord\u2190'Pixel'\n[4]        Size\u2190400 800 \u22c4 Posn\u219020 30\n[5]        onClose\u2190'HandleClose'\n...</code></pre> <p>However, some users think that <code>\u2395PATH</code>, <code>:With</code> and <code>\u2395CS</code> simply make applications more difficult to debug when something goes wrong. In large functions, debugging can become difficult if namespaces and search paths are altered far from where an error occurs. This is especially problematic in tradfns with dynamic scope, if you forget to localise <code>\u2395PATH</code> within a function.</p> <p>One recommendation is to assign a reference to a long namespace path at the top of a function or namespace:</p> <pre><code>      str\u2190#.utils.strings\n      str.(nl split) char_vec_with_embedded_newlines</code></pre>"},{"location":"dyalog/Quirks/#auxiliary-processors","title":"Auxiliary processors","text":"<p>Auxiliary Processors AKA APs are a legacy mechanism akin to using compiled shared native libraries with \u2395NA. We do not recommended using them in new projects, but they remain for the support of existing systems.</p> <p>They were generally used when equivalent functionality written in APL was not performant, or not possible at the time. For example, in the past, set functions such as Index-Of <code>\u237a\u2373\u2375</code> and Membership <code>\u237a\u220a\u2375</code> were slow. For some time, APs had the general advantage that the interpreter would not crash due to an error in an AP, but these days their performance is relatively poor due to having to copy data in and out of the active workspace. The performance of primitive functions is much better now than in the past and APs are a deprecated feature.</p> <p>For some applications, you might want to see the documentation archive for information about the XUtils AP.</p>"},{"location":"dyalog/Quirks/#underscored-alphabet","title":"Underscored alphabet","text":"<p>See the online documentation for the underscored alphabet</p> <p>Before Unicode... before personal computers... before software fonts... before electronic hardware fonts... was... the typewriter! Due to its age, the history of APL is enough to appreciate many of the modern features that we take for granted in computing.</p> <p>The first APL (Iverson Notation) was written by hand. Some of the earliest APLs on computers were on mainframe computers and accessed via teletype terminals such as the IBM Selectric typewriter. These typewriters had type balls (colloquially referred to as \"golf balls\") which could be swapped out to enable different fonts - including an APL font.</p> <p>It is quite interesting to see such a system in action, for example in this demonstration of APL from 1975, you can hear the typewriter aggressively rattling off keystrokes as the result of computation is relayed back to the terminal. </p> <p>While all of this is now historical curiosity, one hangover might be relevant if you are working on older code bases. Older APL systems did not have lower case letters. Instead, there was the alphabet (<code>\u2395A</code>), and an underscored alphabet (<code>\u2395\u24b6</code> - although in some fonts this is rendered as a circled-A \u24b6). In recent versions of Dyalog, some accented characters have been co-opted for compatibility with older applications.</p>"},{"location":"dyalog/Quirks/#refactoring","title":"Refactoring","text":"<p>It is usually best to continue code in the style in which you find it. This can include continuing to use many of the constructs which are here presented as \"historical quirks\". However, if an important part of the code base has become very difficult to reason about and debug, it might be worth your time to refactor it using more modern constructs and practices. This is referred to as \"paying down technical debt\", as the debt is accrued when the original author wrote code which makes it difficult, and therefore takes more time and money, to maintain. After paying the technical debt, it is hoped that future maintenance is far less resource intensive - so it is always a tradeoff between spending time now to make code nicer for the future, or spending time later wondering how the thing even works.</p> <ol> <li>Hui, R.K. and Kromberg, M.J., 2020. APL Since 1978. Proceedings of the ACM on Programming Languages. Section 3.1</li> </ol>"},{"location":"dyalog/Reading/","title":"Further Reading","text":""},{"location":"dyalog/Reading/#activity","title":"Activity","text":"<p>If you want to continue learning, using and practising APL but don't have a particular goal in mind, here are some things you can do now.</p> <ul> <li> <p>Enjoy understanding articles on the APL Wiki. See how to generate the APL Wiki logo as an svg.</p> </li> <li> <p>Try to solve problems from the APL Problem Solving Competition. Many of the past Phase I (simple) problems can be tried with instant feedback on problems.tryapl.org.</p> </li> <li> <p>There are many similar problem solving sites. Trying to solve these in APL is an excellent way to test and improve your skills.</p> <ul> <li>Project Euler</li> <li>Rosalind.info</li> <li>Code Golf Stack Exchange</li> <li>Rosetta Code</li> <li>LeetCode</li> <li>Perl Weekly Challenge</li> </ul> </li> <li> <p>Drill yourself on APL idiom knowledge with the APLcart quiz.</p> </li> <li>Explore the language, don't forget the language bar and basic help, summarised here:<ul> <li>Dyalog Documentation Centre</li> <li>Dyalog Online Help</li> <li>Dyalog Forums</li> <li>Stack Overflow</li> <li>The APL Orchard</li> </ul> </li> </ul>"},{"location":"dyalog/Reading/#media","title":"Media","text":"<p>We strongly recommend that you spend some time on a regular basis reading, watching, listening and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements.</p> <ul> <li>Dyalog.TV</li> <li>The Array Cast Podcast</li> <li>The Vector Journal of the British APL Association</li> <li>APL Quote Quad</li> <li>APL Conferences</li> <li>Dyalog User Meetings</li> <li>SIGAPL</li> <li>Code Report videos featuring APL</li> <li>Rodrigo's YouTube channel</li> <li>Videos by the late great John Scholes, inventor of dfns</li> </ul>"},{"location":"dyalog/Workspaces/","title":"Workspace basics","text":"<p>We sure have made a lot of functions so far and we've typed many expressions into our REPL. There seem to be a few variables in our workspace as well. We should save them somewhere for later.</p>"},{"location":"dyalog/Workspaces/#whats-a-workspace","title":"What's a workspace?","text":"<p>If you have been using Dyalog, the session log is the page with all of your input and output so far. You can scroll up the session log (with a mouse or using the Page Up key) and see everything you have done so far.</p> <p>A workspace is a collection of names. We can obtain some lists of names using system commands.</p> <pre><code>      )fns    \u235d Functions\n      )vars   \u235d Variables (arrays)</code></pre> <p>These commands have the special <code>)COMMAND</code> syntax, and are only used when interacting with the session. They return no result and cannot be used programmatically; they cannot be used in a function.</p>"},{"location":"dyalog/Workspaces/#whats-in-a-workspace","title":"What's in a workspace?","text":"<ul> <li> <p><code>]Map</code></p> <p>See a diagram indicating the types of names in the current namespace. Also use the Workspace Explorer: go to Tools \u2192 Explorer in the Microsoft Windows IDE or View \u2192 Show Workspace Explorer in RIDE.</p> </li> <li> <p><code>]Locate</code></p> <p>Search and replace strings (including function names, literal character vectors and comments) in functions, operators, namespaces and other objects. It does not search inside character array variables. You can also use Tools \u2192 Search in the Windows IDE.</p> </li> <li> <p><code>]Peek</code></p> <p>Try an expression as if it was executed in a saved workspace without having to copy the contents of that workspace.</p> </li> </ul> <pre><code>      ]peek dfns cal 2021 7\n      ]peek -?</code></pre>"},{"location":"dyalog/Workspaces/#how-big-is-a-workspace","title":"How big is a workspace?","text":"<p>The data and code in the active workspace is limited to the maximum workspace size, or MAXWS (maks-wuss). The size of a .dws workspace file is usually much smaller than this.</p> <p>We can get the current value: <pre><code>\u2395\u21902\u2395NQ'.' 'GetEnvironment' 'MAXWS'</code></pre></p> <p>The maximum workspace size can be set to a different value using the MAXWS configuration parameter. If you are using the Microsoft Windows IDE, you can go to Options \u2192 Configure \u2192 Workspace and set the maximum workspace size. In either case, the interpreter must be restarted for the change to take effect.</p> <p>The MAXWS setting is an adjustable software limitation, although there is also a hardware limitation: the amount of memory in the computer.</p> <p>Finally, you can see how much workspace is available with <code>\u2395WA</code>.</p>"},{"location":"dyalog/Workspaces/#system-commands","title":"System commands","text":"<p>A table of system commands is provided in the online documentation.</p> <p>The session is sometimes used to refer to the interactive mode of operation (also known as calculator mode also known as immediate execution mode), in contrast to under program control, which is when something happens due to a line of code in a program/function. </p> <p>For example:</p> <pre><code>      myvar \u2190 2\u00d7\u23733   \u235d Declare a variable in the session\n      )erase myvar   \u235d Use a system command to erase the variable</code></pre> <p>If we try to use a system command inside a function, it won't work.</p> <pre><code>                     \u235d The ]DInput user command lets us write mult-line dfns in the session\n      ]dinput        \u235d Alternatively, press Shift+Enter with the cursor | on a name\n      MultiFn\u2190{      \u235d A multi-line dfn\n                     \u235d These statements are executed \"under program control\"\n        \u2395\u21905+5\n        var \u2190 2+2    \u235d This variable only exists when this function is running\n        )erase var   \u235d This won't work\n      }\n                     \u235d Now try to execute:\n      MultiFn \u236c\n10\nVALUE ERROR: Undefined name: erase\nMultiFn[4] )erase var   \u235d This won't work\n            \u2227</code></pre> <p>Note</p> <p>Attempting to execute the above <code>MultiFn</code> function will cause the tracer to open by default. Simply press Esc to quit the suspended function and return to the session.</p>"},{"location":"dyalog/Workspaces/#system-functions","title":"System Functions","text":"<p>Some quad-names are system variables, such as <code>\u2395A</code>, <code>\u2395D</code> and <code>\u2395AV</code>. Others are system functions, many of which are similar to system command counterparts.</p> System Command System Function <code>)SAVE /path/to/WorkspaceFile</code> <code>\u2395SAVE'/path/to/WorkspaceFile'</code> <code>)LOAD /path/to/WorkspaceFile</code> <code>\u2395LOAD'/path/to/WorkspaceFile'</code> <code>)ERASE name</code> <code>\u2395EX'name'</code> <p>Note</p> <p><code>\u2395SAVE</code> will overwrite any existing workspace file without asking first. Use <code>)SAVE</code> when saving workspaces.</p> <p>In contrast to the system commands, which can only be used in the interactive session, system functions can be used in a function (A.K.A. under program control).</p> <p>System functions are in-built functions with names of the form <code>\u2395FUNCTION</code> and do return a result. Some have shy results which can be used by subsequent functions, or printed to the session output with <code>\u2395\u2190</code> (quad-gets).</p> <pre><code> multifn\u2190{\n    \u235d These statements are executed \"under program control\"\n    \u2395\u21905+5\n    var \u2190 2+2    \u235d This variable only exists when this function is running\n    \u2395EX 'var'    \u235d This will work, although it does not do anything useful in this dfn\n}</code></pre> <p>The Name List <code>\u2395NL</code> function lists names according to their name class.</p> <pre><code>      \u2395NL 2    \u235d List variables as a text matrix\n      \u2395NL 3    \u235d List functions\n      \u2395NL-\u23739   \u235d List all names as a nested vector of character vectors</code></pre>"},{"location":"dyalog/Workspaces/#clear","title":"\u2395CLEAR","text":"<p>Prank your friends with the best function ever: <pre><code> BestFunctionEver\u2190{\n     _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS\n     \u2395CLEAR\n }</code></pre></p>"},{"location":"dyalog/Workspaces/#off","title":"\u2395OFF","text":"<p>An event better function for pranks: <pre><code> BestFunctionEver\u2190{\n     _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS\n     \u2395OFF\n }</code></pre></p> <p><code>\u2395OFF</code> can also emit custom exit codes. Standard Dyalog exit codes are:</p> <ul> <li>0: Successful exit from <code>\u2395OFF</code>, <code>)OFF</code>, <code>)CONTINUE</code> or graphical exit from the GUI</li> <li>1: APL failed to start (for example: lack of memory, bad translate table in Classic)</li> <li>2: APL received a SIGHUP or SIGTERM.</li> <li>3: APL generated a syserror</li> </ul>"},{"location":"dyalog/Workspaces/#saving-and-loading","title":"Saving and loading","text":"<p>The example below shows how to save and load a workspace.</p> <pre><code>      ]cd /tmp\n      )save MyFirstWS\n      )clear\n      )load MyFirstWS</code></pre>"},{"location":"dyalog/Workspaces/#uses-of-workspaces","title":"Uses of workspaces","text":"<ul> <li>Distribution: For large applications, it will be inconvenient or undesirable to ship large collections of source files that are loaded at startup. Workspaces are often used as a mechanism for the distribution of packaged collections of code and data.</li> <li>Crash Analysis: When an application fails, it is often useful to save the workspace, complete with execution stack, code and data, for subsequent analysis and sometimes resumption of execution.</li> <li>Pausing work: In many ways, this is similar to crash analysis: sometimes you need to shut down your machine in the middle of things and resume later, but you don't want to be forced to start from scratch because you have created an interesting scenario with data in the workspace. Saving a workspace allows you to do this.</li> </ul>"},{"location":"dyalog/Workspaces/#activities","title":"Activities","text":"<ol> <li>What is the rank of <code>\u2395NL x</code> for any scalar or vector <code>x</code>?</li> <li>What is the rank of <code>\u2395NL -x</code> for any scalar or vector <code>x</code>?</li> <li>Save Your Work<ol> <li>Use <code>]cd</code> to change to a directory on your machine where you would like to save your work</li> <li>Use <code>)wsid WSName</code> to change the name of your active workspace</li> <li>Use <code>)save</code> to save your workspace</li> </ol> </li> </ol> <p>Note</p> <p><code>\u2395SAVE</code> will overwrite any existing workspace file without asking first. Use <code>)SAVE</code> when saving workspaces.</p>"},{"location":"dyalog/array-logic-data-driven-conditionals/","title":"Array Logic and Data-driven Conditionals","text":""},{"location":"dyalog/array-logic-data-driven-conditionals/#logic-and-conditions","title":"Logic and conditions","text":"<p>APL has logical and comparison functions as in-built primitives. Much like the arithmetic, these symbols are like those used in conventional notation.</p> <code>&lt;</code> <code>\u2264</code> <code>=</code> <code>\u2260</code> <code>\u2265</code> <code>&gt;</code> <code>\u2227</code> <code>\u2228</code> <code>\u2372</code> <code>\u2371</code> <code>~</code> <p>Some of these are more general mathematical functions which happen to be the same as logical functions when used with Booleans (<code>1</code>s and <code>0</code>s):</p> <p><pre><code>      3 \u2227 4               \u235d Lowest common multiple</code></pre> <pre><code>12</code></pre></p> <p><pre><code>      0 1 0 1 \u2227 0 0 1 1   \u235d Logical AND</code></pre> <pre><code>0 0 0 1</code></pre></p> <p><pre><code>      12 \u2228 16             \u235d Greatest common divisor</code></pre> <pre><code>4</code></pre></p> <p><pre><code>      0 1 0 1 \u2228 0 0 1 1   \u235d Logical OR</code></pre> <pre><code>0 1 1 1</code></pre></p> <p><pre><code>      'P' \u2260 'Q'           \u235d Not equal to</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      0 1 0 1 \u2260 0 0 1 1   \u235d Logical XOR </code></pre> <pre><code>0 1 1 0</code></pre></p> Logic Functions <p>The 16 possible logic functions for two binary variables can all be expressed succinctly in APL. There is a webinar on Boolean scans and reductions, and the following table has been adapted and corrected from this notebook:</p> <p> Binary Decimal <code>2\u22a5</code> Function <code>f</code> Description <code>0 0 0 0</code> <code>0</code> <code>0\u2368</code> FALSE <code>0 0 0 1</code> <code>1</code> <code>\u2227</code> AND <code>0 0 1 0</code> <code>2</code> <code>&gt;</code> Left but not right <code>0 0 1 1</code> <code>3</code> <code>\u22a3</code> Left <code>0 1 0 0</code> <code>4</code> <code>&lt;</code> Right but not left <code>0 1 0 1</code> <code>5</code> <code>\u22a2</code> Right <code>0 1 1 0</code> <code>6</code> <code>\u2260</code> Exlusive OR <code>0 1 1 1</code> <code>7</code> <code>\u2228</code> OR <code>1 0 0 0</code> <code>8</code> <code>\u2371</code> NOR <code>1 0 0 1</code> <code>9</code> <code>=</code> Exclusive NOR <code>1 0 1 0</code> <code>10</code> <code>~\u2364\u22a2</code> Not right <code>1 0 1 1</code> <code>11</code> <code>\u2265</code> Left OR not right <code>1 1 0 0</code> <code>12</code> <code>~\u2364\u22a3</code> Not left <code>1 1 0 1</code> <code>13</code> <code>\u2264</code> Right OR not left <code>1 1 1 0</code> <code>14</code> <code>\u2372</code> NAND <code>1 1 1 1</code> <code>15</code> <code>1\u2368</code> TRUE </p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#the-shape-of-data","title":"The shape of data","text":"<p>One of the distinguishing features of APL is the multidimensional array. Single elements, lists and tables are quite familiar constructs.</p> <p>Tables are very useful for representing data which is related in some way. For example, let's say that the price of oranges changes daily. We can represent a week of prices as a 7-element numeric list.</p> <pre><code>0.35 0.3 0.33 0.32 0.39 0.33 0.36</code></pre> <p>How about the amount spent on 3 items? We could store this in 3 separate lists, but it is convenient to keep it in a table with 3 rows and 7 columns.</p> <p>The reshape function <code>\u237a\u2374\u2375</code> takes data from <code>\u2375</code> and uses it to fill out an array of shape <code>\u237a</code>, one row at a time.</p> <p><pre><code>      cost \u2190 3 7\u23744.36 4.22 4.05 4.14 4.18 4.19 4.02 2.79 2.58 2.68 2.77 2.88 2.79 2.52 3.07 3 3.13 3 3.24 3.06 3.29\n      cost</code></pre> <pre><code>4.36 4.22 4.05 4.14 4.18 4.19 4.02\n2.79 2.58 2.68 2.77 2.88 2.79 2.52\n3.07 3    3.13 3    3.24 3.06 3.29</code></pre></p> <p>So what is this table that we have created? In other languages, there are lists, and there are lists of lists. In APL, a list of lists is not the same thing as a table (also known as a matrix). APL arrays contain two essential pieces of information: their shape and their list of elements.</p> <p>The shape function <code>\u2374\u2375</code> returns the shape of its argument.</p> <pre><code>      \u23744 12 31\n3</code></pre> <p>The following table lists the rank (number of dimensions), some common names, and a geometric analogy for the three simplest types of multidimensional arrays.</p> Rank Name Geometric analogy diagram \\(0\\) scalar point \\(1\\) vector or list line \\(2\\) matrix or table rectangle <p>Arrays with \\(3\\) or more dimensions are sometimes called cube or cuboid, but they are generally referred to as N-dimensional arrays, rank-N arrays or high rank arrays. Arrays of rank greater than \\(3\\) are sometimes called noble arrays.</p> <p>For our <code>cost</code> matrix, the total spent on each item is a row-wise sum: <pre><code>      +/cost    \u235d The total cost over the week</code></pre> <pre><code>29.16 19.01 21.79</code></pre></p> <p><pre><code>      \u2374+/cost   \u235d For 3 items</code></pre> <pre><code>3</code></pre></p> <p>The total for each day across all items is a column-wise sum:</p> <p><pre><code>      +\u233fcost    \u235d The total cost of 3 items</code></pre> <pre><code>10.22 9.8 9.86 9.91 10.3 10.04 9.83</code></pre></p> <p><pre><code>      \u2374+\u233fcost   \u235d Over 7 days</code></pre> <pre><code>7</code></pre></p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#ravel-means-unravel","title":"Ravel means unravel","text":"<p>Monadic comma is the function ravel <code>,\u2375</code> and it lays out the elements of an array as a vector, one row at a time \u2014 a bit like pulling thread from a spool.</p> <p><pre><code>      mat \u2190 3 3\u2374\u2395A\n      mat</code></pre> <pre><code>ABC\nDEF\nGHI</code></pre></p> <p><pre><code>      ,mat</code></pre> <pre><code>ABCDEFGHI</code></pre></p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#the-outer-product","title":"The outer product","text":"<p>The \"outer product\" <code>\u2218.F</code> operator applies its function operand <code>F</code> between all combinations of elements of its left and right argument arrays. </p> <p><pre><code>      F \u2190 {\u237a+\u2375}\n      1 2 3 \u2218.F 10 20 30</code></pre> <pre><code>11 21 31\n12 22 32\n13 23 33</code></pre></p> <p>For example, the catenate function <code>\u237a,\u2375</code> (comma) will join two lists together. We can use the outer product to join combinations of words from two lists. </p> <p><pre><code>      1 4 9 , 6 5 4</code></pre> <pre><code>1 4 9 6 5 4</code></pre></p> <p><pre><code>      'joined up' , 'text vectors'</code></pre> <pre><code>joined uptext vectors\n\u00a0</code></pre></p> <p><pre><code>      'chicken' 'pork' 'vegetable' \u2218., ' chow mein' ' with cashew nuts'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502chicken chow mein  \u2502chicken with cashew nuts  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502pork chow mein     \u2502pork with cashew nuts     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502vegetable chow mein\u2502vegetable with cashew nuts\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>What are those boxes around the output?</p> <p>We have just created a nested array. These are arrays in which each element contains another array more complex than a single number or character. The next section on multidimensional and nested arrays introduces them in more detail.</p> <p>If you do not see lines around the output of the last expression above in your interpreter session, turn boxing on: <pre><code>      ]box on</code></pre> <pre><code>Was OFF</code></pre></p> <p><pre><code>      \u23733 3</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021 1\u25021 2\u25021 3\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u25022 1\u25022 2\u25022 3\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u25023 1\u25023 2\u25023 3\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#replicatecompress","title":"Replicate/Compress","text":"<p>The replicate function <code>\u237a/\u2375</code> (yes, some symbols have multiple meanings) repeats elements of an array along rows.</p> <p><pre><code>      1 2 3/'ABC'</code></pre> <pre><code>ABBCCC</code></pre></p> <p><pre><code>      1 2 3/2 3\u2374'DYALOG'</code></pre> <pre><code>DYYAAA\nLOOGGG</code></pre></p> <p><pre><code>      1 \u00af2 3/2 3\u2374'DYALOG'</code></pre> <pre><code>D  AAA\nL  GGG</code></pre></p> <p>When used with a Boolean array, the function <code>\u237a/\u2375</code> is called compress.</p> <p><pre><code>      0 1 0/2 3\u2374'DYALOG'</code></pre> <pre><code>Y\nO</code></pre></p> <p>Just like the forward-slash <code>F/</code> as the reduction operator acts along rows and forward-slash-bar <code>F\u233f</code> reduces down columns*, the replicate <code>\u237a/\u2375</code> and replicate-first <code>\u237a\u233f\u2375</code> functions work along different axes of high rank arrays.</p> <p>*we will see a fuller description when we discuss 3D and higher rank arrays.</p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#indexing","title":"Indexing","text":"<p>In many other programming languages, \"selection\" is used to describe control structures such as \"if then else\" or \"switch case\". In APL, we can get a similar effect by literally \"selecting\" elements from arrays. </p> <p>Info</p> <p>Indexing starts from 1 by default. You can change the index origin by setting <code>\u2395IO\u21900</code>, but this course assumes <code>\u2395IO\u21901</code>.</p> <p><pre><code>      'APPLE'[1 3 4]</code></pre> <pre><code>APL</code></pre></p> <p><pre><code>      \u2378 1 0 0 1 0 1</code></pre> <pre><code>1 4 6</code></pre></p> <p><pre><code>      IsDivisibleBy \u2190 {0=\u2375|\u237a}\n      3 6 8 5 2 IsDivisibleBy 2</code></pre> <pre><code>0 1 1 0 1</code></pre></p> <p><pre><code>      3 6 8 5 2 {\u237a[\u2378\u237a IsDivisibleBy \u2375]} 2</code></pre> <pre><code>6 8 2</code></pre></p>"},{"location":"dyalog/array-logic-data-driven-conditionals/#problem-set-3","title":"Problem set 3","text":"<ol> <li> <p>Define the numeric vector <code>nums</code></p> <pre><code>nums \u2190 3 5 8 2 1</code></pre> <ol> <li>Using <code>nums</code>, define <code>mat</code></li> </ol> <p><pre><code>      mat</code></pre> <pre><code>3 5 8\n2 1 3</code></pre></p> <ol> <li>Using <code>mat</code>, define <code>wide</code></li> </ol> <p><pre><code>      wide</code></pre> <pre><code>3 5 8 3 5 8\n2 1 3 2 1 3</code></pre></p> <ol> <li>Using <code>mat</code>, define <code>stack</code></li> </ol> <p><pre><code>      stack</code></pre> <pre><code>3 5 8\n3 5 8\n2 1 3\n2 1 3</code></pre></p> Answers <p><ol> <li> <pre><code>mat \u2190 2 3\u2374nums</code></pre> </li> <li> <pre><code>wide \u2190 mat,mat</code></pre> </li> <li> <pre><code>stack \u2190 2\u233fmat</code></pre> </li> </ol></p> </li> <li> <p>Why does <code>101='101'</code> evaluate to a 3-element list?</p> Answer <p><code>101</code> is a literal single number (a scalar), whereas <code>'101'</code> is a literal 3-element character vector.</p> <p>Due to singleton extension, <code>101='101'</code> compares the single number <code>101</code> to each of the 3 characters in the 3-element character vector <code>'101'</code>. The character vector <code>'101'</code> is equivalent to <code>'1' '0' '1'</code> but the number <code>101</code> is not the same as the 3-element numeric vector <code>1 0 1</code>.</p> </li> <li> <p>Write a function <code>PassFail</code> which takes an array of scores and returns an array of the same shape in which <code>F</code> corresponds to a score less than 40 and <code>P</code> corresponds to a score of 40 or more.</p> <p><pre><code>      PassFail 35 40 45</code></pre> <pre><code>FPP</code></pre></p> <p><pre><code>      PassFail 2 5\u237489 77 15 49 72 54 25 18 57 53</code></pre> <pre><code>PPFPP\nPFFPP</code></pre></p> Answer <pre><code>PassFail \u2190 {'FP'[1+40\u2264\u2375]}</code></pre> </li> <li> <p>This problem is taken from the 2019 APL Problem Solving Competition.</p> <p>A Grille is a square sheet with holes cut out of it which, when laid on top of a similarly-sized character matrix, reveals a hidden message.</p> <p></p> <p>Write an APL function <code>Grille</code> which:</p> <ul> <li>takes a character matrix left argument where a hash <code>'#'</code> represents opaque material and a space <code>' '</code> represents a hole.</li> <li>takes a character matrix of the same shape as right argument</li> <li>returns the hidden message as a character vector</li> </ul> <p><pre><code>      (2 2\u2374'# # ') Grille 2 2\u2374'LHOI'</code></pre> <pre><code>HI</code></pre></p> <p><pre><code>      grid   \u2190 5 5\u2374'VRYIALCLQIFKNEVPLARKMPLFF'\n      grille \u2190 5 5\u2374'\u233a\u233a\u233a \u233a \u233a\u233a\u233a \u233a \u233a \u233a\u233a\u233a \u233a\u233a\u233a  \u233a\u233a'\n      grid grille</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502VRYIA\u2502\u233a\u233a\u233a \u233a\u2502\n\u2502LCLQI\u2502 \u233a\u233a\u233a \u2502\n\u2502FKNEV\u2502\u233a \u233a \u233a\u2502\n\u2502PLARK\u2502\u233a\u233a \u233a\u233a\u2502\n\u2502MPLFF\u2502\u233a  \u233a\u233a\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      grille Grille grid</code></pre> <pre><code>ILIKEAPL</code></pre></p> Answer <p>We can use the where function <code>\u2378\u2375</code> to compute indices of spaces:</p> <pre><code>Grille \u2190 {\u2375[\u2378\u237a=' ']}</code></pre> <p>Or, we can use compress <code>\u237a/\u2375</code> if we first ravel <code>,\u2375</code> both arguments:</p> <pre><code>Grille \u2190 {(,\u237a=' ')/,\u2375}</code></pre> </li> <li> <p>Back to School</p> <ol> <li> <p>Write a function to produce the multiplication table from <code>1</code> to <code>\u2375</code>. </p> <p><pre><code>      MulTable 7</code></pre> <pre><code>1  2  3  4  5  6  7\n2  4  6  8 10 12 14\n3  6  9 12 15 18 21\n4  8 12 16 20 24 28\n5 10 15 20 25 30 35\n6 12 18 24 30 36 42\n7 14 21 28 35 42 49</code></pre></p> </li> <li> <p>Write a function to produce the addition table from <code>0</code> to <code>\u2375</code>.</p> <p><pre><code>      AddTable 6</code></pre> <pre><code>0 1 2 3  4  5  6\n1 2 3 4  5  6  7\n2 3 4 5  6  7  8\n3 4 5 6  7  8  9\n4 5 6 7  8  9 10\n5 6 7 8  9 10 11\n6 7 8 9 10 11 12</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>MulTable \u2190 {(\u2373\u2375)\u2218.\u00d7\u2373\u2375}</code></pre> <p>Avoid repeating yourself by assigning values to a name (<code>nums</code> in this example):</p> <pre><code>MulTable \u2190 {nums \u2218.\u00d7 nums \u2190 \u2373\u2375}</code></pre> <p>Or, if left and right arguments to a dyadic function are the same, use a selfie <code>F\u2368\u2375</code>:</p> <pre><code>MulTable \u2190 {\u2218.\u00d7\u2368\u2373\u2375}</code></pre> <p> <li> <p>Using the same three styles as described in part (a) above:</p> <pre><code>AddTable \u2190 {(\u00af1+\u23731+\u2375)\u2218.+\u00af1+\u23731+\u2375}\nAddTable \u2190 {nums\u2218.+nums\u2190\u00af1+\u23731+\u2375}\nAddTable \u2190 {\u2218.+\u2368\u00af1+\u23731+\u2375}</code></pre> <p> </p> </li> <li> <p>Making the Grade</p> <p> Score Range <code>0-64</code> <code>65-69</code> <code>70-79</code> <code>80-89</code> <code>90-100</code> Letter Grade F D C B A </p> <p>Write a function that, given an array of integer test scores in the inclusive range 0 to 100, returns a list of letter grades according to the table above.</p> <p><pre><code>      Grade 0 10 75 78 85</code></pre> <pre><code>FFCCB</code></pre></p> Answer <p>Use an outer product to compare between lower bounds and the scores. The column-wise sum then tells us which \"bin\" each score belongs to:</p> <pre><code>Grade \u2190 {'FDCBA'[+\u233f0 65 70 80 90\u2218.\u2264\u2375]}</code></pre> <p>You can use a different comparison if you choose to use upper bounds:</p> <pre><code>{'ABCDF'[+\u233f64 69 79 89 100\u2218.\u2265\u2375]}</code></pre> </li> <li> <p>Analysing text</p> <ol> <li> <p>Write a function test if there are any vowels <code>'aeiou'</code> in text vector <code>\u2375</code></p> <pre><code>      AnyVowels 'this text is made of characters'\n1\n      AnyVowels 'bgxkz'\n0</code></pre> </li> <li> <p>Write a function to count the number of vowels in its character vector argument <code>\u2375</code></p> <p><pre><code>      CountVowels 'this text is made of characters'</code></pre> <pre><code>9</code></pre></p> <p><pre><code>      CountVowels 'we have twelve vowels in this sentence'</code></pre> <pre><code>12</code></pre></p> </li> <li> <p>Write a function to remove the vowels from its argument</p> <pre><code>      RemoveVowels 'this text is made of characters'\nths txt s md f chrctrs</code></pre> </li> </ol> Answers <p><ol> <li> With two or-reductions, we ask \"are there any <code>1</code>s in each row?\" Then, \"are there any <code>1</code>s in any of the rows?\" <pre><code>AnyVowels \u2190 {\u2228/\u2228/'aeiou'\u2218.=\u2375}</code></pre> <p>Or we can ravel the contents of the array into a vector to perform one big or-reduction across all elements:</p> <pre><code>AnyVowels \u2190 {\u2228/,'aeiou'\u2218.=\u2375}</code></pre> <p> <li> <p>Similar techniques can be used for counting the ones:</p> <pre><code>CountVowels \u2190 {+/+/'aeiou'\u2218.=\u2375}\nCountVowels \u2190 {+/,'aeiou'\u2218.=\u2375}</code></pre> <p>Because we are comparing a single vector, +\u233f and \u2228\u233f both tell us if there is any vowel in that position:</p> <pre><code>CountVowels \u2190 {+/+\u233f'aeiou'\u2218.=\u2375}\nCountVowels \u2190 {+/\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> <p> <li> To remove vowels, we must consider the columns of our outer product equality. We then keep elements which are not <code>~\u2375</code> vowels. <pre><code>RemoveVowels \u2190 {\u2375/\u2368~\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> <p>Or rows if the arguments to our outer product are swapped:</p> <pre><code>RemoveVowels \u2190 {\u2375/\u2368~\u2228/'aeiou'\u2218.=\u2375}</code></pre> <p>Since we are compressing elements out of a vector, we can use either replicate <code>\u237a/\u2375</code> or replicate-first <code>\u237a\u233f\u2375</code>. This is because a vector only has a single dimension, or axis, and that axis is both the first and the last.</p> <pre><code>RemoveVowels \u2190 {\u2375/\u2368\u2228\u233f'aeiou'\u2218.=\u2375}\nRemoveVowels \u2190 {\u2375\u233f\u2368\u2228\u233f'aeiou'\u2218.=\u2375}</code></pre> </li> <li> <p>Matching shapes</p> <ol> <li> <p>Write a function to add a vector <code>\u2375</code> to each row of a matrix <code>\u237a</code>:</p> <pre><code>      (3 2\u23741 100) AddRows 1 9\n2 109\n2 109\n2 109\n      (5 3\u23741 10 100 1000) AddRows 5 10 15\n6   20  115\n1005   11   25\n105 1010   16\n15  110 1015\n6   20  115</code></pre> </li> <li> <p>Write a function to add a vector to each row of a matrix, regardless of the order in which they are supplied:</p> <pre><code>      1 9 AddRows 3 2\u23741 100\n2 109\n2 109\n2 109\n      (2 2\u23741 9 11 18) AddRows 9 1\n10 10\n20 19</code></pre> </li> </ol> Answers <p><ol> <li> Reshape recycles elements. We can use this to duplicate rows until we have the correct shape to allow <code>+</code> to map between elements for us: <pre><code>AddRows \u2190 {\u2375+(\u2374\u2375)\u2374\u237a}</code></pre> </li> <li> Finding the maximum shape is a more general solution: <pre><code>AddRows \u2190 {s\u2190(\u2374\u237a)\u2308\u2374\u2375 \u22c4 (s\u2374\u237a)+s\u2374\u2375}</code></pre> <p>This way of applying functions between arrays of different shapes is very common. As with many things in this course, eventually we will discover more elegant methods. Here is an example of using the rank operator:</p> <p><pre><code>AddRows \u2190 +\u23641</code></pre> </p> </li> <li> <p>These are the heights of some students in 3 classes.     <pre><code>student \u2190 10 7\u2374'Kane   Jonah  JessicaPadma  Katie  CharlieAmil   David  Zara   Filipa '\nclass \u2190 'CBACCCBBAB'\nheight \u2190 167 177 171 176 178 164 177 177 173 160</code></pre></p> <p>Use APL to:</p> <ol> <li>Find the height of the tallest student</li> <li>Find the name of the tallest student</li> <li>Find the class to which the tallest student belongs  </li> <li>Find the average height of students in class <code>B</code></li> </ol> Answers <p><ol> <li> <pre><code>      \u2308/height\n178</code></pre> </li> <li> <pre><code>      (height=\u2308/height)\u233fstudent\nKatie</code></pre> </li> <li> <pre><code>      (height=\u2308/height)\u233fclass\nC</code></pre> <p>You might have tried to use indexing and gotten an error:</p> <pre><code>RANK ERROR\n        student[\u2378height=\u2308/height]\n                \u2227</code></pre> <p>There is additional syntax in order to select from matrices and higher rank arrays.</p> <p> <li> We can use either compress or indexing to select from the <code>height</code> vector: <pre><code>      Mean \u2190 {(+/\u2375)\u00f7\u2262\u2375}\n      Mean (class='B')/height\n172.75\n      Mean height[\u2378class='B']\n172.75</code></pre> </li> </p> </li> <li> <p>Optimus Prime</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a dfn which returns all of the prime numbers between <code>1</code> and <code>\u2375</code>.</p> <p><pre><code>      Primes 10</code></pre> <pre><code>2 3 5 7</code></pre></p> <p><pre><code>      Primes 30</code></pre> <pre><code>2 3 5 7 11 13 17 19 23 29</code></pre></p> Answer <pre><code>Primes \u2190 {\u23782=+\u233f0=\u2218.|\u2368\u2373\u2375}</code></pre> <p>An alternative coding uses the multiplication table:</p> <pre><code>Primes \u2190 {i~\u2218.\u00d7\u2368i\u21901\u2193\u2373\u2375}</code></pre> <p>Of course, the outer product <code>\u2218.F</code> indicates that the number of calculations to compute both of these solutions increases with the square of the input size. We say they have a computational complexity \"of order n squared\" or \\(O(n^2)\\) in big-O notation. This is a very inefficient way to find prime numbers. To see discussions around more efficient ways to compute prime numbers in APL, see the dfns page on prime numbers.</p> </li> </ol>"},{"location":"dyalog/basic-syntax-and-arithmetic/","title":"Basic syntax","text":""},{"location":"dyalog/basic-syntax-and-arithmetic/#functions-and-arguments","title":"Functions and arguments","text":"<p>APL has two-argument, infix functions. These are called dyadic functions.</p> <p><pre><code>      3 \u00d7 5</code></pre> <pre><code>15</code></pre></p> <p><pre><code>      3 - 5</code></pre> <pre><code>\u00af2</code></pre></p> <p>Some functions map between elements of their left and right argument arrays. It is easy to add lists of numbers together: <pre><code>      1 2 3 + 4 5 6</code></pre> <pre><code>5 7 9</code></pre></p> <p>Negative numbers are written with a high minus <code>\u00af</code> to differentiate between negation (<code>-3</code>) and literal negative numbers (<code>\u00af3</code>). <pre><code>      1 2 3 - 1 0 \u00af1</code></pre> <pre><code>0 2 4</code></pre></p> <p>There are also one-argument, prefix functions. These are called monadic functions. <pre><code>      - 5 \u00af3 0 \u00af4 2</code></pre> <pre><code>\u00af5 3 0 4 \u00af2</code></pre></p> <p><pre><code>      \u233d 1 2 3 4 5</code></pre> <pre><code>5 4 3 2 1</code></pre></p> <p>Some symbols represent both a monadic and a dyadic function, but these are often closely related. As we will see later, even user-defined functions can be monadic, dyadic or even both (ambivalent).</p> <p> Try this: Use these functions monadically and dyadically:</p> <code>+</code> <code>-</code> <code>\u00d7</code> <code>\u00f7</code> <code>|</code> <code>*</code> <code>\u235f</code> <code>\u2308</code> <code>\u230a</code>"},{"location":"dyalog/basic-syntax-and-arithmetic/#singleton-extension","title":"Singleton extension","text":"<p>Dyadic functions can map between a single value and an array of values. <pre><code>      3 \u00d7 1 10 100</code></pre> <pre><code>3 30 300</code></pre></p> <p><pre><code>      3 = 1 2 3 4 5</code></pre> <pre><code>0 0 1 0 0</code></pre></p> <p> Try this: Replace the functions in the previous two expressions with: <code>\u2308</code> <code>\u230a</code> <code>&lt;</code></p> <p>While experimenting, you may cause a <code>LENGTH ERROR</code>:</p> <p><pre><code>      1 2+3 4 5</code></pre> <pre><code>LENGTH ERROR: Mismatched left and right argument shapes\n      1 2+3 4 5\n         \u2227</code></pre></p> <p>Functions such as <code>+ \u00d7 \u2308</code> apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the function should be applied. Of course, you may want to apply a function between all combinations of elements of the left and right argument, but that will be addressed soon enough.</p>"},{"location":"dyalog/basic-syntax-and-arithmetic/#order-of-execution","title":"Order of execution","text":"<p>Expressions are executed from right to left.</p> <p><pre><code>      10\u00d7\u23732+5</code></pre> <pre><code>10 20 30 40 50 60 70</code></pre></p> Show me step-by-step <p>To start, there is a literal number 5: <pre><code>            5\n5</code></pre></p> <p>Next, there is a plus <code>+</code> with a number 2 to its immediate left, so it is evaluated as two plus five: <pre><code>          2+5\n7</code></pre></p> <p>Then the symbol iota <code>\u2373</code>. To its left is another function, times <code>\u00d7</code>, not a value. So the function is called monadically. The monadic form of <code>\u2373</code> is the index generator, which generates an integer array of length defined by its right argument. <pre><code>         \u23732+5\n1 2 3 4 5 6 7</code></pre></p> <p>Lastly, another dyadic function, we multiply our list by ten: <pre><code>      10\u00d7\u23732+5\n10 20 30 40 50 60 70</code></pre></p> <p>The expression above is \"ten times the indices from 1 to two plus five, or in short: \"ten times iota two plus five\". We can make it clearer using (superfluous) parentheses <code>()</code>. <pre><code>      10\u00d7(\u2373(2+5))</code></pre> <pre><code>10 20 30 40 50 60 70</code></pre></p> <p>Of course, we can change the order of execution using different parentheses.</p> <p><pre><code>      (10\u00d7\u23732)+5</code></pre> <pre><code>15 25</code></pre></p> Show me step-by-step <p>Beginning from the right, there is a literal number 5: <pre><code>      (10\u00d7\u23732)+5\n              5</code></pre></p> <p>Then there is a plus symbol <code>+</code>. Before we can decide if it is being called monadically or dyadically, we must look to the left.</p> <pre><code>            )+5</code></pre> <p>A right parenthesis. We must evaluate the contents of the parentheses to see if it is a function or a value.</p> <pre><code>      (10\u00d7\u23732)</code></pre> <p>This expression evaluates to the list <code>10 20</code>. Since it is a value, it is used as the left argument to our plus function.</p> <pre><code>      (10\u00d7\u23732)+5\n      (10 20)+5\n15 25</code></pre> <p>Infix (dyadic) functions have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. </p> <p>If there is one, the left argument is the value to the immediate left.</p> <p>However, juxtaposed values form lists before any functions are applied. This is called stranding and lets us write very natural expressions, such as:</p> <pre><code>      1 2 3 + 4 5 6\n5 7 9</code></pre> <p>but this can lead to some surprises if we are not aware:</p> <p><pre><code>      2 + 2 2 + 2</code></pre> <pre><code>6 6</code></pre></p> Show me step-by-step <p>First, there is a literal number 2 <pre><code>                2\n2</code></pre></p> <p>Then there is a symbol <code>+</code>. What, if any, is the value to its immediate left? <pre><code>          2 2 + 2</code></pre></p> <p>It is a 2-element vector <code>2 2</code>. The plus function maps between these elements and the single number on the right: <pre><code>          2 2 + 2\n4 4</code></pre></p> <p>Finally there is another addition. The overall evaluation looks like the following: <pre><code>      2 + 2 2 + 2\n      2 + 4 4\n      6 6</code></pre></p>"},{"location":"dyalog/basic-syntax-and-arithmetic/#comments","title":"Comments","text":"<p>Anything after a lamp symbol <code>\u235d</code> is ignored.</p> <p><pre><code>      \u235d nothing happens on this line\n      2 \u00d7 3 \u235d 4 5</code></pre> <pre><code>6</code></pre></p> <p><pre><code>      'A'   \u235d lamp is not an \"A\"</code></pre> <pre><code>A</code></pre></p>"},{"location":"dyalog/basic-syntax-and-arithmetic/#the-reduction-operator","title":"The reduction operator","text":"<p>Adding a list of numbers could become very tedious... <pre><code>      1+2+3+4+5+6+7+8+9+10+11+12+13+14+15</code></pre> <pre><code>120</code></pre></p> <p>The reduce operator <code>F/</code> inserts the function <code>F</code> to its left between parts of the right argument array. <pre><code>      +/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</code></pre> <pre><code>120</code></pre></p> <p>It is called reduce because it reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result.</p>"},{"location":"dyalog/basic-syntax-and-arithmetic/#the-index-generator","title":"The index generator","text":"<p>The index generator <code>\u2373\u2375</code> generates integers up to the integer right argument <code>\u2375</code> <pre><code>      \u237310</code></pre> <pre><code>1 2 3 4 5 6 7 8 9 10</code></pre></p> <p>So we can do an arithmetic sum as follows</p> Traditional Mathematical Notation (TMN) APL \\(\\sum_{n=1}^N n\\) <code>+/\u2373N</code>"},{"location":"dyalog/basic-syntax-and-arithmetic/#what-do-these-errors-mean","title":"What do these errors mean?","text":"<p>While experimenting, you are very likely to come across these:</p> <p><pre><code>      \u2373\u00af4</code></pre> <pre><code>DOMAIN ERROR\n      \u2373\u00af4\n      \u2227</code></pre></p> <p>The <code>DOMAIN ERROR</code> means that APL cannot compute what you are asking for. In this case, it cannot generate indices up to a negative number. Negative numbers are outside the domain of the index generator function. How might you generate integers from 1 to negative four?</p> <pre><code>      1+\nSYNTAX ERROR: Missing right argument\n      1+\n       \u2227</code></pre> <p>A <code>SYNTAX ERROR</code> means that the expression which you tried to execute does not make sense. In the case above, it is because functions always either take a single argument to their right or two arguments, one to the right and one to the left. Functions never take a single argument to their left.</p> <pre><code>      a\nVALUE ERROR: Undefined name: a\n      a\n      \u2227</code></pre> <p>A <code>VALUE ERROR</code> means that there is nothing associated with the name provided. We have not seen any named functions or variables yet; nothing has been assigned to the name <code>a</code>, so trying to use it in an expression is meaningless.</p>"},{"location":"dyalog/basic-syntax-and-arithmetic/#problem-set-1","title":"Problem Set 1","text":"<ol> <li> <p>The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable <code>t_allweek</code>.</p> <pre><code>t_allweek \u2190 11.7 8.6 9.7 14.2 6.7 11.8 9.2</code></pre> <p>Use APL to compute the follwing:</p> <ol> <li>The highest daily temperature</li> <li>The lowest daily temperature</li> <li>The range of (difference between the largest and the smallest) temperatures</li> <li>Each temperature rounded to the nearest whole number</li> </ol> Answers <p><ol> <li> <pre><code>      \u2308/t_allweek\n14.2</code></pre> </li> <li> <pre><code>      \u230a/t_allweek\n6.7</code></pre> </li> <li> <pre><code>      (\u2308/t_allweek)-\u230a/t_allweek\n7.5</code></pre> <p>You may have found the correct answer using the following expression: <pre><code>      \u2308/t_allweek-\u230a/t_allweek\n7.5</code></pre></p> <p>but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: <pre><code>      \u2308/      t_allweek                 - \u230a/ t_allweek\n      \u2308/      t_allweek                 - 6.7\n      \u2308/ 11.7 8.6 9.7 14.2 6.7 11.8 9.2 - 6.7\n      \u2308/ 5 1.9 3 7.5 0 5.1 2.5\n      7.5</code></pre></p> <p>if we use parentheses <code>()</code> to force APL to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: <pre><code>      ( \u2308/t_allweek ) - \u230a/ t_allweek\n      ( \u2308/t_allweek ) - 6.7\n      (     14.2    ) - 6.7\n      7.5</code></pre></p> <p> <li> To round to the nearest whole number, either add 0.5 and round down: <pre><code>      \u230a0.5+t_allweek\n12 9 10 14 7 12 9</code></pre> <p>or subtract 0.5 and round up: <pre><code>      \u2308t_allweek-0.5\n12 9 10 14 7 12 9</code></pre> </p> </li> <li> <p>A Mathematical Notation</p> <p>Use APL to evaluate the following</p> <ol> <li> <p>\\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers)</p> </li> <li> <p>In TMN, the following expression is equal to <code>0</code>, why does the following return <code>70</code> in APL?     <pre><code>      84 - 12 - 1 - 13 - 28 - 9 - 6 - 15  </code></pre> <pre><code>70</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>      \u00d7/\u237312\n479001600</code></pre> </li> <li> <pre><code>      +/(\u237317)*2\n1785</code></pre> Without parentheses we get the sum of the first 289 integers, instead of the first 17 integers squared. TMN APL \\(\\sum_n^{17^2} n\\) <code>+/\u237317*2</code> \\(\\sum_n^{17} n^2\\) <code>+/(\u237317)*2</code> <p> <li> <pre><code>      +/2\u00d7\u2373100\n10100</code></pre> </li> <li> We can either subtract 1 from the even numbers: <pre><code>      +/(2\u00d7\u2373100)-1\n10000</code></pre> <p>or we can add negative 1: <pre><code>      +/\u00af1+2\u00d7\u2373100\n10000</code></pre> The high minus denotes a literal negative, whereas the hyphen indicates subtraction.  <li> Remember the right-to-left rule: functions take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how APL evaluates our expression. <pre><code>      (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15)))))))\n70</code></pre> </li> </p> </li> <li> <p>Pyramid Schemes</p> <ol> <li> <p>Sugar cubes are stacked in an arrangement as shown by Figure 1.</p> <p> Figure 1. Stacked sugar cubes</p> <p>This stack has <code>4</code> layers and a total of <code>30</code> cubes. How many cubes are there in a similar stack with <code>467</code> layers?</p> </li> <li> <p>Now consider the stack in Figure 2.</p> <p> Figure 2. Differently stacked sugar cubes</p> <p>The arrangement in Figure 2 has <code>4</code> layers and <code>84</code> cubes. How many cubes are there in a similar stack with <code>812</code> layers?</p> </li> <li> <p>Now look at Figure 3.</p> <p> Figure 3. This is just a waste of sugar cubes by now...</p> <p>The stack in Figure 3 has <code>3</code> \"layers\" and <code>36</code> cubes in total. How many cubes are there in a similar stack with <code>68</code> \"layers\"?</p> </li> </ol> Answers <p><ol> <li> Each \\(n\\)th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. <pre><code>    +/(\u23734)*2</code></pre> <pre><code>30</code></pre> <p><pre><code>    +/(\u2373467)*2</code></pre> <pre><code>34058310</code></pre> <li> Each \\(n\\)th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. <pre><code>    +/(\u00af1+2\u00d7\u23734)*2</code></pre> <pre><code>84</code></pre> <p><pre><code>    +/(\u00af1+2\u00d7\u2373812)*2</code></pre> <pre><code>713849500</code></pre> <li> Each \\(n\\)th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. <pre><code>    +/(\u23733)*3</code></pre> <pre><code>36</code></pre> <p><pre><code>    +/(\u237368)*3</code></pre> <pre><code>5503716</code></pre> </p> </li> <li> <p>Rewrite the following expressions so that they do not use parentheses.</p> <ol> <li><code>(\u00f7a)\u00d7b</code></li> <li><code>(\u00f7a)\u00f7b</code></li> <li><code>(a+b)-5</code></li> <li><code>(a+b)+5</code></li> </ol> Answers <p><ol> <li>Multiplication is commutative, which means that the order of arguments does not matter, so we can write <code>b\u00d7\u00f7a</code>. Even more simply, it is <code>b\u00f7a</code> because multiplication by a reciprocal is the same as division.</li> <li>\\({{{1}\\over{a}}\\div{b}} = {{1}\\over{a\\times{b}}}\\) so we can write <code>\u00f7a\u00d7b</code></li> <li>Use a literal negative five:<code>\u00af5+a+b</code></li> <li>No parentheses needed: <code>a+b+5</code></li> </ol></p> </li>"},{"location":"dyalog/broken-keyboard-problems/","title":"Broken Keyboard Problems","text":"<p>APL is a language which evolves over time. Some of the primitives available today exist because they represent patterns which are very common. Not only this, but in APL there are usually several equally good ways of expressing the same idea. As you develop competency in APL, this versatility in expression becomes an advantage.</p> <p>Imagine that your keyboard is broken such that it is impossible to type a particular glyph. It is a useful exercise in array thinking and use of APL to try and recreate the behaviour without using the primitive itself.</p> <p>For each of the following problems:</p> <ul> <li>Read the prompt and think about which primitive function behaves in the way described.</li> <li>Write a function which matches the description but does not use that primitive function.</li> </ul> <ol> <li> <p>This primitive function is used to find the indices of a Boolean array.</p> What primitive function is this? <p>We want to model the where function <code>\u2378\u2375</code> without using the iota-underbar glyph <code>\u2378</code>.</p> Answers <p>For Boolean vectors:</p> <pre><code>{\u2375/\u2373\u2262\u2375}\n{\u2375/\u2373\u2374\u2375}</code></pre> <p>For Boolean arrays in general:</p> <pre><code>{(,\u2375)/,\u2373\u2374\u2375}\n{\u2375/\u2365,\u2373\u2374\u2375}</code></pre> </li> <li> <p>This primitive function counts the number of elements in a vector.</p> What primitive function is this? <p>We want to model the shape <code>\u2374\u2375</code> or tally function <code>\u2262\u2375</code> without using the rho <code>\u2374</code> or not-identical-to <code>\u2262</code> glyphs. We might need to use different approaches depending on the type and structure of our argument.</p> Answers <p>For simple numeric vectors, we can use any mathemtical function which always returns <code>1</code> and add up the ones.</p> <pre><code>{+/\u2375\u00f7\u2375}\n{+/\u2375*0}\n{+/1+0\u00d7\u2375}\n{+/\u00d71+|\u2375}</code></pre> <p>For any simple vector, we can ask equality with the argument itself:</p> <pre><code>{+/\u2375=\u2375}</code></pre> <p>For any vector, we can use each <code>\u237a F\u00a8 \u2375</code> to map the match function <code>\u237a\u2261\u2375</code> between each element of <code>\u2375</code> and itself.</p> <pre><code>{+/\u2375\u2261\u00a8\u2375}</code></pre> </li> <li> <p>This primitive function reverses the order of the elements in a vector.</p> What primitive function is this? <p>We want to model the reverse function <code>\u233d\u2375</code> without using the circle-stile <code>\u233d</code> glyph.</p> Answer <pre><code>{\u2375[(\u2262\u2375)-\u2373\u2262\u2375]}\n{\u2375[(\u2374\u2375)-\u2373\u2374\u2375]}</code></pre> <p>To model the reverse-first function <code>\u2296\u2375</code>, we should use squad <code>\u237a\u2337\u2375</code> - the indexing function - to select major cells from our argument regardless of rank.</p> <pre><code>{(\u22821+(\u2262\u2375)-\u2373\u2262\u2375)\u2337\u2375}</code></pre> <p>This solution still does not handle scalars. There may be several ways to account for this, but it easy to work around it with a guard:</p> <pre><code>{0=\u2262\u2374\u2375: \u2375 \u22c4 (\u22821+(\u2262\u2375)-\u2373\u2262\u2375)\u2337\u2375}</code></pre> </li> <li> <p>Write a function to convert a character vector into upper case without using <code>\u2395C</code>. Assume text consists of only lowercase alphabetic characters <code>a-z</code> and spaces.</p> <pre><code>      ToUpper 'sale on now'\nSALE ON NOW</code></pre> Answer <pre><code>alph \u2190 'abcdefghijklmnopqrstuvwxyz'\nToUpper \u2190 {(\u2395A,' ')[\u237a\u2373\u2375]}</code></pre> <p>To learn about case folding and mapping using the case conversion system function <code>\u2395C</code>, watch the webinar Language Features of Dyalog version 18.0 in Depth - Part 1.</p> </li> <li> <p>Write a function to convert only lowercase alphabetic characters <code>a-z</code> into uppercase, and leave all others alone.</p> <p><pre><code>      text\u2190'What? Ignore these $#!?# characters!?'\n      ToUpper text</code></pre> <pre><code>WHAT? IGNORE THESE $#!?# CHARACTERS!?</code></pre></p> Answer <p>There are other valid approaches, but here is one solution using selective assignment:</p> <pre><code>((text\u220aalph)/text) \u2190 (\u2395A,' ')[(text\u220aalph)/alph\u2373text]</code></pre> </li> <li> <p>This function returns unique major cells of <code>\u2375</code>.</p> What primitive function is this? <p>We want to model the unique function <code>\u222a\u2375</code> without using the downshoe <code>\u222a</code> glyph.</p> Answers <p>Index-of returns the index of the first occurance of an element. For <code>\u2375\u2373\u2375</code>, this becomes a list of integer ID numbers which correspond to major cells as they appear.</p> <pre><code>{((\u2373\u2262\u2375)=\u2375\u2373\u2375)\u233f\u2375}</code></pre> <p>This is a good opportunity to mention the swap <code>\u237a F\u2368 \u2375</code> and selfie <code>F\u2368\u2375</code> operators.</p> <pre><code>{\u2375\u233f\u2368(\u2373\u2262\u2375)=\u2373\u2368\u2375}</code></pre> </li> <li> <p>This primitive removes scalars in <code>\u2375</code> from the vector <code>\u237a</code>.</p> What primitive function is this? <p>We want to Write the without function <code>\u237a~\u2375</code> without using the tilde <code>~</code> glyph.</p> Answer <pre><code>{(1-\u237a\u220a\u2375)/\u237a}</code></pre> </li> <li> <p>This primitive function returns elements in the vector <code>\u237a</code> which are also found in the vector <code>\u2375</code>.</p> What primitive function is this? <p>We want to write the intersection function <code>\u237a\u2229\u2375</code> without using the upshoe <code>\u2229</code> glyph.</p> Answer <pre><code>{(\u237a\u220a\u2375)/\u237a}</code></pre> </li> <li> <p>Write a function which:</p> <ul> <li>takes a numeric left argument vector <code>\u237a</code>, sorted ascending</li> <li>takes a numeric right argument vector <code>\u2375</code></li> <li>returns an integer vector of the same length as <code>\u2375</code>, indicating the intervals in <code>\u237a</code> in which elements in <code>\u2375</code> belong</li> </ul> <pre><code>      1 3 7 Function 0 2 3 5 8\n0 1 2 2 3</code></pre> What primitive function is this? <p>Write a model of the interval index function <code>\u237a\u2378\u2375</code> without using the iota-underbar <code>\u2378</code> glyph.</p> Answer <p>For numeric arguments:</p> <pre><code>{+\u233f\u237a\u2218.\u2264\u2375}\n{+/\u2375\u2218.\u2265\u237a}</code></pre> </li> <li> <p>This primitive function returns <code>\u00af1</code> for negative numbers, <code>0</code> for <code>0</code> and <code>1</code> for positive numbers in its numeric argument array.</p> What primitive function is this? <p>Write the sign or signum function <code>\u00d7\u2375</code> without using the multiplication <code>\u00d7</code> glyph.</p> Answer <pre><code>{(0&lt;\u2375)-(0&gt;\u2375)}</code></pre> </li> </ol>"},{"location":"dyalog/cells-and-axes/","title":"Cells and Axes","text":""},{"location":"dyalog/cells-and-axes/#fundamentals-of-high-rank-arrays","title":"Fundamentals of high rank arrays","text":"<p>From the APL Wiki: </p>        A cell is a subarray which is formed by selecting a single index along some number of leading axes and the whole of each trailing axis. Cells are classified by their rank, which may be between 0 (scalars) and the array's rank (in which case the cell must be the entire array). Cells with rank k are called k-cells of an array. A major cell is a cell whose rank is one less than the entire array, or a 0-cell of a scalar.   <p>If the text above feels confusing, don't worry. Maybe after this chapter, or even after the next section on selecting from arrays, you can read it again and say to yourself \"oh yeah, that makes sense\". For now just know that that arrays are arranged like rectangles in many dimensions. The three simplest cases should feel a bit familiar to you.</p> <pre><code>      0            \u235d A scalar\n0\n      'APL'        \u235d A vector\nAPL\n      0 1 2\u2218.*\u23735   \u235d A matrix\n0 0 0  0  0\n1 1 1  1  1\n2 4 8 16 32</code></pre> <p>Now let us look at an array with 3 dimensions. We will call it a cuboid:</p> <pre><code>      \u2374cuboid\u21902 3\u2218.+3 4 5\u2218.\u00d74 5 6 7\n2 3 4 \u2190 trailing (last) axis\n\u2191\nleading (first) axis</code></pre> <p>In the array <code>cuboid</code> defined above, there are <code>2</code> major cells, which are those of rank <code>\u00af1+\u2262\u2374cuboid</code>.</p> <p>Here is another 3D array containing letters of the alphabet:</p> <pre><code>      2 3 4\u2374\u2395A\nABCD\nEFGH\nIJKL\n\nMNOP\nQRST\nUVWX\n      \u22622 3 4\u2374\u2395A      \u235d Tally counts the major cells\n2</code></pre> <p>The display may look like 2 separate matrices, but the array <code>2 3 4\u2374\u2395A</code> is a single, 3 dimensional array.</p> <p>The dimensions of an array are also known as axes. The most major cells, the rank <code>k-1</code> cells for an array of rank <code>k</code>, lie along the first axis. The least major cells are columns which lie along the last axis.</p> <p>              Axes of a 3D array          </p> <p>In Dyalog, arrays can have up to 15 dimensions.</p> <p>For more details on the APL array model in Dyalog and other array languages, see the APL Wiki article on the array model.</p> <p>Now that we have the words to describe the structure of an array in terms of its sub-arrays, let us look at how to apply functions to those sub-arrays.</p>"},{"location":"dyalog/cells-and-axes/#the-rank-operator","title":"The rank operator","text":"<p>A lot of the time you might want to take a subset of the data and do stuff to it. Sometimes you want to think of the data as a collection of similar parts and apply the same processing to each part. In fact, this idea is built in to the \"array-at-a-time\" nature of some primitive functions and operators, but the rank operator lets us do this for all functions.</p> <p>Let us take a 3D array representing the cost of 3 products each day over 2 weeks.</p> <pre><code>cost \u2190 ?3 2 7\u23749</code></pre> <p>The total cost over all 3 products each day of each week is the sum between the layers (rank 2, matrices):</p> <p><pre><code>      +\u233fcost</code></pre> <pre><code>12 21 13 14 17 20 17\n12 25 18 10  9 26 14</code></pre></p> <p><pre><code>      \u2374+\u233fcost       \u235d 2 weeks, 7 days per week</code></pre> <pre><code>2 7</code></pre></p> <p>To get the total spent on each week day over the two weeks, we can tell the function <code>+\u233f</code> to only see the tables for each product \u2014 the rank-2 subarrays. The first axes of each rank-2 subarray are the columns of each product table:</p> <p><pre><code>      (+\u233f\u23642)cost</code></pre> <pre><code> 4 18 12  7 9 13  6\n17 14  9  7 9 17 13\n 3 14 10 10 8 16 12</code></pre></p> <p><pre><code>      \u2374(+\u233f\u23642)cost   \u235d 3 products, 7 days per week</code></pre> <pre><code>3 7</code></pre></p> <p>The total spent on each product each week is the row-wise sum.</p> <p><pre><code>      (+\u233f\u23641)cost</code></pre> <pre><code>28 41\n51 35\n35 38</code></pre></p> <p>This is the same as <code>+/</code>:</p> <p><pre><code>      +/cost</code></pre> <pre><code>28 41\n51 35\n35 38</code></pre></p> <p><pre><code>      \u2374(+\u233f\u23641)cost   \u235d 3 products, 2 weeks</code></pre> <pre><code>3 2</code></pre></p> <p>A helpful tip for operators</p> <p>Many operators accept one or more function operands and apply them to their arguments in some particular way. The enclose function <code>\u2282\u2375</code> can be used to get a view of the arguments as the operand function sees them.</p> <p>Apply our function to rank-2 subarrays of the <code>cost</code> array.</p> <p><pre><code>      (\u2282\u23642)cost</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25022 9 4 1 5 5 2\u25029 6 8 5 7 8 8\u25021 6 1 8 5 7 7\u2502\n\u25022 9 8 6 4 8 4\u25028 8 1 2 2 9 5\u25022 8 9 2 3 9 5\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>The result of <code>(+\u233f\u23642)\u2375</code> is like doing <code>+\u233f\u2375</code> to each of these matrices.</p> <p><pre><code>      (+\u233f\u23642)cost</code></pre> <pre><code> 4 18 12  7 9 13  6\n17 14  9  7 9 17 13\n 3 14 10 10 8 16 12</code></pre></p> <p>In the dyadic case, the rank operator is a powerful way to pair up subarrays of <code>\u237a</code> with a conforming collection of subarrays from <code>\u2375</code>.</p> <p>Let us say that we want to add each of the numbers \\(1\\) to \\(5\\) to corresponding rows in a matrix. We cannot simply add a vector to a matrix because these arrays have different ranks.</p> <p><pre><code>      1 2 3 4 5 + 5 3\u23740 10 100</code></pre> <pre><code>RANK ERROR: Mismatched left and right argument ranks\n      1 2 3 4 5+5 3\u23740 10 100\n               \u2227</code></pre></p> <p>The rank operator (<code>F\u2364k</code>) allows us to pair up scalars (rank 0) from <code>\u237a</code> and vectors (rank 1) from <code>\u2375</code> and apply our function <code>+</code> between these.</p> <p><pre><code>      1 2 3 4 5 (+\u23640 1) 5 3\u23740 10 100</code></pre> <pre><code>1 11 101\n2 12 102\n3 13 103\n4 14 104\n5 15 105</code></pre></p> <p>In the same way that some functions can apply between a single value and an array of values, we can apply between an array of rank \\(n\\) and an array of rank \\(n\\) subarrays. For example, a single vector (rank 1) and a matrix (rank 2) as a collection of vectors.</p> <p><pre><code>      1 0 \u00af1 (\u00d7\u23641 1) 5 3\u2374\u237315</code></pre> <pre><code> 1 0  \u00af3\n 4 0  \u00af6\n 7 0  \u00af9\n10 0 \u00af12\n13 0 \u00af15</code></pre></p> <p>Another helpful tip for operators</p> <p>If we derive a dyadic function using an operator, the dfn <code>{\u237a\u2375}</code> can be used to get a view of the arguments as the operand function sees them.</p> <p><pre><code>      1 0 \u00af1 ({\u237a\u2375}\u23641 1) 5 3\u2374\u237315</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 0 \u00af1\u25021 2 3   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 0 \u00af1\u25024 5 6   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 0 \u00af1\u25027 8 9   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 0 \u00af1\u250210 11 12\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021 0 \u00af1\u250213 14 15\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>In the case where we apply to sub-arrays of the same rank in both <code>\u237a</code> and <code>\u2375</code>, we only need specify that rank once:</p> <p><pre><code>      1 0 \u00af1 (\u00d7\u23641) 5 3\u2374\u237315</code></pre> <pre><code> 1 0  \u00af3\n 4 0  \u00af6\n 7 0  \u00af9\n10 0 \u00af12\n13 0 \u00af15</code></pre></p> <p>When applying a function <code>F\u2364j k</code>, we must ensure that there are the same number of rank-<code>j</code> subarrays in <code>\u237a</code> as rank-<code>k</code> subarrays in <code>\u2375</code> - or that one of them has just 1.</p> <p><pre><code>      1 0 \u00af1 (\u00d7\u23640 1) 5 3\u2374\u237315</code></pre> <pre><code>LENGTH ERROR: It must be that either the left and right frames match or one of them has length 0\n      1 0 \u00af1(\u00d7\u23640 1)5 3\u2374\u237315\n            \u2227</code></pre></p> <p>Note</p> <p>With functions like <code>+ \u00d7 \u00f7</code>, arrays must either have the same shape, or one of them be a scalar.  The result of the function application has the same shape as the largest of the input arrays.  The rank operator generalises this to the concept of frames.  For a particular cell rank, the leading axes form the frame and the trailing k axes form the cell shape.  For frames to \"match\" means that there is the same shape of rank j subarrays in <code>\u237a</code> as there is for rank k subarrays in <code>\u2375</code> when a function <code>\u237a F \u2375</code> is applied as <code>\u237a (F\u2364j k) \u2375</code>.</p>"},{"location":"dyalog/cells-and-axes/#transpose","title":"Transpose","text":"<p>To transpose array is to rearrange its axes. Or rather, to rearrange along which axes its data lies.</p> <p>Transposing a matrix is to flip along its leading diagonal (top-left to bottom-right):</p> <p><pre><code>      3 3\u2374\u23739</code></pre> <pre><code>1 2 3\n4 5 6\n7 8 9</code></pre></p> <p><pre><code>      \u23493 3\u2374\u23739</code></pre> <pre><code>1 4 7\n2 5 8\n3 6 9</code></pre></p> <p>In the monadic case, we reverse the order of the axes:</p> <p><pre><code>      2 3 4\u2374\u2395A</code></pre> <pre><code>ABCD\nEFGH\nIJKL\n\nMNOP\nQRST\nUVWX</code></pre></p> <p><pre><code>      \u23492 3 4\u2374\u2395A</code></pre> <pre><code>AM\nEQ\nIU\n\nBN\nFR\nJV\n\nCO\nGS\nKW\n\nDP\nHT\nLX</code></pre></p> <p>Inspecting the shape before and after transposing shows the reversal of axis lengths.</p> <p><pre><code>      \u23742 3 4\u2374\u2395A</code></pre> <pre><code>2 3 4</code></pre></p> <p><pre><code>      \u2374\u23492 3 4\u2374\u2395A   \u235d 4 3 2 \u2261 \u233d2 3 4</code></pre> <pre><code>4 3 2</code></pre></p> <p>In the dyadic case, the left argument says where each corresponding axis in <code>\u2374\u2375</code> should end up in the result.</p> <p>For example:</p> <ul> <li>move the 1st axis to become the 2nd</li> <li>move the 2nd axis to become the 1st</li> <li>leave the 3rd axis as the 3rd</li> </ul> <p><pre><code>      2 1 3\u23492 3 4\u2374\u2395A</code></pre> <pre><code>ABCD\nMNOP\n\nEFGH\nQRST\n\nIJKL\nUVWX</code></pre></p> <p><pre><code>      \u23742 1 3\u23492 3 4\u2374\u2395A</code></pre> <pre><code>3 2 4</code></pre></p>"},{"location":"dyalog/cells-and-axes/#the-bracket-axis-operator","title":"The bracket axis operator","text":"<p>Here are two pairs of first- and last-axis primitives.</p> <pre><code>      n\u21902 3\u23741 2 3 1 0 \u00af1\n      n\n1 2  3\n1 0 \u00af1\n      +/n                \u235d Sum along the last axis\n6 0\n      +\u233fn                \u235d Sum along the first axis\n2 2 2\n      '-'\u236a2 3\u2374'DYALOG'   \u235d Catenate first\n---\nDYA\nLOG\n      '|',2 3\u2374'DYALOG'   \u235d Catenate last\n|DYA\n|LOG</code></pre> <p>Some functions and operators can be used along specified axes using the bracket-axis operator <code>[]</code> (more duplicitous symbols).</p> <p>Compare the behaviour of the monadic function <code>\u2282</code> enclose when applied with the rank operator <code>\u2364</code> versus when it is applied using bracket-axis (also called the function axis operator or axis specification).</p> <p><pre><code>      (\u2282\u23641)2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502HELLO\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502THERE\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      (\u2282\u23642)2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502THERE\u2502\n\u2502HELLO\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      (\u2282\u23643)2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502\n\u2502HELLO\u2502\n\u2502     \u2502\n\u2502THERE\u2502\n\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[1]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502RT\u2502IH\u2502GE\u2502HR\u2502TE\u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502HR\u2502EI\u2502LG\u2502LH\u2502OT\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[2]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502RH\u2502IE\u2502GL\u2502HL\u2502TO\u2502\n\u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u2502TR\u2502HI\u2502EG\u2502RH\u2502ET\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[3]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502HELLO\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502THERE\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[1 2]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502RH\u2502IE\u2502GL\u2502HL\u2502TO\u2502\n\u2502TR\u2502HI\u2502EG\u2502RH\u2502ET\u2502\n\u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[2 3]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502THERE\u2502\n\u2502HELLO\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2282[1 2 3]2 2 5\u2374'RIGHTHELLOTHERE'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502RIGHT\u2502\n\u2502HELLO\u2502\n\u2502     \u2502\n\u2502THERE\u2502\n\u2502RIGHT\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>Only the following primitive constructs can be used with the axis operator:</p> Monadic Functions Function Names <code>\u2191\u2375</code> and <code>\u2193\u2375</code> Mix and Split <code>\u233d\u2375</code> or <code>\u2296\u2375</code> Reverse <code>,\u2375</code> Ravel with axis <code>\u2282\u2375</code> Enclose with axis <code>F/\u2375</code> or <code>F\u233f\u2375</code> Reductions <code>F\\\u2375</code> or <code>F\u2340\u2375</code> Scans Dyadic Functions Function Names <code>+ \u00d7 \u2308 \u2227 \u2264</code> etc... All scalar dyadic functions <code>\u237a\u2191\u2375</code> and <code>\u237a\u2193\u2375</code> Take and Drop <code>\u237a/\u2375</code> or <code>\u237a\u233f\u2375</code> Replicate/compress <code>\u237a\\\u2375</code> or <code>\u237a\u2340\u2375</code> Expand <code>\u237a,\u2375</code> or <code>\u237a\u236a\u2375</code> Catenate <code>\u237a\u2282\u2375</code> Partitioned-enclose <code>\u237a\u2286\u2375</code> Partition <code>\u237aF/\u2375</code> or <code>\u237aF\u233f\u2375</code> Windowed-reduction"},{"location":"dyalog/cells-and-axes/#rank-vs-axis","title":"Rank vs Axis","text":"<p>The bracket-axis operator has always been in Dyalog APL. The rank operator was introduced in version 14.0. They both offer similar functionality, however:</p> <ul> <li>some uses of bracket-axis are shorter than their equivalent expression using rank and transpose, and vice versa</li> <li>sometimes it makes sense to think in terms of axes using bracket-axis, other times in terms of cells using the rank operator</li> <li>bracket-axis can only be used with a few particular primitives, whereas the rank operator can be used with any function including those defined by the user</li> <li>bracket-axis works slightly differently depending on the function to which it is applied, whereas the rank operator has consistent behaviour for all functions</li> <li>bracket-axis is special syntax unlike most other operators</li> </ul> <p>In some ways, bracket-axis can be thought of as syntactic sugar for the behaviour of the rank operator in conjunction with dyadic transpose.</p> <p>For a more in-depth look at the relationship between function rank and function axis, watch the Dyalog webinars on Selecting from Arrays and The Rank Operator and Dyadic Transpose.</p> <p>The section about older features has some more examples of bracket axis.</p>"},{"location":"dyalog/cells-and-axes/#problem-set-5","title":"Problem set 5","text":"<ol> <li> <p>Write a function <code>FlipBlock</code> which reverses the order of rows in each sub-matrix of its argument array.</p> <pre><code>      FlipBlock 2 2 3\u23740 0 0 1 1 1\n1 1 1\n0 0 0\n\n1 1 1\n0 0 0</code></pre> <p>If there is only 1 row in each sub-matrix, reversing does nothing: <pre><code>      FlipBlock 1 5\u2374'abcde'</code></pre> <pre><code>abcde</code></pre></p> <p>If there is only one dimension, the array will be reversed:</p> <p><pre><code>      FlipBlock 'abcde'</code></pre> <pre><code>edcba</code></pre></p> Answer <pre><code>FlipBlock \u2190 {\u237a(\u2296\u23642)\u2375}</code></pre> <p>We can also use the right/identity function <code>\u22a2\u2375</code> to separate the array operand of the rank operator from the array argument of the derived function reverse-first-rank-two <code>\u2296\u23642</code>. Otherwise, stranding would bind <code>2 \u2375</code> into a vector, causing unexpected behaviour.</p> <p>This author prefers to isolate operands using parentheses most of the time.</p> <pre><code>FlipBlock \u2190 {\u237a\u2296\u23642\u22a2\u2375}</code></pre> <p>Alternatively, we can write this as a tacit function. This form is also known as a derived function because a new function is derived from functions and operators.</p> <p>Parentheses are not required, but this author thinks they make derived functions more distinced from array values when viewed together in source code.</p> <pre><code>FlipBlock \u2190  \u2296\u23642\nFlipBlock \u2190 (\u2296\u23642)</code></pre> <p>These four spellings of <code>FlipBlock</code> are all equivalent. Whichever you choose to write is a matter of taste.</p> </li> <li> <p>Write a function <code>MatchWord</code> which takes a character vector left argument <code>\u237a</code> and a character array <code>\u2375</code> with the same number of columns as <code>\u237a</code> and returns a Boolean array of rank <code>\u00af1+\u2262\u237a</code> in which a <code>1</code> indicates rows in <code>\u2375</code> that match <code>\u237a</code>.</p> <p><pre><code>      'has' MatchWord 5 3\u2374'hasnotnot'</code></pre> <pre><code>1 0 0 1 0</code></pre></p> <p><pre><code>      'simon' MatchWord 3 2 5\u2374'maybesimonspoke'</code></pre> <pre><code>0 1\n0 0\n1 0</code></pre></p> Answer <p>Are all characters in a row equal?</p> <pre><code>MatchWord \u2190 {\u2227/\u237a(=\u23641)\u2375}</code></pre> <p>Or using the match function <code>\u237a\u2261\u2375</code>:</p> <pre><code>MatchWord \u2190 {\u237a(\u2261\u23641)\u2375}</code></pre> <p>As a tacit definition:</p> <pre><code>MatchWord \u2190 (\u2261\u23641)</code></pre> </li> <li> <p>Extend the <code>Grille</code> function from the problem set about array logic to reveal multiple messages in a 3-dimensional array.</p> <pre><code>grille  \u2190 4 4\u2374'\u233a \u233a\u233a \u233a \u233a\u233a \u233a  \u233a\u233a\u233a'\ngrilles \u2190 3 4 4\u2374'\u233a\u233a \u233a\u233a\u233a\u233a \u233a\u233a\u233a\u233a\u233a \u233a\u233a\u233a\u233a\u233a \u233a\u233a\u233a\u233a \u233a\u233a\u233a\u233a\u233a \u233a\u233a\u233a\u233a\u233a\u233a \u233a \u233a\u233a \u233a\u233a\u233a\u233a\u233a'\ngrids   \u2190 3 4 4\u2374'AREQEEVASEQALTOFBSMBESCTIRMETOGPGHIAAACPSKLERVRG'</code></pre> <p>The single <code>grille</code> reveals 3 messages.</p> <p><pre><code>      grille Grille grids</code></pre> <pre><code>REVEAL\nSECRET\nHACKER</code></pre></p> <p>The array <code>grilles</code> reveals 3 different messages when applied to the same grid.</p> <p><pre><code>      grilles Grille grids</code></pre> <pre><code>EAT\nBIG\nAPL</code></pre></p> Answer <p>In the individual case, using rank-2 <code>F\u23642</code> pairs the single grille with each grid in <code>grids</code>:</p> <p><pre><code>      grille ({\u237a\u2375}\u23642) grid</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502\u233a \u233a\u233a\u2502AREQ\u2502\n\u2502 \u233a \u233a\u2502EEVA\u2502\n\u2502\u233a \u233a \u2502SEQA\u2502\n\u2502 \u233a\u233a\u233a\u2502LTOF\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502\u233a \u233a\u233a\u2502BSMB\u2502\n\u2502 \u233a \u233a\u2502ESCT\u2502\n\u2502\u233a \u233a \u2502IRME\u2502\n\u2502 \u233a\u233a\u233a\u2502TOGP\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502\u233a \u233a\u233a\u2502GHIA\u2502\n\u2502 \u233a \u233a\u2502AACP\u2502\n\u2502\u233a \u233a \u2502SKLE\u2502\n\u2502 \u233a\u233a\u233a\u2502RVRG\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>We can also use a different grille for each grid, provided that we have one grille per grid:</p> <p><pre><code>      grilles ({\u237a\u2375}\u23642) grid</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502\u233a\u233a \u233a\u2502AREQ\u2502\n\u2502\u233a\u233a\u233a \u2502EEVA\u2502\n\u2502\u233a\u233a\u233a\u233a\u2502SEQA\u2502\n\u2502\u233a \u233a\u233a\u2502LTOF\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502\u233a\u233a\u233a \u2502BSMB\u2502\n\u2502\u233a\u233a\u233a\u233a\u2502ESCT\u2502\n\u2502 \u233a\u233a\u233a\u2502IRME\u2502\n\u2502\u233a\u233a \u233a\u2502TOGP\u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502\u233a\u233a\u233a\u233a\u2502GHIA\u2502\n\u2502\u233a \u233a \u2502AACP\u2502\n\u2502\u233a\u233a \u233a\u2502SKLE\u2502\n\u2502\u233a\u233a\u233a\u233a\u2502RVRG\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>Using the definitions of <code>Grille</code> given previously:</p> <pre><code>Grille \u2190 {\u2375[\u2378\u237a=' ']}\u23642\nGrille \u2190 {(,\u237a=' ')/,\u2375}\u23642</code></pre> </li> <li> <p>The 3D array <code>rain</code> gives the monthly rainfall in millimeters over 7 years in 5 countries.  </p> <pre><code>rain\u2190?7 5 12\u2374250</code></pre> <p>There are 12 columns in each row; the rows represent the months. The sum along the rows...</p> <p><pre><code>      (+\u233f\u23641)rain</code></pre> <pre><code>1476 1764 1733 1320 1678\n1698 1943  798 2226 1813\n2050 1821 1209 1763 1625\n2006 1218 1615 1516 1536\n1372 1584 1946 1604 1623\n1831 1705 1998 1312 1224\n1499 1369 1437 1597 1279</code></pre></p> <p><pre><code>      \u2374(+\u233f\u23641)rain</code></pre> <pre><code>7 5</code></pre></p> <p>...gives the total rainfall in each year in each country over 12 months. Put another way, it is the total annual rainfall each year in each country.</p> <ol> <li> <p>For each expression below, write a brief description of the resulting statistic.</p> <p><pre><code>\u2308\u233frain\n(+\u233f\u23642)rain\n(\u2308\u233f\u23641)rain\n(\u2308\u233f\u23643)rain\n\u230a/rain</code></pre> <pre><code></code></pre></p> Hint <p>Look at the shapes of the arguments and the results, <code>\u2374rain</code> and <code>\u2374+\u233frain</code> etc.</p> </li> <li> <p>Assign scalar numeric values (single numbers) to the variables <code>years</code> <code>countries</code> <code>months</code> such that the <code>rain</code> data can be summarised as follows:</p> <p><pre><code>      \u2374(+\u233f\u2364years)rain       \u235d Sum over years</code></pre> <pre><code>5 12</code></pre></p> <p><pre><code>      \u2374(+\u233f\u2364countries)rain   \u235d Sum over countries</code></pre> <pre><code>7 12</code></pre></p> <p><pre><code>      \u2374(+\u233f\u2364months)rain      \u235d Sum over months</code></pre> <pre><code>7 5</code></pre></p> </li> </ol> Answers <p><ol> <li> <ul> <li><code>\u2308\u233frain</code> is the maximum rainfall each month in each country over all 7 years.</li> <li><code>(+\u233f\u23642)rain</code> is the total rainfall each year in each month across all 5 countries.</li> <li><code>(\u2308\u233f\u23641)rain</code> is the maximum monthly rainfall for any month in each year in each country.</li> <li><code>(\u2308\u233f\u23643)rain</code> is the same as <code>\u2308\u233frain</code> because <code>rain</code> is a rank-3 array.</li> <li><code>\u230a/rain</code> is the minimum rainfall in any month in each year in each country.</li> </ul> <p> <li> <pre><code>(years countries months) \u2190 3 2 1</code></pre> <p> </p> </li> <li> <pre><code>Which of the following functions are affected by the rank operator `\u2364` and why are the other functions not affected?\n</code></pre> <pre><code>\u233d    \u235d Reverse\n\u2296    \u235d Reverse first\n+/   \u235d Plus reduce\n+\u233f   \u235d Plus reduce-first</code></pre> Answer <p>Reverse <code>\u233d\u2375</code> and reduce <code>F/\u2375</code> work along the last axis of an array. The rank operator makes a function act on subarrays defined in terms of trailing axes of an array. These trailing axes always contains the last axis, so there is no change in behaviour for last-axis reverse <code>\u233d\u2375</code> and reduce <code>F/\u2375</code>. For example, <code>F\u23642</code> forces <code>F</code> to work on matrices, and matrices have rows.</p> <p>As their names suggest, reverse-first and reduce-first act along the first axis of an array. For a cuboid, this is between the planes or across sub-matrices. For a matrix, this is between the rows or along the columns. A vector only has one axis, so both forms act in the same way.</p> </li> <li> <p>Match the following rank operands with their descriptions. Each use of rank (a to e) pairs with two of the 10 description boxes below.</p> <p><pre><code>   a    b    c    d     e\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u23641 3\u2502\u23642 1\u2502\u2364\u00af1\u2502\u23640 99\u2502\u236499 \u00af1\u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n<code>-----------------------------------------</code>\n\u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u2375\u2502 \u2502major cells of \u237a\u2502 \u2502vectors of \u237a\u2502\n\u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502major cells of \u2375\u2502 \u2502\u237a\u2502 \u25023D arrays of \u2375\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502major cells of \u2375\u2502 \u2502scalars of \u237a\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502matrices of \u237a   \u2502 \u2502vectors of \u2375    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> Answer <pre><code>a:     vectors of \u237a (\u23641 3)   3D arrays of \u2375\nb:    matrices of \u237a (\u23642 1)   vectors of \u2375\nc: major cells of \u237a (\u2364\u00af1)    major cells of \u2375\nd:     scalars of \u237a (\u23640 99)  \u2375\ne:                \u237a (\u236499 \u00af1) major cells of \u2375</code></pre> </li> <li> <p>For each name below, suggest the rank for arrays with that name.</p> <p><pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Scalar  \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Vector  \u2502rank-1              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Matrix  \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Table   \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502List    \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Cube    \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25024D array\u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022D array\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> Answer <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Scalar  \u2502rank-0              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Vector  \u2502rank-1              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Matrix  \u2502rank-2              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Table   \u2502rank-2              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502List    \u2502rank-1              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Cube    \u2502rank-3              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25024D array\u2502rank-4              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25022D array\u2502rank-2              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre> </li> <li> <p>Find the values of <code>j</code> and <code>k</code> in each of the two expressions below.</p> <pre><code>m \u2190 7 2\u23741 1 2 4 3 7 4 3 5 3 6 2 2 3</code></pre> <ol> <li> <p><pre><code>      0 10(\u00d7\u2364j k)m</code></pre> <pre><code>0 10\n0 40\n0 70\n0 30\n0 30\n0 20\n0 30</code></pre></p> </li> <li> <p><pre><code>      (2\u00d7\u23737)(+\u2364j k)m</code></pre> <pre><code> 3  3\n 6  8\n 9 13\n12 11\n15 13\n18 14\n16 17</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>(j k) \u2190 1</code></pre> <p> <li> <pre><code>(j k) \u2190 0 1</code></pre> <p> </p> </li> <li> <p>Rank Matching     Write a function <code>R1</code> which uses catenate <code>,</code> with the rank operator <code>\u2364</code> to merge a vector and matrix into a single 3D array.</p> <p><pre><code>      'ABC' R1 2 3\u2374\u23736</code></pre> <pre><code>A 1\nB 2\nC 3\n\u00a0\nA 4\nB 5\nC 6</code></pre></p> Hint <p>You can apply rank multiple times for a single function e.g. <code>F\u2364j\u2364k</code>.</p> Answer <pre><code>R1 \u2190 ,\u23640\u23641</code></pre> <p>When chaining multiple uses of the rank operator, think of doing multiple pairings \u2014 from the outside inwards. We have a vector of scalars <code>ABC</code>, and a matrix of rows of scalars <code>2 3\u2374\u23736</code>. The result wants to pair scalars from <code>\u237a</code> with scalars from <code>\u2375</code>. However, we cannot do this simply <code>F\u23640</code> because of our rank mismatch. What we can do is use rank once to pair up equivalent shapes, and then use rank 0. Therefore we have to pair rows (vectors, rank 1) first (outside) and then within each of those pairings, pair up our scalars (rank 0) inside.</p> <p><pre><code>      'ABC' ({\u237a\u2375}\u23640) 2 3\u2374\u23736</code></pre> <pre><code>RANK ERROR\n      'ABC'({\u237a \u2375}\u23640)2 3\u2374\u23736\n           \u2227</code></pre></p> <p><pre><code>      'ABC'({\u237a \u2375}\u23641)2 3\u2374\u23736</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502ABC\u25021 2 3\u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502ABC\u25024 5 6\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      'ABC'({\u237a \u2375}\u23640\u23641)2 3\u2374\u23736</code></pre> <pre><code>A 1\nB 2\nC 3\n\nA 4\nB 5\nC 6</code></pre></p> <p>It just so happens that stranding two scalars <code>{\u237a\u2375}</code> is the same as concatenating them <code>{\u237a,\u2375}</code>. For more complex arrays these will not be the same.</p> <p><pre><code>      'ABC'(,\u23640\u23641)2 3\u2374\u23736</code></pre> <pre><code>A 1\nB 2\nC 3\n\nA 4\nB 5\nC 6</code></pre></p> <p>Chaining multiple uses of rank goes from right-to-left, outer most pairing to innermost. That is, in <code>(,\u23640\u23641)</code>, we pair rows (<code>1</code>) outside and scalars (<code>0</code>) within our row pairings.</p> </li> <li> <p>Split k-cells     The split function <code>\u2193\u2375</code> splits an array of rank \u22652 by rows, returning an array of shape <code>\u00af1\u2193\u2374\u2375</code>. Use enclose <code>\u2282\u2375</code> with the rank operator <code>\u2364</code> to create a function <code>Split</code> which always splits an array into a nested vector of the major cells of <code>\u2375</code>.</p> <p><pre><code>      Split 3 2 2 3\u2374\u23739\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u25024 5 6\u25027 8 9\u2502\n\u25024 5 6\u25027 8 9\u25021 2 3\u2502\n\u2502     \u2502     \u2502     \u2502\n\u25027 8 9\u25021 2 3\u25024 5 6\u2502\n\u25021 2 3\u25024 5 6\u25027 8 9\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> Answer <pre><code>Split \u2190 \u2282\u2364\u00af1</code></pre> </li>"},{"location":"dyalog/cells-and-axes/#reduce-on-an-empty-vector","title":"Reduce on an empty vector?","text":"<p>For your interest, here are some reductions of note. Try to ask yourself why they give the results they do. Could they have been given different definitions?</p> <pre><code>      +/\u236c\n      \u00d7/\u236c\n      \u230a/\u236c\n      ,/'APPLE' 'DOG' 'BISCUIT'</code></pre> <p>As mentioned previously, more detailed treatments of the rank operator can be found in the Dyalog webinars on function rank.</p>"},{"location":"dyalog/dfns-and-assignment/","title":"Dfns and Assignment","text":""},{"location":"dyalog/dfns-and-assignment/#dfns","title":"Dfns","text":"<p>A dfn (pronounced \"dee-fun\" with a very short \"u\" sound) is a way of writing functions in APL. It starts and ends with curly braces <code>{}</code>, has a right argument <code>\u2375</code> (omega) and an optional left argument <code>\u237a</code> (alpha).</p> <pre><code>      3{\u237a}5      \u235d \u237a is the (optional) left argument\n3\n      {\u2375}'apl'   \u235d \u2375 is the right argument\napl\n      {\u237a}5       \u235d Calling a dyadic function monadically results in an error\nVALUE ERROR\n      {\u237a}5\n      \u2227\n      3{\u2375}       \u235d Calling a function without a right argument results in an error\nSYNTAX ERROR: Missing right argument\n      3{\u2375}\n       \u2227</code></pre> <p>From here, when functions are first introduced, <code>F\u2375</code> (\"eff omega\") denotes a monadic function <code>F</code> and <code>\u237aF\u2375</code> (\"alpha eff omega\") denotes a dyadic function.</p>"},{"location":"dyalog/dfns-and-assignment/#assignment","title":"Assignment","text":"<p>Names are assigned with the left arrow <code>name \u2190 expression</code>. We say \"name gets [function or array]\".</p> <p><pre><code>      one\u21901\n      three\u21903\n      equals\u2190=\n      plus\u2190+\n      four\u21904\n      four equals one plus three   \u235d 1 means true, 0 means false</code></pre> <pre><code>1</code></pre></p> <p>We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short.</p> <p>Read the following as \"squared numbers divided by the sum of squares\": <pre><code>      squared\u00f7+/squared\u2190\u00af1 0 1 2*2</code></pre> <pre><code>0.1666666667 0 0.1666666667 0.6666666667`</code></pre></p>"},{"location":"dyalog/dfns-and-assignment/#syntactic-name-class","title":"Syntactic name class","text":"<p>You may come across the following error:</p> <p><pre><code>      count \u2190 {+/\u2375}\n      count \u2190 {+/\u2375} 1 0 0 1 0 1 0</code></pre> <pre><code>SYNTAX ERROR: Invalid modified assignment, or an attempt was made to change nameclass on assignment\n      count\u2190{+/\u2375}1 0 0 1 0 1 0\n      \u2227</code></pre></p> <p>Things in APL have both a word and a number which identifies what type of thing it is. This is called its name class. So far we have met variables (nameclass 2) and functions (nameclass 3). There are more than these, but they will be introduced in relevant chapters.</p> <p>In Dyalog APL, if a name already has a function assigned, that same name cannot then be assigned an array value. Nor vice versa. If this happens, erase the name and try again.</p> <pre><code>      )ERASE count\n      count\u2190{+/\u2375}1 0 0 1 0 1 0\n      count\n3</code></pre> <p>What is this <code>)ERASE</code> thing?</p> <p>We have just used a system command. They are available while using the Dyalog interpreter or TryAPL interactively. However, they cannot be used inside functions and they are not standard APL syntax. In the section on system functions and system commands we will learn about things like showing a list of the currently defined names and how to erase names programmatically (there is a system function <code>\u2395EX</code>). In the meantime, we will introduce system functions and commands as needed.</p>"},{"location":"dyalog/dfns-and-assignment/#multiline-functions-and-the-editor","title":"Multiline functions and the editor","text":"<p>You can do quite a lot in a single line of APL. However, it is not long before you want to keep sequences of multiple statements available for re-use. Of course we can write functions which consist of multiple statements.</p> <p>The statement separator, <code>\u22c4</code> (diamond), allows us to write multiple APL statements in a single line. Some people think that it is more readable to spread multiple statements across multiple lines of a function. However, it is worth being aware that APL diamonds <code>\u22c4</code> are equivalent to newline characters in terms of execution. The following two definitions of the <code>Mean</code> function are equivalent.</p> <pre><code> Mean \u2190 {\n    sum \u2190 +/\u2375\n    count \u2190 \u2262\u2375\n    sum \u00f7 count\n }\n\n Mean \u2190 { sum \u2190 +/\u2375 \u22c4 count \u2190 \u2262\u2375 \u22c4 sum\u00f7count }</code></pre> <p>Separate statements are executed from left to right and top to bottom.</p> <p>To edit multiline functions in the IDE for Microsoft Windows and the RIDE, invoke the editor with the system command <code>)ED</code>. You can find a step-by-step example of creating a multiline function in the Dyalog editor in chapter 5 of Mastering Dyalog APL.</p> <p>On TryAPL, the current execution block can be continued on to a new line using Alt+Enter. The continuation line begins with a tab character. To execute the block, simply press Enter after your final line is typed. Here is an example defining a multiline dfn:</p> <ol> <li>Type <code>Sum \u2190 {</code> and press Alt+Enter</li> <li>Type <code>\u237a+\u2375</code> and press Alt+Enter</li> <li>Type <code>}</code> and press just Enter</li> <li>The function <code>Sum</code> is now defined in your workspace. Try the expression <code>3 Sum 4</code>.</li> </ol>"},{"location":"dyalog/dfns-and-assignment/#problem-set-2","title":"Problem set 2","text":"<p>The following problems can be solved with single-line dfns.</p> <ol> <li> <p>Eggs</p> <p>A recipe serving 4 people uses 3 eggs. Write the function <code>Eggs</code> which computes the number of eggs which need cracking to serve <code>\u2375</code> people. Using a fraction of an egg requires that a whole egg be cracked.</p> <p><pre><code>      Eggs 4</code></pre> <pre><code>3</code></pre></p> <p><pre><code>      Eggs 100</code></pre> <pre><code>75</code></pre></p> <p><pre><code>      Eggs \u237312</code></pre> <pre><code>1 2 3 3 4 5 6 6 7 8 9 9</code></pre></p> Answer <pre><code>Eggs \u2190 {\u2308\u2375\u00d73\u00f74}</code></pre> </li> <li> <p>Write a function <code>To</code> which returns integers from <code>\u237a</code> to <code>\u2375</code> inclusive.</p> <pre><code>      3 To 3\n3\n      3 To 4\n3 4\n      1 To 7\n1 2 3 4 5 6 7\n      \u00af3 To 5\n\u00af3 \u00af2 \u00af1 0 1 2 3 4 5</code></pre> <p>BONUS: What if <code>\u237a&gt;\u2375</code>? <pre><code>      3 To 5\n3 4 5\n      5 To 3\n5 4 3\n      5 To \u00af2\n5 4 3 2 1 0 \u00af1 \u00af2</code></pre></p> Answer <p>In the simple case, make sure to generate enough numbers and use <code>\u237a</code> as an offset: <pre><code>To \u2190 {\u237a+\u00af1+\u23731+\u2375-\u237a}</code></pre> In general we take into account whether the difference is positive or negative: <pre><code>To \u2190 {\u237a+(\u00d7d)\u00d7\u00af1+\u23731+|d\u2190\u2375-\u237a}</code></pre></p> </li> <li> <p>The formula to convert temperature from Celsius (\\(T_C\\)) to Fahrenheit (\\(T_F\\)) in traditional mathematical notation is as follows:</p> \\[T_F = {32 + {{9}\\over{5}}\\times {T_C}}\\] <p>Write the function <code>CtoF</code> to convert temperatures from Celcius to Farenheit. <pre><code>      CtoF 11.3 23 0 16 \u00af10 38\n52.34 73.4 32 60.8 14 100.4</code></pre></p> Answer <pre><code>CtoF \u2190 {32+\u2375\u00d79\u00f75}</code></pre> </li> <li> <p>Prime Time</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a dfn which returns <code>1</code> if its argument is prime and <code>0</code> otherwise.</p> <pre><code>          IsPrime 21\n0\n          IsPrime 17\n1\n</code></pre> Answer <p>There are several ways to code this, but the basic method is to count the number of divisors. <pre><code>IsPrime \u2190 {2=+/d=\u230ad\u2190\u2375\u00f7\u2373\u2375}\nIsPrime \u2190 {2=+/0=(\u2373\u2375)|\u2375}</code></pre></p> </li> </ol>"},{"location":"dyalog/error-handling-and-debugging/","title":"Error Handling and Debugging","text":"<p>This is an abridged treatment of error handling that covers key points. You will also find useful:</p> <ul> <li>Chapter 6 of Mastering Dyalog APL (Chapter E in the 2009 edition)</li> <li>Dyalog webinars on error handling</li> <li>The online documentation:<ul> <li>Error messages</li> <li>Stop controls</li> <li>Trace controls</li> <li>State indicator</li> </ul> </li> </ul>"},{"location":"dyalog/error-handling-and-debugging/#whats-in-a-name","title":"What's in a Name?","text":"<p>Study the following expression. It contains an error guard <code>::</code> and the primitive functions format <code>\u2355</code> and execute <code>\u234e</code>. </p> <pre><code>)ns Names                                          \u235d Create a namespace called Names      \nNames.va\u2190({2 6 11::0 \u22c4 \u234e(\u2395UCS \u2375),'\u2190',\u2355\u2375}\u00a8\u23731E4)~0   \u235d Valid Assignment Character Codes      </code></pre> <ol> <li> <p>Which three errors are trapped by the error guard? </p> </li> <li> <p><code>\u2395AV</code> is the list of characters which was used before Unicode was introduced.    How many valid assignment characters are in <code>\u2395AV</code>?</p> </li> <li> <p>When are digits <code>\u2395D</code> not allowed in names?</p> </li> <li> <p>Why is <code>9109 9054</code> printed to the session when the expression is run?</p> </li> <li> <p>Another way to find valid naming characters is to filter <code>\u2395AV</code> using <code>\u2395NC</code>.</p> <p><code>Names.ava\u2190\u2395AV/\u23680\u2264\u2395NC\u236a\u2395AV   \u235d \u2395AVU Valid Assignment Characters</code>   How do <code>Names.va</code> and <code>Names.ava</code> differ?</p> </li> </ol>"},{"location":"dyalog/error-handling-and-debugging/#error-messages-and-error-codes","title":"Error Messages and Error Codes","text":"<p>You will have executed expressions which have resulted in some error messages by now. In fact I am certain of it because some of the previous example expressions have been deliberately written containing errors.</p> <p><code>LENGTH ERROR</code> <code>VALUE ERROR</code> <code>DOMAIN ERROR</code> <code>SYNTAX ERROR</code></p> <p>If you are trapping specific errors, you might find it useful to assign error numbers to descriptive names. For example, <code>(INDEX RANK LENGTH VALUE)\u21903 4 5 6</code>. There are a number of similar techniques which can be used, some of which are described in the Dyalog webinar Error Handling - Part 1.</p> <ol> <li> <p>Find the error codes of the four error messages given above.</p> Hint <p>Try: <pre><code>      1 2+2 3\u2374\u23739   \u235d Write some expression to generate the error\n      \u2395\u2190\u2395EN        \u235d Inspect the Error Number of the last error\n      \u2395\u2190\u2395EM 4      \u235d Inspect the Error Message for that number</code></pre></p> <p>You can also search using APLcart</p> </li> <li> <p>Write a function <code>ERROR</code> which returns error numbers for in-built messages, given a simple character vector or nested vector of character vectors as argument.     <pre><code>      ERROR 'RANK'\n4\n      ERROR 'LENGTH' 'DOMAIN'\n5 11</code></pre></p> </li> </ol> <p>Note</p> <p>Technically, <code>\u2395EM</code> and <code>\u2395EN</code> are event message and event number respectively. Most of the time you will be concerned about error events, but other types of events exist as well.</p>"},{"location":"dyalog/error-handling-and-debugging/#suspend-your-disbelief","title":"Suspend your disbelief","text":"<p>When an error occurs in a multi-line function, the interpreter will pause execution and show the tracer.</p> <p><pre><code>     \u2207 r\u2190x Interlace y\n[1]    size\u21901 2\u00d7\u2374x    \n[2]    even\u21902\u00d7\u2373(\u2374x)[2]\n[3]    r[;even]\u2190y     \n[4]    r[;even]-1\u2190x   \n     \u2207   </code></pre> <pre><code></code></pre></p> <p><pre><code>      \u2395RL \u2190 73\n      \u2395\u2190forecast \u2190 10\u00d7?4 6\u237455</code></pre> <pre><code></code></pre></p> <p>              Fig 6.4 from Mastering Dyalog APL: Trace window in the RIDE          </p> <p>The state of your program is frozen in time. You can now:</p> <ul> <li>Inspect the values of variables</li> <li>Use <code>)SI</code>, <code>\u2395SI</code> or <code>\u2395XSI</code> to get a list of currently suspended functions</li> <li>Inspect or use the value of <code>\u2395DM</code> <code>\u2395DMX</code> to pass information about the error</li> <li>Edit the function to fix the issue<ul> <li>Either double click blank space or use Shift+Enter while the text cursor is on a blank space to turn the tracer into an editor</li> <li>Edit the code to fix the issue</li> <li>Press Esc or click the cross button \u2bbe to save these changes and return to the tracer</li> <li>Continue execution by either:<ul> <li>Press Enter to proceed one line at a time</li> <li>Click the trace action button to continue execution normally</li> <li>Type <code>\u2192\u2395LC</code> (go-to quad LC) to continue execution normally</li> </ul> </li> </ul> </li> </ul> <p>Sometimes it is better to execute a function line-by-line rather than wait for an error to occur. To do this, with the text cursor on the function-calling expression, either press Ctrl+Enter or click Action \u2192 Trace from the IDE menu.</p> <p>Executing, stepping into or editing a function with Enter, Ctrl+Enter and Shift+Enter can all be done while tracing through a suspended function.</p>"},{"location":"dyalog/error-handling-and-debugging/#cant-be-helped","title":"Can't be helped","text":"<p>If you cannot fix the error immediately and would just like to return to the session, use one of:</p> <ul> <li>Press Esc to exit the current function</li> <li>Enter <code>\u21920</code> into the session to exit the current function and resume the calling line</li> <li>Type <code>\u2192</code> (naked branch) into the session to clear the last call on the stack</li> <li>Enter <code>)RESET</code> or <code>)SIC</code> into the session to clear the entire execution stack and return to the session</li> </ul>"},{"location":"dyalog/error-handling-and-debugging/#gotta-trap-em-all","title":"Gotta :Trap 'em all","text":"<p>The keyword <code>:Trap ErrorNums</code> allows a function to specify behaviour if an error with a number in the scalar or vector <code>ErrorNums</code> occurs. It can be used in conjunction with <code>:Case N</code> to execute some code if the error number is <code>N</code> and <code>:Else</code> for the other errors. All errors are trapped with <code>:Trap 0</code>.</p> <p>For example:</p> <pre><code> :Trap 3 4 5 6 11\n    \u235d Code to execute here\n :Case 3\n     \u2395\u2190'Index Error'\n :CaseList 5 6 11\n     \u2395\u2190'Length, Value or Domain Error'\n :Else\n     \u2395\u2190'Rank Error'\n :EndTrap</code></pre>"},{"location":"dyalog/error-handling-and-debugging/#trap","title":"\u2395TRAP","text":"<p>Before <code>:Trap</code> and other similar control structures were introduced, <code>\u2395TRAP</code> was the way to set error trapping behaviour. Nowadays, most people will use control structures for visual clarity in their new code. However, <code>\u2395TRAP</code> is still used to maintain style in existing code bases, and for certain behaviours that are not possible with <code>:Trap</code>.</p> <p>For example, we can alter the behaviour when an error occurs in the session: <pre><code>      \u2395trap\u21905 'E' '''Silly!'''\n      1 2 + 3 4 5</code></pre> <pre><code>Silly!</code></pre></p> <p>Note</p> <p>Some errors, such as <code>SYSTEM ERROR</code>, are not trappable.</p> <p>Not only does the trap execute custom code when a <code>LENGTH ERROR</code> occurs, but it also prevents the tracer from automatically opening when such an error occurs in a function.</p> <p><pre><code>\n     \u2207 r\u2190l Lerror r\n[1]    l+r         \n     \u2207             \n\n      1 2 Lerror 3 4 5</code></pre> <pre><code>Silly!</code></pre></p> <p>However, those function calls are still suspended as can be seen using the state indicator:</p> <p><pre><code>      1 2 Lerror 3 4 5</code></pre> <pre><code>Silly!</code></pre></p> <p><pre><code>      )si</code></pre> <pre><code>#.Lerror[1]*\n#.Lerror[1]*</code></pre></p> <p>The 2nd element of an item in <code>\u2395TRAP</code> determines what happens to the call stack (this cannot be achieved with <code>:Trap</code>):</p> <p>E: execute expression named in the 3rd element</p> <p>C: cut back the stack to where <code>\u2395TRAP</code> is localised and then execute expression named in the 3rd element</p> <p><pre><code>      \u2395TRAP\u219011 'C' '(\u2191\u2395DM)'\n      Foo</code></pre> <pre><code>DOMAIN ERROR\nFoo[1] 1\u00f70  \n        \u2227   </code></pre></p> <p><pre><code>      0\u220a\u2374\u2395SI</code></pre> <pre><code>1</code></pre></p> <p>N: next - skip this error (no 3rd element)</p> <p>This is only meaningful if there is a trap 0 higher up the stack. It can be used for trapping every error except a specific one:</p> <pre><code>     \u2207 Trap6 x;\u2395TRAP                   \n[1]   \u235d Handle all but value errors    \n[2]    \u2395TRAP\u2190(6 'N')(0 'E' '\u2192ERROR')   \n[3]    \u234ex \u235d x contains a program to run\n[4]    \u21920                              \n[5]   ERROR:'Uh oh!'                   \n     \u2207    </code></pre> <p>S: stop - normal error handling (no 3rd element)</p> <p>This is typically used with a debugging switch:</p> <pre><code>\u2395TRAP\u2190(1+DEBUG)\u2283(0 'E' 'Bad')(0 'S')</code></pre> <p>Warning</p> <p>The E (execute immediately) action code is very tricky to use and best avoided. Prefer to use C, or even better, a <code>:Trap</code> control structure.</p> <p>Reset error trapping to default behaviour:  </p> <pre><code>      \u2395TRAP\u2374\u2368\u21900</code></pre> <p>In general, you assign a nested vector of 3-element vectors to <code>\u2395TRAP</code>, each of the form <code>(numbers 'X' 'string')</code>.</p>"},{"location":"dyalog/error-handling-and-debugging/#who-needs-to-know","title":"Who needs to know?","text":"<p>Errors can occur due to a mistakenly written piece of code. However, even a perfectly valid function can trigger errors if run with input which is outside of its domain.</p> <p>Note</p> <p>It is best not to rely on error trapping for behaviour, in part because future extensions to the language may introduce valid behaviours in those cases.</p> <p>You should test inputs explicitly using APL primitives. It can be tempting to use <code>:Trap 0</code> to force alternative behaviour for unexpected inputs. However, trapping all errors should only really be done in order for your application to fail safely for the sake of end users. Best practice is to think carefully about the properties of valid inputs to your functions, and signal errors or otherwise indicate to the user that an invalid input has been attempted.</p>"},{"location":"dyalog/error-handling-and-debugging/#pass-it-on","title":"Pass it on","text":"<p><code>\u2395DMX</code> is a system object containing information about the last occuring error. Recent versions of Dyalog can display its contents in a human-readable JSON format:</p> <pre><code>      (\u2395JSON\u2360'Compact' 0)\u2395DMX   </code></pre> <p>Note</p> <p>Your code should not assume that the properties in <code>\u2395DMX</code> will stay the same across versions of Dyalog. See the online documentation for more information about <code>\u2395DMX</code>.</p> <p>The system function <code>\u2395SIGNAL</code> can be used to generate errors. Errors may be signalled without a guilty expression, or custom error codes and messages may be signalled.</p> <p>Monadic <code>\u2395SIGNAL</code> can be used to provide custom values for <code>\u2395DMX</code>.</p> <pre><code>      \u2395SIGNAL\u2282('EN' 666)('Message' 'The Devil''s Error')('Vendor' 'Satan')</code></pre> <p>Dyadic <code>\u2395SIGNAL</code> can be used to conveniently set the event message and event number. Slightly confusingly, the <code>\u2395EM</code> event message is different from the error message member of the Diagnostic Message Extended: <code>\u2395DMX.Message</code> .</p> <pre><code>      'Yo!'\u2395SIGNAL 42\n      \u2395EM\n      \u2395DMX.Message</code></pre> <p>Error signalling can be used to provide custom error messages, as well as to prevent the application from suspending in the tracer, which can be confusing for end users of your application who do not know APL. You might prefer that user-facing functions trap and re-signal errors, whereas utilities intended for use by APLers in the session might be left to suspend on error.</p>"},{"location":"dyalog/error-handling-and-debugging/#error-number-ranges","title":"Error number ranges","text":"<p>Event numbers 1-99 are generated by APL.</p> <p>Event numbers 1-999 can be generated by the user.</p> <p>Error 0 means \"any error\".</p> <p>Errors 1001-1008 are interrupts (e.g. break).</p> <p>Error 1000 means \"any interrupt\".</p>"},{"location":"dyalog/error-handling-and-debugging/#trace","title":"\u2395TRACE","text":"<p>Specify line numbers within a function or operator to have the results of expressions on those lines output to the session when executed.</p> <p>Attempts to set trace controls in a locked function or operator (see <code>\u2395LOCK</code>) are ignored.</p>"},{"location":"dyalog/error-handling-and-debugging/#the-stack","title":"The stack","text":"<p>The execution stack (sometimes referred to as just the stack) is the accumulation of functions either suspended or currently mid-execution. It can be inspected using <code>)SI</code>, <code>\u2395SI</code> and <code>\u2395XSI</code>. If you attempt to run or re-run functions without having cleared the stack, then the stack simply builds up until the workspace is full.</p> <pre><code>      \u2395VR'Foo'\n     \u2207 Foo\n[1]    1\u00f70\n     \u2207    \n\n      Foo\nDOMAIN ERROR: Divide by zero\nFoo[1] 1\u00f70\n        \u2227\n\n      Foo\nDOMAIN ERROR: Divide by zero\nFoo[1] 1\u00f70\n        \u2227\n\n      )SI\n#.Foo[1]*\n#.Foo[1]*</code></pre> <p>There are a number of system variables to deal with functions on the stack:</p> <code>\u2395SI</code>The names of functions on the stack <code>\u2395LC</code>The line numbers at which each function is suspended <code>\u2395NSI</code>The namespaces prior to the call as character vectors <code>\u2395RSI</code>The namespaces prior to the call as scalar references <code>\u2395XSI</code>The full namespace paths of functions on the stack <code>\u2395STACK</code>The stack of functions and state descriptions <p>To get the same diagnostic error messages printed to the session without building up the stack, you can set <code>\u2395TRAP</code> to use a custom error reporting function:</p> <p><pre><code>     \u2207 Error                                                                             \n[1]    \u2395DMX.(OSError{\u2375,2\u233d(\u00d7\u2262\u2283\u236c\u23742\u233d\u237a,\u2282'')/'\") (\"',\u2283\u236c\u23742\u233d\u2286\u237a}Message{\u2375,\u237a,\u2368': '/\u2368\u00d7\u2262\u237a}\u2283\u236c\u2374DM,\u2282'')\n[2]    \u21911\u2193\u2395DMX.DM                                                                        \n     \u2207  </code></pre> <pre><code></code></pre></p> <p><pre><code>      \u2395TRAP\u21900 'C' '#.Error'\n      Foo</code></pre> <pre><code>DOMAIN ERROR: Divide by zero\nFoo[1] 1\u00f70\n        \u2227 </code></pre></p> <p><pre><code>      )SI\n</code></pre> <pre><code></code></pre></p> <p>The long, awkward expression in <code>Error</code> above can be found in APLcart.</p>"},{"location":"dyalog/error-handling-and-debugging/#problem-set-12","title":"Problem set 12","text":""},{"location":"dyalog/error-handling-and-debugging/#help-im-trapped","title":"Help I'm Trapped","text":"<p>Here we will write a simple calculator program to divide two vector arguments. When the function fails it should return to the session and leave the stack empty, but the values of <code>\u2395DM</code> and <code>\u2395EN</code> should change.</p> <ol> <li> <p>Write a program (a tradfn called <code>Divide</code>) which explicitly tests its input and signals an appropriate error for invalid arguments. </p> </li> <li> <p>Rewrite the program as a tradfn called <code>DivideQ</code> which uses <code>\u2395TRAP</code> instead of testing its arguments.</p> </li> <li> <p>Rewrite the program as a tradfn called <code>DivideC</code> which uses <code>:Trap</code>.</p> </li> <li> <p>Rewrite the program as a dfn <code>DivideD</code> with error guards.</p> </li> </ol> <p>Example output:</p> <pre><code>      1 2 3 Divide ,5\n0.2 0.4 0.6\n      3 Divide ,4\nRANK ERROR: Must have both vector arguments\n      3 Divide,4\n        \u2227\n      1 2 Divide 1 2 3 \nLENGTH ERROR: Mismatched left and right argument shapes\n      1 2 Divide 1 2 3\n          \u2227\n      1 2 Divide 1 0\nDOMAIN ERROR: Divide by zero\n      1 2 Divide 1 0\n          \u2227      </code></pre>"},{"location":"dyalog/error-handling-and-debugging/#prefix-agreement-operator","title":"Prefix agreement operator","text":"<p>Leading axis agreement is a proposed extension to scalar extension which will automatically apply dyadic functions between cells when the leading axes of two arrays match.</p> <pre><code>      2 3 \u00d7_L 2 3\u2374\u23736\n 2  4  6\n12 15 18</code></pre> <p>If the leading axis lengths do not match at all, then the operator will issue an error. Write a version of the prefix agreement operator <code>_L</code> which manually checks whether the argument shapes have a matching prefix, and signals a custom error otherwise.</p> <pre><code>      2 3\u00d7_L 1 3\u2374\u23736\nLEADING AXIS MISMATCH\n      2 3\u00d7_L 1 3\u2374\u23736\n         \u2227\n      \u2395EN\n5</code></pre> Hint <p>If you are not sure how to write the functionality of the leading axis operator, use the definition from the APL Wiki article:</p> <p><pre><code>{\u237a \u237a\u237a\u2364(-\u237a\u230a\u2365(\u2262\u2374)\u2375)\u22a2\u2375}</code></pre></p>"},{"location":"dyalog/error-handling-and-debugging/#testing-for-types","title":"Testing for types","text":"<p>Use the documentation and your own knowledge to find expressions to test for the following properties of arrays:</p> <ol> <li>Numeric arrays</li> <li>Character arrays</li> <li>Integers</li> <li>Simple arrays (non-nested)</li> <li>Uniformly nested arrays</li> <li>Scalars, vectors and matrices</li> <li>Singleton values</li> <li>Namespace references</li> <li>Namespace names as character arrays</li> <li> <p>Symmetric matrices</p> </li> <li> <p>In general, you assign a nested vector of 3-element vectors to <code>\u2395TRAP</code>, each of the form <code>(numbers 'X' 'string')</code>. </p> <p>In terms of its structure, what happens to the value of <code>\u2395TRAP</code> if you only assign a single 3-element vector?</p> </li> </ol>"},{"location":"dyalog/error-handling-and-debugging/#can-you-fix-it","title":"Can you fix it?","text":"<p>This scripted namespace defines a toy app to read a UTF-8 text file and convert its data to hexadecimal representation.</p> <pre><code>:Namespace app\n\n    file\u2190'/tmp/file.txt'\n\n    \u2207 Main\n      Hex file\n    \u2207\n\n    \u2207 hex\u2190Hex file;bytes;\u2395TRAP\n      bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\n      hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes\n    \u2207\n\n:EndNamespace</code></pre> <p>The author of the function modifies it to exhibit certain error handling behaviours. Unfortunately, their code has bugs. Investigate the following scenarios and try to solve the issues.</p> <ol> <li> <p>The author has set up error trapping. They are aware of a potential <code>FILE NAME ERROR</code>, but have also set up a global trap in case any unexpected errors occur.</p> <pre><code>:Namespace app\n\n    file\u2190'/tmp/file.txt'\n\n    \u2207 Main;\u2395TRAP\n      \u2395TRAP\u21900 'E' 'Report \u22c4 \u21920'\n      Hex file\n    \u2207\n\n    \u2207 hex\u2190Hex file;bytes\n      \u2395TRAP\u219022 'C' '\u2192ERROR'\n      bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\n      hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes\n      \u21920\n\n     ERROR:\n      Report\n    \u2207\n\n    \u2207 Report\n      error\u2190\u2191\u2395DM\n      \u2395\u2190'An error occurred. See app.error for more information.'\n    \u2207\n\n:EndNamespace\n</code></pre> <p>Unfortunately, the function suspends with an unexpected <code>VALUE ERROR</code>.</p> <pre><code>VALUE ERROR: Undefined name: ERROR\n      \u2192ERROR\n       \u2227\n</code></pre> <p>After modifying the code, the function should print to the session:</p> <pre><code>      app.Main\nAn error occurred. See app.error for more information.\n</code></pre> <p>The variable <code>app.error</code> should be populated:</p> <pre><code>      \u2395\u2190app.error\nFILE NAME ERROR                        \nHex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\n                           \u2227\n</code></pre> </li> <li> <p>Now that the file name error is handled, they want to test the application using a file. Paste the following into a text editor and save it somewhere. Update <code>app.file</code> to point to the correct location.</p> <pre><code>sample text\n</code></pre> <p>Running <code>app.Main</code> reveals either 1 or 2 more bugs:</p> <ul> <li>Running the function now results in an <code>INDEX ERROR</code>.</li> <li>The global trap did not catch the <code>INDEX ERROR</code>.</li> </ul> <p>Fix the remaining bugs. The application should successfully convert the file now:</p> <pre><code>      app.Main\n73 61 6D 70 6C 65 20 74 65 78 74\n</code></pre> </li> <li> <p>Finally, the author decides it would be more useful if <code>app.error</code> contained more information about the error, and also that the <code>Report</code> function should display this directly in the session as well.</p> <pre><code>:Namespace app\n\n    file\u2190'/tmp/file.txt'\n\n    \u2207 Main;\u2395TRAP\n      \u2395TRAP\u21900 'E' 'Report {\u2375(\u234e\u2375)}\u00a8\u2395NL\u00af2 \u22c4 \u21920'\n      Hex file\n    \u2207\n\n    \u2207 hex\u2190Hex file;bytes\n      \u2395TRAP\u219022 'C' '\u2192ERROR'\n      bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\n      hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes\n      \u21920\n\n     ERROR:\n      Report\u2282'file' file\n    \u2207\n\n    \u2207 Report names_values\n      error\u2190\u2282\u2191\u2395DM\n      error,\u2190\u2282\u2191names_values\n      \u2395\u2190'An error occurred. Error information in app.error:'\n      \u2395\u2190error\n    \u2207\n\n:EndNamespace\n</code></pre> <ol> <li>Turn <code>]box -fns=on</code></li> <li> <p>Reinstate the <code>FILE NAME ERROR</code> and run <code>app.Main</code> again.</p> <pre><code>      app.Main\nAn error occurred. Error information in app.error:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502FILE NAME ERROR                        \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502Hex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\u2502\u2502file\u2502/tmp/file.txt\u2502\u2502\n\u2502                           \u2227           \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Reinstate the <code>INDEX ERROR</code> and run <code>app.Main</code> again at least twice. </p> <ol> <li>What do you notice about <code>app.error</code>?</li> <li>Try to solve this issue. There is more than one valid solution.</li> </ol> </li> </ol> </li> </ol>"},{"location":"dyalog/finding-and-replacing-values/","title":"Finding and Replacing Values","text":""},{"location":"dyalog/finding-and-replacing-values/#searching-and-finding","title":"Searching and finding","text":"<p>It is common to make multiple equality comparisons. Doing this one at a time becomes tedious.</p> <p><pre><code>      text \u2190 'This is my sentence'\n      (text='a')\u2228(text='e')\u2228(text='i')\u2228(text='o')\u2228(text='u')</code></pre> <pre><code>0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1</code></pre></p> <p>The membership function returns a Boolean array (<code>1</code>s and <code>0</code>s) of the same shape as <code>\u237a</code> where <code>1</code> indicates the location of any of the elements in <code>\u2375</code>.</p> <p><pre><code>      text\u220a'aeiou'</code></pre> <pre><code>0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1</code></pre></p> <p><pre><code>      text \u2190 2 6\u2374'I LIKE APL  '\n      text\u220a'AEIOU'</code></pre> <pre><code>1 0 0 1 0 1\n0 1 0 0 0 0</code></pre></p> <p>Find <code>\u237a\u2377\u2375</code> will give a <code>1</code> indicating the location of the first element of <code>\u237a</code> when the entire array <code>\u237a</code> is found as a subarray in <code>\u2375</code>.</p> <p><pre><code>      y \u2190 2 10\u2374'APPLESLESSMOTIONSLOW'\n      'LESS'\u2377y</code></pre> <pre><code>0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 0 0 0</code></pre></p> <p><pre><code>      'LESION'\u2377y</code></pre> <pre><code>0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0</code></pre></p> <p><pre><code>      (2 3\u2374'LESION')\u2377y</code></pre> <pre><code>0 0 0 1 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0</code></pre></p> <p>Index of <code>\u237a\u2373\u2375</code> will return the index in <code>\u237a</code> where <code>\u2375</code> is found as a major cell.</p> <p><pre><code>      text \u2190 2 3 4\u2374'SOME APPLES'\n      text\u220a'LESS'</code></pre> <pre><code>1 0 0 1\n0 0 0 0\n1 1 1 1\n\n0 0 1 0\n0 0 0 1\n1 1 1 0</code></pre></p> <p><pre><code>      'LESS'\u2377text</code></pre> <pre><code>0 0 0 0\n0 0 0 0\n1 0 0 0\n\n0 0 0 0\n0 0 0 0\n0 0 0 0</code></pre></p> <p><pre><code>      (1\u2337text)\u2373'LESS'</code></pre> <pre><code>3</code></pre></p> <p>For subarrays not found in <code>\u237a</code>, index-of returns <code>1+\u2262\u237a</code>.</p> <pre><code>      'keep'\u2373'qwert'\n5 5 2 5 5</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#sorting-and-grouping","title":"Sorting and grouping","text":"<p>To sort, index by the grade.</p> <p><pre><code>      Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375}\n      Sort 'the alphabet'</code></pre> <pre><code> aabeehhlptt</code></pre></p> <p>Grouping is an incredibly common operation when handling data. The python \"dataframe\" framework Pandas has a groupby function and anybody who has used SQL is likely to be familiar with this idea.</p> <p>The key operator applies its operand function to groups of major cells corresponding to the unique major cells in <code>\u2375</code>. For a vector, this is the unique list of elements.</p> <p>In the monadic case, <code>\u2375</code> is a list of indices.</p> <pre><code>      {\u237a,\u2282\u2375}\u2338'mississippi'\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502m\u25021       \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502i\u25022 5 8 11\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502s\u25023 4 6 7 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502p\u25029 10    \u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre> <p>In the dyadic case, it is a list of keys which are provided as <code>\u237a</code>.</p> <pre><code>      \u2191'ABBDDDCDBAA' 'mississippi'\nABBDDDCDBAA\nmississippi\n\n      'ABBDDDCDBAA'{\u237a,\u2282\u2375}\u2338'mississippi'\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502A\u2502mpi \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502B\u2502isp \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502D\u2502sisi\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2524\n\u2502C\u2502s   \u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2518</code></pre> <p>Interval index is a function for classifying data by boundaries.</p> <p>See if you can write the <code>Grade</code> function from problem set 3, problem 6 using interval index <code>\u237a\u2378\u2375</code>.</p> Answer <pre><code>Grade \u2190 {'FDCBA'[0 65 70 80 90\u2378\u2375]}</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#set-functions","title":"Set functions","text":"<p>Those familiar with set theory from traditional mathematics will recognise the following symbols. The APL functions are closely related to their set theory counterparts.</p> <p>The union of two vectors contains elements from <code>\u237a</code> catenated with elements in <code>\u2375</code> not found in <code>\u237a</code>.</p> <pre><code>      'WASH' \u222a 'SHOUT'\nWASHOUT</code></pre> <p>The intersection contains elements only found in both.</p> <pre><code>      'WASH' \u2229 'SHOUT'\nSH</code></pre> <p>The function without removes elements from <code>\u237a</code> which are found in <code>\u2375</code>.</p> <p>The set difference is then neatly expressed as a fork of the union without the intersection.</p> <pre><code>      'WASH' (\u222a~\u2229) 'SHOUT'\nWAOUT</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#assigning-to-arrays","title":"Assigning to arrays","text":""},{"location":"dyalog/finding-and-replacing-values/#indexed-assignment","title":"Indexed Assignment","text":"<p>Assign values at specified indices.</p> <pre><code>t\u21904 4\u2374'some sample text'\nt[\u2378t\u220a'aeiou']\u2190'!'</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#selective-assignment","title":"Selective Assignment","text":"<p>Most ways of selecting from arrays can be used to change values in an array. Here is an example using compress:</p> <p><pre><code>      a \u2190 2 3\u2374\u2395A\n      (1 0\u233fa)\u2190'\u233a'\n      a</code></pre> <pre><code>\u233a\u233a\u233a\nDEF</code></pre></p>"},{"location":"dyalog/finding-and-replacing-values/#modified-assignment","title":"Modified Assignment","text":"<p>Experiment with the following expressions, paying particular attention to the <code>name f\u2190 array</code> construct.</p> <pre><code>salaries\u219018250 42500 56000 57250 48640\ncodes\u2190'ACDDC'\nsalaries\u00d7\u21901.1\nsalaries[\u2378codes='C']\u00d7\u21901.0\n\na\u2190\u2395A\n(3\u2191a),\u2190'abcd'</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#the-at-operator","title":"The At operator","text":"<p>Monadic functions take a single right argument array as input. Dyadic functions take two argument arrays.</p> <p>Monadic operators take a single left operand which can be a function or an array (as in <code>+/</code> where plus <code>+</code> is the function operand and reduce <code>/</code> is the operator). </p> <p>Dyadic operators take two operands which could be functions or arrays depending on the operator's definition. For example, the rank operator <code>F\u2364k</code> takes a function left operand <code>F</code> and array right operand vector <code>k</code> of up to 3 elements.</p> <p>Selective and indexed assignment methods will change the values of variables. The \"at\" operator <code>@</code> merges two arrays at specified indices and returns a new array.</p> <p>If a function right operand returns a boolean array when applied to <code>\u2375</code> (e.g. <code>3=1 3 5</code>) then ones <code>1</code> in the boolean array determine where scalars of <code>\u237a</code> are inserted.</p> <p><pre><code>      ('\u2206\u2365'@{\u2375\u220a'AEIOU'})2 3\u2374'DYALOG'</code></pre> <pre><code>DY\u2206\nL\u2365G</code></pre></p> <p><pre><code>      (' '@2 3 4)'DYALOG'</code></pre> <pre><code>D   OG</code></pre></p> <p><pre><code>      (' '@(1 2)(1 3)(2 1))2 3\u2374'DYALOG'</code></pre> <pre><code>D  \n OG</code></pre></p> <p>Generally, the left operand to <code>@</code> is a function applied to scalars in <code>\u2375</code> which are specified by a right operand that is either an array of scalar (simple or enclosed vector) indices or a boolean array returned by a right operand function. An array left operand is shorthand for a constant function that returns the array.</p> <pre><code>      Upper \u2190 1\u2218\u2395C\n      {Upper@{\u00af1\u233d' '=\u2375}' ',\u2375}'my excellent heading'\n My Excellent Heading</code></pre>"},{"location":"dyalog/finding-and-replacing-values/#strand-assignment","title":"Strand Assignment","text":"<p>Distributed assignment or strand assignment allows multiple names to be defined using a single assignment arrow <code>\u2190</code>.</p> <pre><code>      (max min avg)\u2190{(\u2308\u233f\u2375)(\u230a\u233f\u2375)((+\u233f\u00f7\u2262)\u2375)}3 1 4 1 5</code></pre> <p>Note</p> <p>Strand assignment does not require names to be parenthesised, but we strongly recommend it for clarity.</p> <p>We can assign items in <code>nest</code> to the three variables <code>s\u2190'A'</code> <code>v\u21901 2 3</code> and <code>m\u21903 3\u2374\u23739</code> using a single assignment arrow.</p> <pre><code>      nest\u2190('A'(1 2 3))(3 3\u2374\u23739)\n      ((s v) m)\u2190nest</code></pre> <p>Warning</p> <p>You might have some issues when using inline, modified or strand assignment in dfns. This is by design, but can be a source of confusion. <pre><code>      { a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a }\u236c\n3\n      a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a\n6</code></pre></p> <p>You can get around these problems by writing <code>\u2218\u22a2</code> to the immediate right of any function involved: <pre><code>      { a\u21903 \u22c4 f\u2190+ \u22c4 a f\u2218\u22a2\u21903 \u22c4 a }\u236c\n6</code></pre></p> <p>You might find it best to simply keep the modification explicit: <pre><code>      { a\u21903 \u22c4 f\u2190+ \u22c4 a\u2190a+3 \u22c4 a }\u236c\n6</code></pre></p>"},{"location":"dyalog/finding-and-replacing-values/#problem-set-6","title":"Problem set 6","text":"<ol> <li> <p>Write a function test if there are any vowels <code>'aeiou'</code> in text vector <code>\u2375</code></p> <p><pre><code>      AnyVowels 'this text is made of characters'</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      AnyVowels 'bgxkz'</code></pre> <pre><code>0</code></pre></p> Answer <p>We can use membership to see which elements of our argument belong to the set <code>'aeiou'</code>. Then we can then ask if there are any <code>1</code>s in the Boolean vector:</p> <pre><code>AnyVowels \u2190 {\u2228/\u2375\u220a'aeiou'}</code></pre> <p>An easy eay to check for any ones in a high rank Boolean array is to use membership:</p> <pre><code>AnyVowels \u2190 {1\u220a\u2375\u220a'aeiou'}</code></pre> </li> <li> <p>Write a function to count the number of vowels in its character vector argument <code>\u2375</code></p> <p><pre><code>      CountVowels 'this text is made of characters'</code></pre> <pre><code>9</code></pre></p> <p><pre><code>      CountVowels 'we have twelve vowels in this sentence'</code></pre> <pre><code>12</code></pre></p> Answer <p>Counting the <code>1</code>s in the Boolean result of membership <code>\u237a\u220a\u2375</code> counts the vowels.</p> <pre><code>CountVowels \u2190 {+/\u2375\u220a'aeiou'}</code></pre> </li> <li> <p>Write a function <code>FoundIn</code> which accepts a nested scalar or vector of character vectors and returns a <code>1</code> where each vector contains letters in the simple character vector <code>\u237a</code>.</p> <p><pre><code>      'ei' FoundIn 'Katie' 'Bob' 'Stephen' 'Jessica' 'Andy'</code></pre> <pre><code>1 0 1 1 0</code></pre></p> Answer <p>One solution is to bind <code>\u237a</code> to the membership function (<code>\u220a\u2218\u237a</code>) to form a monadic function \"contains alpha\" which can be applied on each vector in our nested argument.</p> <pre><code>FoundIn \u2190 {\u2228/\u00a8\u220a\u2218\u237a\u00a8\u2375}</code></pre> </li> <li> <p>Write a function <code>Clean</code> that changes all non-digits into stars.</p> <p><pre><code>      Clean 'Easy as 1, 2 and 3'</code></pre> <pre><code>********1**2*****3</code></pre></p> <p><pre><code>      Clean '1000'</code></pre> <pre><code>1000</code></pre></p> <p><pre><code>      Clean 'APL works!'</code></pre> <pre><code>**********</code></pre></p> Answer <p>We cannot assign to <code>\u2375</code> in a dfn, so we must create an intermediate variable name:</p> <pre><code> Clean \u2190 {\n    r\u2190\u2375 \u22c4 d\u2190~\u2375\u220a\u2395D\n    (d/r)\u2190'*'\n    r\n }</code></pre> <p>We can provide a function right operand to the at operator which checks for non-digits:</p> <pre><code>Clean \u2190 '*'@(~\u220a\u2218\u2395D)</code></pre> </li> <li> <p>The following expression contains an error:  </p> <p><pre><code>      ('\u2206\u2365'@1)2 3\u2374'DYALOG'</code></pre> <pre><code>LENGTH ERROR\n      ('\u2206\u2365'@1)2 3\u2374'DYALOG'\n      \u2227</code></pre></p> <p>Change the parenthesised function containing <code>@</code> so that it gives the following results:  </p> <ol> <li> <pre><code>\u2206\u2206\u2206\nLOG</code></pre> </li> <li> <pre><code>\u2206\u2206\u2206\n\u2365\u2365\u2365</code></pre> </li> </ol> Answers <p><ol> <li> <p><pre><code>      ('\u2206'@1)2 3\u2374'DYALOG'</code></pre> <pre><code>\u2206\u2206\u2206\nLOG</code></pre></p> <p> <li> <p><pre><code>      ((2 3\u23743/'\u2206\u2365')@1 2)2 3\u2374'DYALOG'</code></pre> <pre><code>\u2206\u2206\u2206\n\u2365\u2365\u2365</code></pre></p> <p> </p> </li> <li> <p>Create a function <code>ReplaceHead</code> which returns its left argument vector <code>\u237a</code>, but with the first <code>\u2374\u2375</code> elements replaced with the contents of <code>\u2375</code>.</p> <p><pre><code>      'apple' ReplaceHead 'Eat'</code></pre> <pre><code>Eatle</code></pre></p> <p><pre><code>      'apple' ReplaceHead 'rang'</code></pre> <pre><code>range</code></pre></p> <p><pre><code>      'apple' ReplaceHead 'ENTERPRISE'</code></pre> <pre><code>ENTER</code></pre></p> Answers <p>This solution uses indexed assignment:</p> <pre><code>ReplaceHead \u2190 {r\u2190\u237a \u22c4 s\u2190(\u2262\u237a)\u230a\u2262\u2375 \u22c4 r[\u2373s]\u2190s\u2191\u2375 \u22c4 r}</code></pre> <p>This solution uses the over operator <code>F\u2365G</code> to express the minimum length of <code>\u237a</code> and <code>\u2375</code>. It then uses the at operator to do the substitution.</p> <pre><code>ReplaceHead \u2190 {s\u2190\u237a\u230a\u2365\u2262\u2375 \u22c4 (s\u2191\u2375)@(\u2373s)\u22a2\u237a}</code></pre> </li> <li> <p>Bus stops in a town are labelled A to E. Define a function RouteMatrix which returns a Boolean matrix where <code>1</code>s indicate that buses go from one bus stop to the next.</p> <p><pre><code>      RouteMatrix 'BE' 'C' 'AE' 'BCE' 'A'</code></pre> <pre><code>0 0 1 0 1\n1 0 0 1 0\n0 1 0 1 0\n0 0 0 0 0\n1 0 1 1 0</code></pre></p> <p><pre><code>      'ABCDE'\u236aRouteMatrix 'C' 'CDE' 'ABDE' 'E' 'B'</code></pre> <pre><code>A B C D E\n0 0 1 0 0\n0 0 1 0 1\n1 1 0 0 0\n0 1 1 0 0\n0 1 1 1 0</code></pre></p> Answer <pre><code>RouteMatrix \u2190 {'ABCDE'\u2218.\u220a\u2375}</code></pre> </li>"},{"location":"dyalog/loops-and-recursion/","title":"Loops and Recursion","text":"<p>Looping is an incredibly basic and fundamental programming construct which you will notice we have barely used at all so far. Or at least, we haven't used many explicit loops.</p> <p>Terminology</p> <p>The type of looping over items in a collection as provided by for and while loops is sometimes referred to as scalar looping. Other types of looping in APL might, for example, process each row of a matrix in turn but process whole rows at a time. In contrast, each <code>\u00a8</code> is a mechanism for looping over every item of an array (the scalars); its operand function can see arrays nested within the scalars.</p>"},{"location":"dyalog/loops-and-recursion/#an-introduction-to-an-introduction-to-an-introduction-to-an-introduction-to-an-int","title":"An introduction to an introduction to an introduction to an introduction to an int...","text":"<pre><code>      {\u237a\u21901 1 \u22c4 \u2375=2:\u237a \u22c4 (\u237a,(+/\u00af2\u2191\u237a))\u2207\u2375-1}</code></pre> <p>Try the dfn above with various numeric arguments and consider the following questions:</p> <ol> <li>Which symbol refers to the function itself? </li> <li>Which symbol separates expressions? </li> <li>Which part represents a conditional? This is where one part of code executes only if a preceding statement is true.</li> <li>What is the default left argument? What happens if you call this function dyadically?</li> </ol> <p>Give the function an appropriate name.</p> <p>When a function calls itself like this it is called recursion. APL tends to rely less on explicit iteration and recursion than most popular programming languages, but it is good to be able to do it when you need to.</p> <p>If a function gets stuck in an infinite loop, use <code>Action \u2192 Interrupt</code> in the menu. You can also use the key combination <code>Ctrl+Break</code> to interrupt a running function.</p> <ol> <li> <p>Write the shortest dfn which causes infinite recursion.</p> </li> <li> <p>Write the shortest dfn which causes infinite recursion unless its argument is <code>0</code>.</p> </li> <li> <p>The factorial function multiplies integers up to <code>\u2375</code>. Write the factorial function as a recursive dfn called <code>Factorial</code>. Use the primitive <code>!\u2375</code> factorial function to check your solution. </p> </li> <li> <p>Write an expression for the factorial function as a reduction (an expression which includes <code>f/</code> for some function <code>f</code>).</p> </li> </ol>"},{"location":"dyalog/loops-and-recursion/#a-sort-of-detour","title":"A sort of detour","text":"<p>Dyalog's grade-up <code>\u234b</code> and grade-down <code>\u2352</code> functions are able to sort any array. However, it is interesting and useful to look at other approaches to sorting.</p> <p>Here is a function 'NSort' for sorting numeric lists.</p> <pre><code>      NSort\u2190{0=\u2374\u2375:\u236c \u22c4 (U/\u2375),\u2207(~U\u2190\u2375=\u230a/\u2375)/\u2375}</code></pre> <p>Try <code>NSort</code> with some numeric arguments. Here it is presented piece-by-piece. For each comment prompt <code>\u235d</code>, write a brief description of what that part of the function does. The first one has been done for you.</p> <pre><code>      NSort\u2190{\n             0=\u2374\u2375:\u236c                         \u235d Reached end of list, return empty numeric vector\n                    \u22c4                       \u235d \n                      (U/\u2375),                \u235d \n                            \u2207               \u235d\n                             (~U\u2190\u2375=\u230a/\u2375)     \u235d\n                                       /\u2375   \u235d\n                                         }</code></pre> <p>Below is a function <code>TSort</code> for sorting character matrices.</p> <pre><code>      TSort\u2190{\u237a[((\u2374\u2375)[2])S \u237a\u2373\u2375]}\n      S\u2190{\u237a=0:\u2375 \u22c4 (\u237a-1)S \u2375[\u234b\u2375[;\u237a];]}</code></pre> <p>Examine <code>TSort</code> and replace <code>\u237a</code> below with an appropriate left argument to sort the character matrix <code>WORDS</code>.</p> <pre><code>      WORDS\u2190\u2191'DOLPHIN' 'BRACKEN' 'SAUCER' 'MAGNET' 'FLOP'\n      \u237a TSort WORDS\nBRACKEN\nDOLPHIN\nFLOP   \nMAGNET \nSAUCER </code></pre> <p>What do the following expressions tell you about the <code>\u234b</code> grade-up and <code>\u2352</code> grade-down functions on high-rank arrays?</p> <pre><code>      \u234b4 2 2\u2374'ABDCAADCBCDECDEF'\n2 1 3 4\n      \u23524 2 2\u2374'ABDCAADCBCDECDEF'\n4 3 1 2</code></pre>"},{"location":"dyalog/loops-and-recursion/#you-have-the-power","title":"You have the power","text":"<p>One common type of iteration is to apply the same function again to the result of the previous application. In traditional mathematics, this is expressed with superscript notation:</p> <p>\\(f(x) = 1 + x\\) Increment \\(p(x,y) = f^y(x)\\) Add \\(m(x,y) = p^y(x,0)\\) Multiply</p> <p>We can express this with the power operator:</p> <pre><code>      Inc\u2190{1+\u2375}\n      Plus\u2190{(Inc\u2363\u237a)\u2375}\n      Times\u2190{\u237a(Plus\u2363\u2375)0}\n      Power\u2190{\u237a(Times\u2363\u2375)1}</code></pre>"},{"location":"dyalog/loops-and-recursion/#primitive-iterations-are-still-loops","title":"Primitive iterations are still loops","text":"<p>You might have noticed this already, but it is important to know that the rank operator <code>F\u2364j k l</code> is conceptually a loop. It just happens to be that certain operations are parallelisable, and some of those are parallelised within the Dyalog interpreter.</p> <p>We will give some details later in the section on performance.</p>"},{"location":"dyalog/loops-and-recursion/#reduction-is-a-loop","title":"Reduction is a loop","text":"<p>Primitive reductions are often optimised. For example, plus-reduction <code>+/</code> is able to take advantage of vector instructions on certain machines and and-reduction <code>\u2227/</code> can quit early if a zero is found in the array.</p> <p>We can observe differences by writing a custom function and comparing runtimes: <pre><code>      ]runtime +/?1e7\u23740\n\n* Benchmarking \"+/?1e7\u23740\"\n             (ms) \n CPU (avg):    94 \n Elapsed:      99 \n\n\n\n      ]runtime {\u237a+\u2375}/?1e7\u23740\n\n* Benchmarking \"{\u237a+\u2375}/?1e7\u23740\"\n             (ms) \n CPU (avg):  3688 \n Elapsed:    3723 </code></pre></p>"},{"location":"dyalog/loops-and-recursion/#moving-windows","title":"Moving windows","text":"<p>Windowed-reduction <code>\u237a F/ \u2375</code> is an extension to reduction which applies an F-reduction <code>F/</code> for a function <code>F</code> on a sliding window of size <code>\u237a</code>.</p> <p>It is useful to use catenate to display the windowed selection of the array to which the reduction will be applied: <pre><code>      3,/\u237310</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2 3\u25022 3 4\u25023 4 5\u25024 5 6\u25025 6 7\u25026 7 8\u25027 8 9\u25028 9 10\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      3+/\u237310</code></pre> <pre><code>6 9 12 15 18 21 24 27</code></pre></p> <p>You can think of this as a special case of stencil code, for which the primitive operator stencil <code>\u233a</code> was added in version 16.0.</p> <p><pre><code>      1\u2193\u00af1\u2193{+/\u2375}\u233a3\u22a2\u237310</code></pre> <pre><code>6 9 12 15 18 21 24 27</code></pre></p>"},{"location":"dyalog/loops-and-recursion/#dont-forget-scan","title":"Don't forget scan!","text":"<p>Scan <code>F\\\u2375</code> is another construct which is simple in a way that misleads you into thinking it is only used for very specific things. It is exactly a reduction <code>F/</code> on successive prefixes of <code>\u2375</code>. The final value is <code>F/\u2375</code>.</p> <pre><code>      +/\u237310\n55\n      +\\\u237310\n1 3 6 10 15 21 28 36 45 55\n\n      \u2308\\2 0 3 \u00af1 4 2 6\n2 2 3 3 4 4 6</code></pre> <p>However, scan can be used in many scenarios that you might not expect. Scans are often used in high performance expressions of partitioned-application functions which nowadays can be implemented with partitioning primitives (<code>\u237a\u2282\u2375</code> and <code>\u237a\u2286\u2375</code>), nested arrays and the each operator <code>F\u00a8</code>. </p> <p>For example, one YouTube video comparing APL and Haskell demonstrates one of the big differences in the APL approach in contrast to other types of programming. </p> <p><pre><code>      4 {1\u2193\u220a' '\u2218,\u00a8\u237a\u2191' '(\u2260\u2286\u22a2)\u2375} 'take the first four words'</code></pre> <pre><code>take the first four</code></pre></p> <p><pre><code>      4 {\u2375\u233f\u2368\u237a&gt;+\\' '=\u2375} 'take the first four words'</code></pre> <pre><code>take the first four</code></pre></p> <p>Despite both having types of function composition, Haskell and other functional programming languages tend to focus on the composition of those functions as the fundamental process to finding and refining solutions. In APL, we are usually most interested in the fundamental data transformation that is occurring, and using APL's inherently parallel, array-at-a-time primitives to achieve that transformation in a way that can tend towards simple and fast code.</p> <p>Between integer and boolean arguments alone there are more interesting constructs than can be covered well here. You can find more on this topic by going to the following links:  </p> <ul> <li>Watch the Dyalog webinar about Boolean Scans and Reductions</li> <li>Experiment with the examples in an interactive notebook on TryAPL</li> <li>You can view the static notebook online</li> </ul>"},{"location":"dyalog/loops-and-recursion/#for-and-while","title":"For and While","text":"<p>The traditional control structures such as for loops, while loops and if statements weren't introduced in Dyalog until version 8.0 in 1996. Usually, they are only used for program control on the outer levels, or if an algorithm explicitly requires that type of scalar looping.</p> <p>The syntax is mentioned in the section on user-defined functions.</p> <p>Performance note</p> <p>When constructing loops, think about whether unnecessary computation is being performed.</p> <p>For example,</p> <p><pre><code>:While LikelyToBeFales\n:AndIf ExpensiveTest</code></pre></p> <p>is probably better than</p> <p><pre><code>:While LikelyToBeFales\u2227ExpensiveTest</code></pre></p> <p>You will also often see:</p> <p><pre><code>:While PreCondition\n:AndIf OnlyComputableIfPreCondition</code></pre></p>"},{"location":"dyalog/loops-and-recursion/#problem-set-8","title":"Problem set 8","text":""},{"location":"dyalog/loops-and-recursion/#word-problems","title":"Word Problems","text":"<p>We are going to do some text processing on a dictionary of words. </p> <p>If you have access to the internet, paste the following into your session to download a text file dictionary (917kB in size) and store it as a nested vector of character vectors named <code>words</code>.</p> <pre><code>]Get bit.ly/unixwords\nwords \u2190 (\u2395UCS 10)(\u2260\u2286\u22a2)unixwords</code></pre> <p>If you have the file on your computer (maybe it was given to you on a USB drive, for example) then you can load it into your workspace from disk using the following expressions.</p> <pre><code>(content encoding newline) \u2190 \u2395NGET'/path/to/words.txt'\nwords \u2190 (\u2395UCS newline) (\u2260\u2286\u22a2) content</code></pre> <p>Now answer the following questions about <code>words</code>.</p> <ol> <li> <p>How many words have at least 3 <code>'e'</code>s in them?</p> </li> <li> <p>How many words have exactly two consecutive <code>'e'</code>s in them?      The first three such words are <code>Aberdeen</code> <code>Abderdeen's</code> and <code>Aileen</code>.</p> </li> <li> <p>What is the shortest word with two consecutive <code>'a'</code>s?</p> </li> <li> <p>What words have three consecutive double letters? For example, <code>mississippi</code> does not but <code>misseetto</code> does. Misseetto is not a real word.</p> <p>A palindrome is the same when reversed. For example, racecar is a palindrome but racecat is not.</p> </li> <li> <p>How many palindromes are there in <code>words</code>?</p> </li> <li> <p>Which palindrome in <code>words</code> is the longest?</p> </li> <li> <p>How many words are in alphabetical order?</p> </li> </ol>"},{"location":"dyalog/loops-and-recursion/#bell-numbers","title":"Bell Numbers","text":"<p>A Bell number counts the possible partitions of a set. The nth Bell number \\(B_n\\) counts the ways you can partition a set of \\(n\\) elements.</p> <p>Here we will investigate 3 ways of computing Bell numbers.</p> <ol> <li> <p>Brute force</p> <p>Write a function <code>BellBrute</code> which counts all of the unique partitions of length <code>\u2375</code> by creating partitions as nested arrays.</p> Hint <p>Binary representations of decimal numbers can be used as partition vectors.</p> </li> <li> <p>Triangle scheme</p> <p>Implement the triangle scheme for calculations.</p> </li> <li> <p>Recurrence relation of binomial coefficients     The Bell numbers satisfy a recurrence relation involving binomial coefficients:</p> <p>\\(B_{n+1} = \\sum_{k=0}^{n}\\binom{n}{k}B_k\\)</p> <p>Implement <code>BellRecur</code> using this formula.</p> </li> </ol>"},{"location":"dyalog/loops-and-recursion/#four-is-magic","title":"Four is Magic","text":"<p>Rosetta Code has the full problem description.</p> <p>Start with a number. Spell that number out in words, count the number of letters and say it all aloud. For example, start with 6, print <code>'Six is three'</code> and continue with the number 3. Once you reach 4, print <code>four is magic</code>. </p> <pre><code>      FourMagic 11\nEleven is six, six is three, three is five, five is four, four is magic.</code></pre>"},{"location":"dyalog/loops-and-recursion/#hash-counting-string","title":"Hash counting string","text":"<p>This problem is from week 102 of the Perl Weekly Challenge.</p> <p>Write a monadic function <code>HashCount</code> which takes a scalar integer argument and returns a simple character vector where:</p> <ul> <li>the string consists only of digits 0-9 and octothorpes AKA hashes, \u2018#\u2019</li> <li>there are no two consecutive hashes: \u2018##\u2019 does not appear in your string</li> <li>the last character is a hash</li> <li>the number immediately preceding each hash (if it exists) is the position of that hash in the string, with the position being counted up from 1</li> </ul> <pre><code>      HashCount 1\n#\n      HashCount 2\n2#\n      HashCount 3\n#3#\n      HashCount 10\n#3#5#7#10#\n      HashCount 14\n2#4#6#8#11#14#</code></pre>"},{"location":"dyalog/loops-and-recursion/#backspace","title":"Backspace","text":"<p>Write a function <code>Backspace</code> which takes a simple numeric vector argument and treats <code>0</code>s like backspaces, removing successive numbers to their left unless none remain.</p> <pre><code>      Backspace 1 2 0\n1\n      Backspace 1 5 5 0 2 0 0 8\n1 8</code></pre> <p>For an extra challenge, modify your function so that it can also accept a character vector where <code>\\b</code> is treated as a single token and signifies a backspace character.</p>"},{"location":"dyalog/multidimensional-and-nested-arrays/","title":"Multidimensional and Nested Arrays","text":""},{"location":"dyalog/multidimensional-and-nested-arrays/#arrays-are-made-of-arrays","title":"Arrays are made of arrays","text":"<p>You might have already noticed some awkwardness when we tried to represent a list of names as a character matrix. The main problem being that names do not usually have uniform length!</p> <p><pre><code>      student \u2190 4 7\u2374'Kane   Jonah  JessicaPadma  '\n      student = ' '</code></pre> <pre><code>0 0 0 0 1 1 1\n0 0 0 0 0 1 1\n0 0 0 0 0 0 0\n0 0 0 0 0 1 1</code></pre></p> <p>Any code using this representation is going to have to be aware of the trailing space characters. This can be an efficient representation of this data, but it can sometimes be more convenient to have a real nested structure to deal with.</p> <p><pre><code>      2 3\u2374(1 2)(3 4 5)('AB')(2 2\u2374'CDEF')</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2\u25023 4 5\u2502AB   \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502CD \u25021 2  \u25023 4 5\u2502\n\u2502EF \u2502     \u2502     \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>How do I get those boxes around my output?</p> <p>Turn boxing on with the user command <pre><code>    ]Box on\nWas OFF</code></pre> Boxing affects the display of output in the APL session, but does not affect the structure or values of arrays in any way.</p> <p>In general, arrays are made of arrays. More specifically, the individual elements of any array are scalar - but they may lie along zero or more axes.</p> <p>How can we fit an arbitrary array as a single element in another array? We have to somehow package it up as one of these scalars.</p> <p>The example above uses a special notation to implicitly wrap each sub-array in a scalar. We have actually used it many times already. Stranding notation is a convenient notation for writing vectors by having arrays separated by spaces or parentheses. Above we wrote parenthesised APL expressions which evaluate to arrays, but we could have written the names of some pre-defined arrays instead.</p> <p><pre><code>      a \u2190 1 2\n      b \u2190 3 4 5\n      c \u2190 'AB'\n      d \u2190 2 2\u2374'CDEF'\n      2 3 \u2374 a b c d</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2\u25023 4 5\u2502AB   \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502CD \u25021 2  \u25023 4 5\u2502\n\u2502EF \u2502     \u2502     \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>We can reshape the result of an expression, without naming it, by using the enclose function <code>\u2282\u2375</code>.</p> <p><pre><code>      3\u2374\u2282'Hello'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Hello\u2502Hello\u2502Hello\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p>"},{"location":"dyalog/multidimensional-and-nested-arrays/#arrays-have-rank-and-depth","title":"Arrays have rank and depth","text":"<p>Nested arrays have depth, which is different to rank in APL. Rank is the number of dimensions an array has (scalar 0, vector 1, matrix 2 etc.) whereas depth is how many arrays are inside our arrays.</p> <p>The depth function <code>\u2261\u2375</code> returns the depth of an array. The absolute value of depth <code>|\u2261\u2375</code> is the level of nesting, starting at 0 for simple scalars.</p> <p><pre><code>      \u2261'a'  \u235d Simple scalar has depth 0</code></pre> <pre><code>0</code></pre></p> <p><pre><code>      \u2261x    \u235d Simple matrix has depth 1</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      \u2262\u2374x   \u235d Simple matrix has rank 2</code></pre> <pre><code>2</code></pre></p> <p><pre><code>      \u2261\u2282x   \u235d Enclosing increases the depth</code></pre> <pre><code>2</code></pre></p> <p><pre><code>      \u2261\u2282\u2282x</code></pre> <pre><code>3</code></pre></p> <p><pre><code>      \u2261\u2282\u2282\u2282x</code></pre> <pre><code>4</code></pre></p> <p>Negative depth indicates uneven nesting:</p> <pre><code>      \u2261(1 2)(3 4)         \u235d Evenly nested arrays have positive depth\n2\n      \u2261(1 2)(3 4 (4 5))   \u235d Unevenly nested arrays have negative depth\n\u00af3</code></pre> <p>If you have a complex structure like this, you can use the each operator <code>F\u00a8\u2375</code> to keep drilling down until you feel you have a better understanding.</p> <pre><code>      nv \u2190 (1 2)(3 4 (4 5))\n      nv\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u25021 2\u2502\u250c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2510\u2502\n\u2502   \u2502\u25023\u25024\u25024 5\u2502\u2502\n\u2502   \u2502\u2514\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n      \u2374nv     \u235d 2-element vector\n2\n      \u2261nv     \u235d Unevenly nested\n\u00af3\n\n      \u2374\u00a8nv    \u235d 2 vectors of lengths 2 and 3\n\u250c\u2500\u252c\u2500\u2510\n\u25022\u25023\u2502\n\u2514\u2500\u2534\u2500\u2518\n      \u2261\u00a8nv    \u235d 1st element is simple, 2nd is unevenly nested\n1 \u00af2\n\n      \u2374\u00a8\u00a8nv   \u235d 2nd element appears to be made of 2 scalars followed by a vector\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u252c\u2510\u2502\u250c\u252c\u252c\u2500\u2510\u2502\n\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u25022\u2502\u2502\n\u2502\u2514\u2534\u2518\u2502\u2514\u2534\u2534\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2261\u00a8\u00a8nv   \u235d 2nd element is 2 simple scalars and a non-nested array\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020 0\u25020 0 1\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre> <p>So we can tell we have a 2 element nested vector. The 1st element is a simple 2-element vector. The 2nd element contains 2 simple scalars and a simple vector of length 2.</p> <p>Tip</p> <p>The <code>]Repr</code> (represent) user command can provide an APL expression which evaluates to almost any given array:</p> <p><pre><code>      mysterious_value \u2190 2 4\u2218.\u2374\u22825 6 7\n      ]repr mysterious_value</code></pre> <pre><code>(5 6) (5 6 7 5)</code></pre></p>"},{"location":"dyalog/multidimensional-and-nested-arrays/#arrays-are-made-of-scalars","title":"Arrays are made of scalars","text":"<p>Arrays in APL are always made of scalars (rank-0 arrays) as their elements.</p> <p>So the vector <code>1 2 3</code> is made of three scalar numbers, and <code>2 3\u2374\u2395A</code> is made of 6 scalar characters arranged in a table with 2 rows with 3 columns.</p> <p>A simple scalar is a single character, a single number or a single namespace reference. Enclosing simple scalars is a no-op (it does not do anything):</p> <pre><code>      3 \u2261 \u2282\u2282\u2282\u2282\u2282\u22823\n1</code></pre> <p>But enclosing an array allows us to include it as part of another array:</p> <p><pre><code>      x \u2190 2 3\u2374\u2395A   \u235d x is a simple matrix\n      3\u2374x          \u235d Reshape uses the elements within</code></pre> <pre><code>ABC</code></pre></p> <p><pre><code>      3\u2374\u2282x         \u235d Enclosing turns the whole array into an element</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502ABC\u2502ABC\u2502ABC\u2502\n\u2502DEF\u2502DEF\u2502DEF\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p>"},{"location":"dyalog/multidimensional-and-nested-arrays/#the-shape-of-a-scalar","title":"The shape of a scalar","text":"<p>What is the shape of <code>46.2</code>? Here are some common incorrect answers.</p> <p><code>4</code>?</p> <p>No, the shape of the character vector <code>'46.2'</code> is four, but that is not the same as the scalar number <code>46.2</code> - see problem set 3 - problem 2 from the previous section.</p> <p><code>1</code>?</p> <p>Not quite. The tally <code>\u2262\u2375</code> gives <code>1</code>, but the shape function <code>\u2374\u2375</code> only returns <code>1</code> for a 1-element vector. <code>46.2</code> is not a vector, it is a scalar.</p> <p><code>0</code>?</p> <p>This would be the shape of a 0-element vector.</p> <p>To get to the answer, it helps to think about the rank as well. The rank is simply the number of dimensions.</p> <p><pre><code>      \u2374\u2374\u00af1 0 1\u2218.\u00d7\u23735     \u235d A matrix has two dimensions</code></pre> <pre><code>2</code></pre></p> <p><pre><code>      \u2374\u2374'ABCDE'         \u235d A vector has just one dimension</code></pre> <pre><code>1</code></pre></p> <p><pre><code>      \u2374\u2374'A'             \u235d How many dimensions does a scalar have? </code></pre> <pre><code>0</code></pre></p> <p>If the result of <code>\u2374'A'</code> is an array with shape <code>0</code> - that means that the shape of a scalar is an empty vector. To be specific, it is an empty numeric vector. This empty numeric vector can also be represented by the symbol zilde (<code>\u236c</code>), which is a zero (<code>0</code>) combined with a tilde (<code>~</code>). When executed, it displays as a blank line.</p> <p><pre><code>      \u236c</code></pre> <pre><code>\n</code></pre></p> <p><pre><code>      ]display \u236c</code></pre> <pre><code>\u250c\u2296\u2510\n\u25020\u2502\n\u2514~\u2518</code></pre></p> <p>The tally is a scalar whereas the shape is a vector</p> <p>You might have noticed that the tally <code>\u2262\u2375</code> always returns one number, whereas the shape <code>\u2374\u2375</code> may return several. The tally of an array is a scalar representing the length of the first (leading) axis. For a matrix, this is the number of rows.</p> <p>The shape returns a vector which describes the length of each axis. Whether there are five axes or no axes, the result of <code>\u2374\u2375</code> is always a vector.</p>"},{"location":"dyalog/multidimensional-and-nested-arrays/#simple-array-selection","title":"Simple array selection","text":"<p>When you have a collection of data represented as an array, you often want to use only some subset of the data. There are a few selection methods in APL, and there is a section dedicated to them. Here we show two constructs which can be used to select any sub-array from any array.</p> <p><pre><code>      a \u2190 2 3 4\u2374\u2395A\n      a</code></pre> <pre><code>ABCD\nEFGH\nIJKL\n\nMNOP\nQRST\nUVWX</code></pre></p> <p>When we have an array of rank &gt; 1, selections along each axis are separated by semicolons:</p> <p><pre><code>      a[1 2;2 3;3 4]</code></pre> <pre><code>GH\nKL\n\nST\nWX</code></pre></p> <p>Omitting a specification selects from that entire axis:</p> <p><pre><code>      a[;2 3;3 4]</code></pre> <pre><code>GH\nKL\n\nST\nWX</code></pre></p> <p>Indexing expressions always return a collection of scalars. If we want to obtain the array nested inside of a scalar, we can use the first function <code>\u2283\u2375</code> to disclose the contents of that scalar.</p> <p><pre><code>      n \u2190 2 3\u23741 (2 3) 'abc' (2 2\u2374(1 2)3 4 5) 'ghi' 'k'\n      n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u25021      \u25022 3\u2502abc\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2510\u2502ghi\u2502k  \u2502\n\u2502\u25021 2\u25023\u2502\u2502   \u2502   \u2502\n\u2502\u251c\u2500\u2500\u2500\u253c\u2500\u2524\u2502   \u2502   \u2502\n\u2502\u25024  \u25025\u2502\u2502   \u2502   \u2502\n\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2518\u2502   \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</code></pre></p> <p>With <code>]Box on</code>, we can see that our selection of the element in the 2nd row and 2nd column is a nested array of some kind.</p> <p><pre><code>      n[2;2]</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2510\n\u2502ghi\u2502\n\u2514\u2500\u2500\u2500\u2518</code></pre></p> <p>After disclosing, we are left with a simple character vector.</p> <p><pre><code>      \u2283n[2;2]</code></pre> <pre><code>ghi</code></pre></p> <p>Clearly, selecting subarrays in this way can become tedious, laborious and even onerous. One of the code smells in a line of APL is typically too much code, so of course there are other methods to select from arrays in various ways depending on your use case. These are covered in the section on selecting from arrays. However, between these two techniques you will be able to obtain any piece of any array, even if it takes a few steps to get what you want.</p>"},{"location":"dyalog/multidimensional-and-nested-arrays/#problem-set-4","title":"Problem set 4","text":"<ol> <li> <p>Write the function <code>Backwards</code> which accepts a nested vector of character vectors as its argument and reverses both the order of elements and the contents of each vector within.     <pre><code>      Backwards 'reverse' 'these' 'words'\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502sdrow\u2502eseht\u2502esrever\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> Answer <p>You can write reverse and reverse-each in either order. <pre><code>Backwards \u2190 {\u233d\u00a8\u233d\u2375}\nBackwards \u2190 {\u233d\u233d\u00a8\u2375}</code></pre></p> </li> <li> <p>Write a monadic function <code>Join</code> which joins a nested vector of character vectors <code>\u2375</code> into a single, non-nested character vector in which elements from <code>\u2375</code> are separated by the character scalar <code>,</code> (comma).</p> <p><pre><code>      Join 'join' 'these' 'words'</code></pre> <pre><code>join,these,words</code></pre></p> <p>BONUS Can you write <code>Join</code> as a dyadic function which accepts a separator scalar as <code>\u237a</code>?</p> <p><pre><code>      ' ' Join 'join' 'these' 'words'</code></pre> <pre><code>join these words</code></pre></p> <p><pre><code>      '|' Join 'join' 'these' 'words'</code></pre> <pre><code>join|these|words</code></pre></p> Answer <p>We can define a dyadic function which catenates two character vectors with a comma:</p> <pre><code>{\u237a,',',\u2375}</code></pre> <p>We can then apply this using the reduction operator on a list of character vectors:</p> <p><pre><code>      {\u237a,',',\u2375}/'join' 'these' 'words'</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502join,these,words\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>Because the rank of the result of a reduction is always one less than the rank of the argument, a vector argument (rank 1) must cause a scalar (rank 0) result. That is why our result is a nested scalar which contains a character vector. To get our desired simple character vector, we disclose this result.</p> <p><pre><code>      \u2283{\u237a,',',\u2375}/'join' 'these' 'words'</code></pre> <pre><code>join,these,words        </code></pre></p> <p>You might think to wrap this expression to make a dfn, and that is also valid, but you do not need to:</p> <p><pre><code>      Join \u2190 {\u2283{\u237a,',',\u2375}/\u2375}\n      Join \u2190 \u2283{\u237a,',',\u2375}/\n      Join 'join' 'these' 'words'</code></pre> <pre><code>join,these,words</code></pre></p> <p>Writing functions in this way is called tacit definition. It usually looks better without raw dfn definitions inside in this author's opinion.</p> <pre><code>Join \u2190 \u2283(\u22a3,',',\u22a2)/</code></pre> <p>You might have found it difficult to define the dyadic version because dfns can only accept two arguments. The trick is to use assignment to make a temporary name for our joining character.   </p> <p><pre><code>      Join \u2190 {s\u2190\u237a \u22c4 \u2283{\u237a,s,\u2375}/\u2375}\n      '|' Join 'join' 'these' 'words'</code></pre> <pre><code>join|these|words</code></pre></p> <p>We can even make an ambivalent function by assigning to <code>\u237a</code>. In the monadic case, we will join with a comma.</p> <p><pre><code>      Join \u2190 {\u237a\u2190',' \u22c4 s\u2190\u237a \u22c4 \u2283{\u237a,s,\u2375}/\u2375}\n      Join 'join' 'these' 'words'</code></pre> <pre><code>join,these,words</code></pre></p> <p><pre><code>      '|' Join 'join' 'these' 'words'</code></pre> <pre><code>join|these|words</code></pre></p> </li> <li> <p>Create a variable <code>nest</code> which has the following properties</p> <p><pre><code>      \u2374nest</code></pre> <pre><code>2 3</code></pre></p> <p><pre><code>      \u2261nest</code></pre> <pre><code>\u00af2</code></pre></p> <p><pre><code>      \u2374\u00a8nest</code></pre> <pre><code>\u250c\u2500\u252c\u252c\u2500\u2510\n\u2502 \u2502\u25022\u2502\n\u251c\u2500\u253c\u253c\u2500\u2524\n\u25023\u2502\u25026\u2502\n\u2514\u2500\u2534\u2534\u2500\u2518</code></pre></p> <p><pre><code>      ]display \u220anest</code></pre> <pre><code>\u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502I 3 am 1 5 8 amatrix\u2502\n\u2514+\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p><pre><code>      \u2374\u220anest</code></pre> <pre><code>14</code></pre></p> Answer <p>We have a 2 row, 3 column matrix. It is unevenly nested with a maximum depth of 2. In ravel order there are: two scalars; a 2-element vector; a 3-element vector; a scalar; and a 6-element vector.</p> <p>We can lay out the simple scalar elements of the array in a simple vector using the enlist function.</p> <p>We can then see that there are 14 scalar elements in total. This makes sense given the description above.</p> <pre><code>14 = +/1 1 2 3 1 6</code></pre> <p>Therefore, our ravel of elements is <code>'I' 3 'am' (1 5 8) 'a' 'matrix'</code>. The definition of <code>nest</code> is:</p> <pre><code>nest \u2190 2 3\u2374'I' 3 'am' (1 5 8) 'a' 'matrix'</code></pre> </li> <li> <p>Try to work out the shapes of the results of the following expressions by hand, without executing them.</p> <ol> <li><code>'APL IS COOL'</code></li> <li><code>\u00af1 0 1 \u2218.\u00d7 1 2 3 4 5</code> </li> <li><code>1 2 3 4\u2218.+\u00af1 0 1\u2218.\u00d71 10</code></li> <li><code>+/\u23734</code></li> </ol> Answers <p><ol> <li>This is a simple character vector with \\(11\\) characters, including space characters, so its shape is <code>11</code>. <pre><code>      \u2374'APL IS COOL'\n11</code></pre> </li> <p><li>This is a matrix. The result of multiplying all combinations of elements from a 3-element vector and a 5-element vector is a 3 by 5 matrix. It has 3 rows and 5 columns, so its shape is <code>3 5</code>. <p><pre><code>      \u00af1 0 1 \u2218.\u00d7 1 2 3 4 5</code></pre> <pre><code>\u00af1 \u00af2 \u00af3 \u00af4 \u00af5\n0  0  0  0  0\n1  2  3  4  5</code></pre></p> <p><pre><code>      \u2374\u00af1 0 1 \u2218.\u00d7 1 2 3 4 5</code></pre> <pre><code>3 5</code></pre></p> <p>If you swap the arguments around, you get a \\(5\\) by \\(3\\) matrix.</p> <p><pre><code>      1 2 3 4 5 \u2218.\u00d7 \u00af1 0 1</code></pre> <pre><code>\u00af1 0 1\n\u00af2 0 2\n\u00af3 0 3\n\u00af4 0 4\n\u00af5 0 5</code></pre></p> </li> <p><li>This is a 3D array of shape <code>4 3 2</code>. The shape of the result of applying a function using the outer product operator is the concatenation of the shapes of the arguments. <p>The first (rightmost) outer product takes a \\(3\\)-element vector and a \\(2\\)-element vector and returns a \\(3\\) by \\(2\\) matrix. This becomes the right argument to the next outer product which takes a \\(4\\)-element vector on its left to result in a \\(4\\)-plane, \\(3\\)-column, \\(2\\)-row multidimensional array.</p> <p><li>This is a scalar. The reduce operator <code>F/</code> has the effect of reducing the rank of its argument array by 1. Since we have a vector (rank 1) input, we must have a scalar (rank 0) output.</li></p> </li>"},{"location":"dyalog/selecting-from-arrays/","title":"Selecting from Arrays","text":"<p>In an array-oriented language, perhaps it's no surprise that there are umpteen ways to select values from arrays. There are also many ways to modify or assign values within arrays.</p> <p>The exact terminology can vary between array languages, and even APLers use these words interchangeably sometimes. However, on this page we will say that:</p> <ul> <li>Scalars (0-cells) are the things returned by indexing expressions</li> <li>Elements (or items) are the arrays inside of scalars. For a simple scalar this is the same thing! Remember enclosing and diclosing scalars before?.</li> </ul> <p>These notes summarise the different constructs available. There is also a Dyalog webinar dedicated to selecting from arrays.</p>"},{"location":"dyalog/selecting-from-arrays/#square-bracket-indexing","title":"Square bracket indexing","text":"<p>This is the type of indexing we have been using so far. For vectors, it is very intuitive:</p> <pre><code>      'LE CHAT'[6 4 1 2 3 5 6]\nTHE CAT</code></pre> <p>For higher rank arrays, we can return rectangular sub-arrays by separating the indices into each axis by semicolons:</p> <pre><code>      (2 3 4\u2374\u2395A)[1 2;1 3;1 4]   \u235d The corner elements of the cuboid\nAD\nIL\n\nMP\nUX</code></pre> <ol> <li>What happens if you omit an axis? For example, <code>array[3;4 5;;]</code>?</li> <li>What happens if you use too many or too few semicolons?</li> </ol>"},{"location":"dyalog/selecting-from-arrays/#squad-aka-functional-indexing","title":"Squad (A.K.A. \"Functional\") indexing","text":"<p>Square-bracket indexing requires you to know the exact rank of the array and have the correct number of semicolons in your indexing expression. You might also notice that it is a special or anomalous syntax.</p> <p>There is also an index function <code>\u237a\u2337\u2375</code> which has two distinctions:</p> <ul> <li>It is a function with the same syntax as other functions</li> <li>It applies to any rank array by automatically filling in less-major cells (those cells defined by trailing axes)</li> </ul> <p><pre><code>      (1 2)(2 3)\u2337(2 3 4\u2374\u2395A)</code></pre> <pre><code>EFGH\nIJKL\n\nQRST\nUVWX</code></pre></p> <p><pre><code>      (2 3 4\u2374\u2395A)[1 2;2 3;]</code></pre> <pre><code>EFGH\nIJKL\n\nQRST\nUVWX</code></pre></p>"},{"location":"dyalog/selecting-from-arrays/#take-and-drop","title":"Take and drop","text":"<p>We can chop off the edges of an array using take <code>\u237a\u2191\u2375</code> and drop <code>\u237a\u2193\u2375</code>. <pre><code>      \u00af1 3 2\u21912 3 4\u2374\u2395A</code></pre> <pre><code>MN\nQR\nUV</code></pre></p> <p><pre><code>      1 0 \u00af2\u21932 3 4\u2374\u2395A </code></pre> <pre><code>MN\nQR\nUV</code></pre></p> <p>Note</p> <p>While similar subarrays can be retrieved using indexing, take or drop, note that take and drop return arrays of the same rank as their argument. <pre><code>      \u2262\u23741 1\u21912 3 4\u2374\u2395A \n3\n      \u2262\u23741 1\u23372 3 4\u2374\u2395A \n1</code></pre></p>"},{"location":"dyalog/selecting-from-arrays/#simple-indexing","title":"Simple indexing","text":"<p>The selection of rectangular sub-arrays as demonstrated above using square brackets <code>[]</code> and squad <code>\u2337</code> is also known as simple indexing.</p>"},{"location":"dyalog/selecting-from-arrays/#choose-indexing","title":"Choose indexing","text":"<p>Simple indexing with square brackets uses scalars or vectors separated by semicolons. Index using square brackets and a nested array of numeric vectors and we can select any collection of scalars:</p> <p><pre><code>      (2 3 4\u2374\u2395A)[(1 1 1)(2 1 4)(1 3 4)]</code></pre> <pre><code>APL</code></pre></p> <p>An interesting relationship appears between indices into an array and indices into its ravel when <code>\u2395IO\u21900</code>:</p> <p><pre><code>      \u2395IO\u21900\n      (2 3 4\u2374\u2395A)[\u2193[0]2 3 4\u22a40 15 11]</code></pre> <pre><code>APL</code></pre></p> <p><pre><code>      \u2395A\u2337\u2368\u22822 3 4\u22a5\u2191[0](0 0 0)(1 0 3)(0 2 3)</code></pre> <pre><code>APL</code></pre></p>"},{"location":"dyalog/selecting-from-arrays/#reach-indexing","title":"Reach indexing","text":"<p>Indexing into an array will retrieve some cell of an array. If it is a nested array, then selecting a scalar will return an enclosed array. Sometimes what you actually want is the item inside of that scalar.</p> <p>While it is common and perfectly valid to simply use first <code>\u2283\u2375</code> to disclose the contents of a scalar, the pick function <code>\u237a\u2283\u2375</code> can be used to retrieve the element directly: <pre><code>      3\u2337'here' 'are' 'some' 'words'   \u235d With ]Boxing on\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502words\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n      3\u2283'here' 'are' 'some' 'words'\nwords</code></pre></p> <p>Reach indexing allows you to pull items from deep within a nested array: <pre><code>      (2 1)(2 2) \u2283 2 3\u23740 1 2 (2 3\u2374'AB' 'CD' 'EF' 'GH' 'IJ' 'KL') 4 5\nIJ</code></pre></p>"},{"location":"dyalog/selecting-from-arrays/#select-from","title":"Select / From","text":"<p>Some APLers find squad-index semantics awkward, and have proposed yet another mechanism, called select or from. It can be defined as: <pre><code>      I\u2190(\u2283\u2364\u22a3\u2337\u22a2)\u23640 99</code></pre></p> <p>Select provides the best of both simple indexing and choose indexing, allowing you to select arbitrary collections of cells.</p> <p>Warning</p> <p>Select is a very general and convenient function, but it is potentially much slower than using the in-built indexing constructs. We provide it here for completeness and your interest.</p>"},{"location":"dyalog/selecting-from-arrays/#so-which-type-of-indexing-do-i-use","title":"So which type of indexing do I use?","text":"<p>Over time you will learn from experience what is the most appropriate thing to use in different situations. However, here is a rough guide:</p> Selection type Selection construct Arbitrary scalars from a vector Square bracket simple or compress Rectangular subarrays Simple Arbitrary scalars from an array of rank \u22652 Choose Nested arrays Reach Arbitrary collections of cells Select"},{"location":"dyalog/selecting-from-arrays/#problem-set-7","title":"Problem set 7","text":""},{"location":"dyalog/selecting-from-arrays/#search-sort-slice-and-select","title":"Search, sort, slice and select","text":"<ol> <li> <p>Anna, Ben and Charlie are having a competition. They want to see who can eat the most fruit in a week.</p> <pre><code>fruits \u2190 4 7\u2374'Apples MangoesOrangesBananas'\ndays \u2190 7 3\u2374'SunMonTueWedThuFriSat'\nnames \u2190 3 7\u2374'Anna   Ben    Charlie'\n\u2395RL \u2190 42 1 \u22c4 ate \u2190 ?3 4 7\u23743</code></pre> What is <code>\u2395RL</code>? <p>The roll function <code>?\u2375</code> generates random numbers for each simple scalar number in <code>\u2375</code>.</p> <p>Setting the Random Link system variable <code>\u2395RL</code> lets us generate the same random numbers repeatedly.</p> <ol> <li>Compute the names of the people who ate the most fruit on Tuesday and Sunday combined.</li> <li>Compute the name of the person who ate the most mangoes and bananas combined.</li> <li>What is the name of the person who ate the most fruit overall?</li> </ol> Answer <p>There are many different ways to find these answers. The following are just one set of solutions.</p> <p><ol> <li> <p>Anna and Charlie both ate 10 fruits total on Tuesday and Sunday combined. Ben only ate 8 fruits.</p> <p><pre><code>      d\u2190days\u23732 3\u2374'Tue' 'Sun'\n      total \u2190 +/+/ate[;;days\u2373d]\n      (total=\u2308/total)\u233fnames</code></pre> <pre><code>Anna   \nCharlie</code></pre></p> <p> <li> <p>Charlie ate the most mangoes and bananas across the whole week.</p> <p><pre><code>      f\u2190fruits\u23732 7\u2374'MangoesBananas'\n      total \u2190 +/+/ate[;fruits\u2373f;]\n      (total=\u2308/total)\u233fnames</code></pre> <pre><code>Charlie</code></pre></p> <p> <li> <p>Anna ate the most fruit overall.</p> <p><pre><code>      total \u2190 +/+/ate\n      (total=\u2308/total)\u233fnames</code></pre> <pre><code>Anna</code></pre></p> <p>Any of these totals could have been expressed as a single sum. Either by ravelling submatrices for each person:</p> <pre><code>total \u2190 +/(,\u23642)ate</code></pre> <p>Or by merging the last two axes:</p> <pre><code>total \u2190 +/,[2 3]ate</code></pre> <p>A discussion comparing these expressions will be added later.</p> <p> </p> </li> <li> <p>Write a function <code>FindWord</code> which accepts a character matrix left argument <code>\u237a</code> and a character vector right argument <code>\u2375</code> and returns a Boolean vector where a <code>1</code> indicates a row in <code>\u237a</code> which matches the word <code>\u2375</code>.     <pre><code>      fruits\u2190\u2191'apples' 'mangoes' 'oranges' 'bananas'\n      fruits FindWord 'apples'\n1 0 0 0\n      fruits FindWord 'oranges'\n0 0 1 0</code></pre></p> <p>What is <code>\u2191</code>?</p> <p>We created a nested vector of different length character vectors using strand notation. The mix function <code>\u2191\u2375</code> is used to turn this from a nested vector of vectors into a flat matrix made of simple character scalars. In order to make the matrix rectangular, shorter vectors are padded with spaces.</p> <pre><code>      ' '=\u2191'apples' 'mangoes' 'oranges' 'bananas'\n0 0 0 0 0 0 1\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0</code></pre> Answer <p>There are many ways to solve this problem. A comparison of different approaches is worthy of a fuller discussion, which will be added later. For now we will simply show a few alternatives:</p> <pre><code>FindWord \u2190 {\u2227/\u2228/\u237a\u2218.=\u2375\u2191\u23682\u2337\u2374\u237a}\nFindWord \u2190 {\u2228/(\u2375\u2191\u2368\u22a2/\u2374\u237a)\u2377\u237a}\nFindWord \u2190 {(\u2375\u2191\u2368\u22a2/\u2374\u237a)(\u2261\u23641)\u237a}\nFindWord \u2190 {\u237a\u2227.=\u2375\u2191\u23682\u2337\u2374\u237a}</code></pre> </li> <li> <p>From the nested 3D array</p> <pre><code>nest\u21902 3 4\u2374(\u237317),(\u22822 3\u2374'ab'(2 3\u2374'dyalog'),'defg'),6\u2191\u2395A</code></pre> <p>use a single selection to obtain:</p> <ol> <li>The character scalar <code>'y'</code></li> <li>The numeric scalar <code>6</code></li> </ol> Answers <p>It can be tricky to simplify these to a single use of pick <code>\u237a\u2283\u2375</code>. Although understanding these selections can help with understanding complicated nested array structures, it is not very common to need to do this in real code. <ol> <li> <pre><code>      (2 2 2)(1 2)(1 2)\u2283nest\ny</code></pre> </li> <li> <pre><code>      (\u22821 2 2)\u2283nest\n6</code></pre> </li> </ol></p> </li> <li> <p>What type of indexing is used in the expression <code>grid[\u2378grille=' ']</code> ?</p> Answer <p>Because <code>grille</code> is a matrix, the equality with the space character is also a matrix. The where function <code>\u2378\u2375</code> returns a nested vector of indices, which when used with square brackets forms a choose indexing expression.</p> </li> <li> <p>What indexing array can be used to select a simple scalar from itself?</p> Answer <p>For choose indexing, an enclosed empty numeric vector:</p> <p><pre><code>      'a'[\u2282\u236c]</code></pre> <pre><code>a</code></pre></p> <p>For squad indexing, an empty numeric vector:</p> <p><pre><code>      \u236c\u2337'a'</code></pre> <pre><code>a</code></pre></p> <p>For reach indexing, either:</p> <p><pre><code>      \u236c\u2283'a'</code></pre> <pre><code>a</code></pre></p> <p><pre><code>      (\u2282\u236c)\u2283'a'</code></pre> <pre><code>a</code></pre></p> </li> <li> <p>Define <code>n\u21905 5\u2374\u237325</code> in your workspace.</p> <p>Using selections, find at least four different ways to set the bottom-right 3 by 3 submatrix in <code>n</code> to <code>0</code>. For example, <code>(2 2\u2193n)\u21900</code>.</p> Hint <p>See which primitives may be used in a selective assignment</p> Answers <p>Compute the indices:</p> <pre><code>n[2+\u23733;2+\u23733]\u21900</code></pre> <p>Use negative take:</p> <pre><code>(\u00af3 \u00af3\u2191n)\u21900</code></pre> <p>Use two compressions:</p> <pre><code>b\u21902 3/0 1\n(b/b\u233fn)\u21900</code></pre> <p>Positive take after reversals:</p> <pre><code>(3 3\u2191\u233d\u2296n)\u21900</code></pre> </li>"},{"location":"dyalog/selecting-from-arrays/#visit-to-the-museum","title":"Visit to the museum","text":"<p>Here are some data and questions about visits to a museum.  </p> <p>The <code>section_names</code> are the names of each of the four sections in the museum.  </p> <pre><code>section_names \u2190 'Bugs' 'Art' 'Fossils' 'Sea Life'</code></pre> <p>The variable <code>sections</code> is a nested list of text matrices. Each matrix lists the items or creatures which belong to each section.  </p> <pre><code>sections \u2190 \u2191\u00a8('Grasshopper' 'Giant Cicada' 'Earth-boring Dung Beetle' 'Scarab Beetle' 'Miyama Stag' 'Giant Stag' 'Brown Cicada' 'Giraffe Stag' 'Horned Dynastid' 'Walking Stick' 'Walking Leaf') ('The Blue Boy by Thomas Gainsborough' ('Rooster and Hen with Hydrangeas by It',(\u2395ucs 333),' Jakuch',(\u2395ucs 363)) 'The Great Wave off Kanagawa by Hokusai' 'Mona Lisa by Leonardo da Vinci' 'Sunflowers by Vincent van Gogh' 'Still Life with Apples and Oranges by Paul C\u00e9zanne' 'Girl with a Pearl Earring by Johannes Vermeer' ('Shak',(\u2395ucs 333),'ki dog',(\u2395ucs 363),' by Unknown') 'David by Michelangelo di Lodovico Buonarroti Simoni' 'Rosetta Stone by Unknown') ('Amber' 'Ammonite' 'Diplodocus' 'Stegosaur' 'Tyrannosaurus Rex' 'Triceratops') ('Puffer Fish' 'Blue Marlin' 'Ocean Sunfish' 'Acorn Barnacle' 'Mantis Shrimp' 'Octopus' 'Pearl Oyster' 'Scallop' 'Sea Anemone' 'Sea Slug' 'Sea Star' 'Whelk' 'Horseshoe Crab')</code></pre> <p>The <code>visits</code> table represents 1000 visits to museum sections over a two week period. The four columns represent:  </p> <ul> <li>The section that was visited as an index into the <code>section_names</code></li> <li>The day of the visit in Dyalog Date Number format.</li> <li>The arrival time in minutes from midnight. For example, 15:30 is 930 minutes.</li> <li>The departure time in minutes from midnight.</li> </ul> <pre><code>\u2395RL\u219042 \u22c4 days\u219043589+?1000\u237428 \u22c4 (arr l\u00efv)\u2190539+?2\u2374\u22821000\u2374510 \u22c4 section\u2190?1000\u23744\nvisits\u2190(\u2282\u234bdays)\u2337section,days,(\u2282\u2218\u234b\u2337\u22a2)\u23641\u2349\u2191arr l\u00efv</code></pre> <p>In the boolean matrix <code>display</code>, each row corresponds to a museum piece and each column corresponds to a day. A <code>1</code> indicates days when a particular museum piece was out on display. The order of rows corresponds to the order of pieces in the <code>sections</code> table.  </p> <pre><code>display \u2190 40 28\u2374(9/0),1,(4/0),1,(9/0),1,(3/0),(5/1),0,(10/1),0,(5/1),0,(8/1),0,(8/1),0,(4/1),0 0 1 1 0 1 0 1 0 1 1 0 1 0,(5/1),(3/0),1 0 1 0 1 1,(4/0),1 0 1 1 0 0 1 1 0,(6/1),0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 0,(3/1),(3/0),(4/1),0 1 1 0 1 0 0,(7/1),0 1 0 1 1 0 1 1 0 1 1 0,(3/1),0 1 1 0,(4/1),0,(3/1),0 1 0,(3/1),0 0 1 1,(5/0),1 1 0,(3/1),0 1 0 0 1 1,(3/0),(5/1),0,(9/1),0,(3/1),0 1,(3/0),(5/1),0,(3/1),0,(3/1),(3/0),1 1 0 0 1 0 1,(4/0),1 1 0 1 0 1 0 1 0,(9/1),0,(7/1),0,(3/1),0 0 1 1 0 1 1 0 0 1 0 0 1 0,(5/1),0 1,(3/0),1 1 0 1 0 0,(3/1),0,(4/1),0 0 1 1,(7/0),(3/1),(3/0),1 1,(3/0),1 1 0 1 0 1,(6/0),1 1,(4/0),1 0 1 1,(5/0),1 0 1 0 1,(6/0),(3/1),(9/0),1 1,(3/0),1 0 1 0 1 1,(13/0),1 1,(11/0),1 0 1 1,(4/0),1 0 0,(4/1),0,(12/1),0,(5/1),0 1 0 0 1 1 0,(5/1),0,(4/1),0,(4/1),0 0 1,(5/0),1 1,(3/0),(8/1),0 0 1,(3/0),1,(3/0),1,(3/0),1 0 0 1 0 1 0 1 0 1 0 1 1 0,(3/1),(4/0),(3/1),0,(3/1),0 1 1,(3/0),(4/1),0 1 1 0 1 1,(3/0),1 1 0 1 0 1 0 1,(6/0),1 1,(14/0),(8/1),(4/0),(8/1),0,(3/1),0,(4/1),(6/0),1 0 0 1 1,(3/0),1 1 0 0 1 0 1 0 0 1 0 1,(5/0),1 0 0 1 0 1 0 0 1 1,(3/0),1,(8/0),1 0 1 0,(6/1),0 0,(7/1),0 1 1 0,(3/1),0,(9/1),0,(12/1),0 1 1 0,(9/1),0,(3/1),0 0,(3/1),(3/0),(3/1),0,(3/1),(5/0),(7/1),0 1 0,(5/1),0,(3/1),0 0,(3/1),0 0 1 1 0,(4/1),0 1,(3/0),(3/1),(5/0),1 0 1 1 0 1 0,(3/1),0,(5/1),0,(3/1),0,(4/1),0 1,(4/0),1 0 1 0 0 1 1,(5/0),1,(3/0),1 0 0 1 0 1,(3/0),1 0 1 0 0 1,(4/0),1 0 0 1,(6/0),1,(14/0),1 0 0,(4/1),(3/0),(6/1),0 0 1 0,(3/1),0,(4/1),0,(3/1),0 1 0 1,(3/0),(5/1),(3/0),1 0 0 1 0,(3/1),0 1,(4/0),1 0 1 1,(11/0),1,(15/0),(3/1),(4/0),1,(15/0),(5/1),0 1 0,(8/1),0,(3/1),(4/0),(5/1),0 1,(9/0),1 0 1 1 0 0 1 0 0 1,(4/0),1 0,(4/1),0,(7/1),(3/0),1 0 0 1,(3/0),(3/1),0 1 1\n</code></pre> <ol> <li>How many visitors arrived before 10AM?</li> <li>What was the most popular section by visit duration?</li> <li>Estimate the opening and closing times of each of the sections.</li> <li>Which animal being on display corresponded with the highest increase in visit duration for its section?</li> </ol>"},{"location":"dyalog/user-defined-functions/","title":"User defined functions","text":"<p>This is a fairly brief introduction, and there are exercises at the end of this section to help solidify your understanding, but there is also a more extensive treatment of user-defined functions in the book Mastering Dyalog APL.</p>"},{"location":"dyalog/user-defined-functions/#the-three-function-styles","title":"The Three Function Styles","text":"<p>So far, we have been reading and writing dfns. </p> <pre><code>    3 {\u237a+\u2375} 5              \u235d Left argument \u237a, right argument \u2375\n      {\u2375&gt;0:\u2375,\u2207 \u2375-1 \u22c4 \u2375}5   \u235d Guard is : (colon). The function itself is \u2207 (del)\n Fn \u2190 {\u237a\u2375}                 \u235d We can give functions names</code></pre> <p>It is also possible to name functions which do not explicitly refer to their arguments. This is called tacit or point-free programming.</p> <pre><code>      Plus \u2190 +\n      IndicesTo \u2190 \u2373\n      _Reduce \u2190 /      \n      Sum \u2190 Plus _Reduce\n      Sum IndicesTo 10</code></pre> <p>There is a syntax for composing functions called trains. </p> <p>A two-train is an atop:</p> <pre><code>      3(|-)5\n2\n      |3-5\n2</code></pre> <p>A three-train is a fork:</p> <pre><code>      3(-\u00d7+)5\n\u00af16\n      (3-5)\u00d7(3+5)\n\u00af16</code></pre> <p>Any further functions simply alternate between atop (even number of functions) and fork (odd number of functions).</p> <pre><code>      3(|-\u00d7+)5    \u235d Absolute value of the product of sum and difference\n16\n      3(\u2308|-\u00d7+)5   \u235d Max residue with the product of sum and difference\n4</code></pre> <p>They allow some rather neat and memorable ways to write short functions.</p> <pre><code>      Mean \u2190 +\u233f \u00f7 \u2262         \u235d The sum divided by the count\n      Mean 3 1 4 1\n      3 (+,-) 5             \u235d Plus and minus\n      ','(\u2260\u2286\u22a2)'some,text'   \u235d Split on commas</code></pre> <p>Note</p> <p>Small unnamed dfns and tacit functions expand your vocabulary. One of my favourites is the \"split by delimiter\" train <code>(\u2260\u2286\u22a2)</code>. It looks like a beat-up face kaomoji. A similar phrase which can take multiple delimiters can be found on aplcart.info.</p>"},{"location":"dyalog/user-defined-functions/#traditional-functions","title":"Traditional functions","text":"<p>Dyalog is a modern APL implementation. Since early APL implementations there has been a way of defining functions with a header line and named arguments and results. Since the introduction of dfns, functions of the original style are called traditional functions or tradfns.</p> <p><pre><code> Mean \u2190 +\u233f\u00f7\u2262         \u235d A 3-train (fork) for the arithmetic mean</code></pre> <pre><code>\u00a0</code></pre> <pre><code></code></pre></p> <p><pre><code> Mean \u2190 {(+\u233f\u2375)\u00f7\u2262\u2375}   \u235d A dfn for the arithmetic mean</code></pre> <pre><code>\u00a0</code></pre> <pre><code></code></pre></p> <p><pre><code> \u2207 m \u2190 Mean a        \u235d A tradfn for the arithmetic mean\n   m \u2190 (+\u233fa) \u00f7 \u2262a\n \u2207</code></pre> <pre><code></code></pre> <pre><code></code></pre></p> <p>Note</p> <p>Copy and paste everything between (and including) the two <code>\u2207</code> del symbols into the session, and press <code>Enter</code>, to define a tradfn in your workspace. Using <code>Shift+Enter</code> with the cursor on a name will bring up an editor window for that named thing.</p> <p>A tradfn header reflects the calling syntax of the function. </p> <pre><code>     \u2207 {result}\u2190{optional}Tradfn argument;local1                             \n[1]    ;local2   \u235d Locals can be declared across multiple lines in the header\n[2]    :If 0=\u2395NC'optional'                                                   \n[3]        optional\u2190'no left argument'                                       \n[4]    :EndIf                                                                \n[5]    local1\u2190'\u237a: ',optional                                                 \n[6]    local2\u2190'\u2375: ',argument                                                 \n[7]    global\u2190\u236a'TradFn last called with'local1 local2                        \n[8]    result\u2190\u236alocal1 local2                                                 \n     \u2207     </code></pre> <p>Note</p> <p>The <code>\u2207</code> del representation of the <code>TradFn</code> function above is the vector representation result of <code>\u2395VR'TradFn'</code> which can be directly input into the session.</p> <ol> <li>Try calling <code>TradFn</code> with one and two arguments. How can the result be made to display to the session? </li> <li>Inspect the variable <code>global</code> after calling <code>TradFn</code> with different arguments.</li> <li>Step through the function using <code>Ctrl+Enter</code>. Inspect <code>\u2395NC'optional'</code> when <code>TradFn</code> is called with one argument and when it is called with two arguments.</li> </ol> <p>Here is the smallest tradfn: <pre><code>      \u2207 T\n      \u2207</code></pre></p> <p><code>T</code> is a function which takes no arguments, returns no results and has no effects.</p> <p>Results in <code>{}</code> curly braces are called shy results and do not print to the session by default, but can be passed to arguments. To ease debugging and write functions with predictable behaviour, it is generally best not to use shy results.</p> <p>Optional left arguments are a little awkward in tradfns. The dfn equivalent is a little nicer looking: <code>{\u237a\u2190'default' \u22c4 \u237a,\u2375}</code>.</p>"},{"location":"dyalog/user-defined-functions/#name-scope-locals-and-globals","title":"Name scope, locals and globals","text":"<p>The scope of a name describes the circumstances under which it is visible to code. </p> <p>For most intents and purposes, you just need to know about the difference between how local and global names are defined in the syntax, and how name shadowing works.</p> <p>By default, names assigned in tradfns are global. This is mostly for historical reasons. Names declared in the header - the arguments, results, and names preceded by semicolons - are localised.</p> <p>Traditional function header example</p> <p><pre><code>result \u2190 left FunctionName right;var1;var2</code></pre> The header for a function called <code>FunctionName</code>. The names <code>result</code>, <code>left</code>, <code>right</code>, <code>var1</code> and <code>var2</code> are local.</p> <p>By default, names in a dfn are local to that dfn. This is the preferred default in most modern programming languages.</p> <p>If we define a name in the current namespace, that name is visible only within that namespace unless referred to by its full namespace path (e.g. <code>#.nsref.var</code>).</p> <pre><code>      'ns1'\u2395ns\u236c \u22c4 ns1.var\u21901 2 3\n      'ns2'\u2395ns\u236c \u22c4 \u2395cs ns2\n      \u2395\u2190var\nVALUE ERROR: Undefined name: var\n      \u2395\u2190var\n        \u2227\n      \u2395\u2190#.ns1.var\n1 2 3</code></pre> <p>Let us now define a dfn and a tradfn in <code>#.ns1</code>:</p> <pre><code>      \u2395cs #.ns1\n\n     \u2207 Dfn\u2190{             \n[1]        var\u2190'lexical'\u2375\n[2]    }                 \n     \u2207                   \n\n     \u2207 Tradfn arg      \n[1]    var\u2190'dynamic'arg\n     \u2207  </code></pre> <p>Note</p> <p>While the <code>\u2207</code> del representation of dfns can be used to define dfns in the session, dfns in scripted namespaces must be defined without <code>\u2207</code> dels.</p> <p>If we call each of these functions, <code>Tradfn</code> will modify <code>var</code> in the current namespace, but <code>Dfn</code> will not:</p> <p><pre><code>      Dfn var\n      var</code></pre> <pre><code>1 2 3</code></pre></p> <p><pre><code>      Tradfn var\n      var</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502dynamic\u25021 2 3\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518</code></pre></p> <p>In the following definition, <code>var\u22a2\u2190</code> will update <code>var</code> in the closest scope where it is localised - in this case <code>#.ns1</code>.</p> <pre><code>     \u2207 Dfn\u2190{              \n[1]        var\u22a2\u2190'lexical'\u2375\n[2]    }                  \n     \u2207</code></pre> <p>In Tradfns, references to local names within a function are said to \"shadow\" the same names from outer scopes. Notice how the following definition of <code>Tradfn</code> fails.</p> <pre><code>     \u2207 Tradfn arg;var  \n[1]    var,\u2190'dynamic'arg\n     \u2207   </code></pre> <p>A similar dfn succeeds because, in dfns, modified assignment will search the local scope and then any parent scopes.</p> <pre><code>     \u2207 Dfn\u2190{              \n[1]        var,\u2190'lexical'\u2375\n[2]    }                  \n     \u2207                    </code></pre> <p>For completeness, here we will also mention <code>\u2395SHADOW</code>. It is used when names are dynamically created using <code>\u234e</code>, <code>\u2395FX</code> or <code>\u2395FIX</code> but need to be localised. However, it is best to use the function syntax to establish name scope in general. Further information can be found in the specialists section on shadowed names in Mastering Dyalog APL.</p> <p>The technical distinction between dfns and tradfns is that tradfns have dynamic scope whereas dfns have lexical scope.</p> <p>For further explanation of how this affects the use of dfns, see section 5.5.3 of Mastering Dyalog APL.</p>"},{"location":"dyalog/user-defined-functions/#avoid-globals","title":"Avoid globals","text":"<p>When possible, avoid using global variables. Pass parameters to functions as arguments unless this becomes very awkward. The use of global variables should be limited to state settings that affect the entire application, or tables containing databases that are shared globally. If you need global constants, it is a good idea to create them in a function in order to be able to use source code management / change tracking software.</p> <p>A function which uses globals is difficult, if not impossible, to run in parallel. If two copies of the function run in parallel and they update the global data, some kind of locking is required. Locking often defeats the potential benefits of parallel execution.</p> <p>Names should be localized unless they really really, really, really need to be global.</p> <p>An example of when to use globals is a switch which affects the entire application:</p> <pre><code>    \u2207  err\u2190Log msg                                  \n[1]    :If verbose                                  \n[2]        \u2395\u2190msg   \u235d Display information to the user\n[3]    :EndIf                                       \n[4]    PrintFile msg                                \n    \u2207   </code></pre>"},{"location":"dyalog/user-defined-functions/#nested-functions","title":"Nested functions","text":"<p>It is possible to define functions inside some other functions.</p> <ul> <li> <p>Tacit functions can only include other user-defined functions by name     <pre><code>      Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375}\n      CSI \u2190 Sort\u2365\u2395C   \u235d Case-insensitive sort</code></pre></p> </li> <li> <p>Dfns can contain tacit definitions and dfn definitions, as well as any named user-defined functions     <pre><code> SortedMeans \u2190 {\n    Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375}\n    Mean \u2190 +\u233f\u00f71\u2308\u2262\n    Sort Mean\u00a8\u2375\n}</code></pre></p> </li> <li>Tradfns can contain tacit definitions, dfn definitions and any named user-defined functions     <pre><code>     \u2207 result\u2190SortedMeans vectors;Mean;Sort\n[1]    Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375}\n[2]    Mean\u2190+\u233f\u00f71\u2308\u2262\n[3]    result\u2190Sort Mean\u00a8vectors\n     \u2207  </code></pre></li> </ul>"},{"location":"dyalog/user-defined-functions/#which-style-to-use","title":"Which style to use?","text":"<p>While usage of different function styles varies throughout many applications, you might take inspiration from Ad\u00e1m's APL Style Guide, when writing brand new production code. When maintaining others' code, it is best to try to continue in the already established style.</p>"},{"location":"dyalog/user-defined-functions/#dfns","title":"Dfns","text":"<p>For medium sized functions and utilities. Nested dfns are fine, but never use multi-line dfns inline.</p> <pre><code> MultiDfn\u2190{        \u235d A Dfn with nested in-line multi-line dfns\n     (3{           \u235d These are confusing to read and trace through\n         \u237a+2\u00d7\u2375\n     }\u237a){\n         x\u2190\u237a-4+\u2375\n         x-2\u00d7\u237a\n     }3+\u2375\n }</code></pre> <p>Instead, give them names and then apply them. Named dfns should be multi-line so that they can be traced through, unless truly trivial.</p> <pre><code> MultiDfn2\u2190{    \u235d The previous function rewritten more clearly\n     y\u21903+2\u00d7\u237a\n     x\u2190y-1+\u2375\n     x-2\u00d7y  \n }       </code></pre> <p>Do not use a dfn instead of naming a variable. For example, instead of </p> <pre><code>      r\u2190{\u2375/\u236810\u2264\u2375}a,b</code></pre> <p>write</p> <pre><code>      candidates\u2190a,b\n      r\u2190candidates/\u236810\u2264candidates</code></pre>"},{"location":"dyalog/user-defined-functions/#tacit-functions","title":"Tacit functions","text":"<p>Best as short, pure functions, performing some specific task such as data transformation. Trains and functions derived from functions and operators (e.g. <code>+/</code>) can be used inline if they are not too complex.</p>"},{"location":"dyalog/user-defined-functions/#tradfns","title":"Tradfns","text":"<p>Best used as program control and for dealing with system interactions. The use of control structures can make procedural tasks easier to debug. For example, if an error occurs during a loop or iteration.</p> <pre><code>      \u00af5{i\u2190\u237a+\u2373\u2375 \u22c4 i\u00f7i-2}10   \u235d A single line function cannot be traced through</code></pre> <p>Note</p> <p>Use <code>Ctrl+Enter</code> to step through a multiline function. You can then use <code>Shift+Enter</code> to edit the function during execution and <code>Esc</code> to save your changes to the function and continue execution.</p> <pre><code>    \u2207  r\u2190a MultiLineError o;i\n[1]    :For i :In a+\u2373o       \n[2]        r\u2190i+3             \n[3]        r\u00f7r-2             \n[4]    :EndFor               \n    \u2207    </code></pre>"},{"location":"dyalog/user-defined-functions/#problem-set-10","title":"Problem set 10","text":""},{"location":"dyalog/user-defined-functions/#which-style-again","title":"Which style again?","text":"<ol> <li>Which of the following function styles can have multiple lines?<ol> <li>TradFns</li> <li>Dfns</li> <li>Tacit functions</li> </ol> </li> <li>Which of the following function styles can be anonymous (unnamed)?<ol> <li>Tradfns</li> <li>Dfns</li> <li>Tacit</li> </ol> </li> <li>Think about which function style would be most appropriate in the following situations.    <ol> <li>Launching an application</li> <li>Applying a mathematical formula to an array of values</li> <li>A utility function to sort an array </li> <li>Reading and writing files</li> <li>Expressing the sum of two functions (f+g)(x)</li> <li>Downloading data from the internet</li> <li>GUI programming</li> <li>Checking if a function is a no-op for a particular array</li> <li>Defining a piecewise mathematical function</li> </ol> </li> </ol>"},{"location":"dyalog/user-defined-functions/#choo-choo","title":"Choo choo","text":"<ol> <li>Translating functions<ol> <li>Convert the following dfns into trains<ol> <li><code>{\u2308/\u2262\u00a8\u2375}</code></li> <li><code>{1+\u237a-\u2375}</code></li> <li><code>{\u2228/\u237a\u220a\u2375}</code></li> <li><code>{(\u233d\u2375)\u2261\u2375}</code></li> </ol> </li> <li>Convert the following trains into dfns<ol> <li><code>(\u2308/-\u230a/)</code></li> <li><code>(+\u233f\u00f71\u2308\u2262)</code></li> <li><code>(\u22a2-|)</code></li> <li><code>(1\u2227\u22a2,\u00f7)</code></li> </ol> </li> </ol> </li> </ol>"},{"location":"dyalog/user-defined-functions/#marking-tests","title":"Marking Tests","text":"<p>Way back in problem set 3 you wrote a dfn to convert test scores into letter values.</p> <p>You were led to produce some function or expression similar to the following:</p> <pre><code>      Grade\u2190{'FDCBA'[+/\u2375\u2218.&gt;80 70 60 50 0]}\n      Grade 95 65 92 77</code></pre> <p>This is an array-oriented solution to this problem. However, if a human was manually grading test scores, they might take one scored paper at a time and decide on which letter grade to write by reading each score.</p> <p>Procedural pseudocode:</p> <pre><code>scores = 93,85,45,10,70,16,93,63,41,7,95,45,76\nFor each score in scores:\n  If score is greater than 80:\n    Write \"A\"\n  Else If score is greater than 70:\n    Write \"B\"\n  Else If score is greater than 60:\n    Write \"C\"\n  Else If score is greater than 50:\n    Write \"D\"\n  Else\n    Write \"F\"</code></pre> <p>Control Structures in Dyalog are keywords beginning with a <code>:</code> colon.</p> <pre><code>      :If :OrIf :AndIf :ElseIf :Else :EndIf\n      :For :In :EndFor\n      :While :EndWhile\n      :Repeat :Until :Return</code></pre> <ol> <li> <p>Translate the pseudocode above into a tradfn called <code>Grade2</code> using control structures.</p> </li> <li> <p>Rewrite the <code>Grade</code> function again as either a dfn or a tradfn called <code>Grade3</code> which uses <code>\u237a\u2378\u2375</code> interval index.</p> </li> <li> <p>Use the <code>]runtime</code> user command to compare the computation time for each of the three grading functions.     <pre><code>]runtime -c \"Grade 10\u00d7\u237310\" \"Grade2 10\u00d7\u237310\" \"Grade3 10\u00d7\u237310\"</code></pre></p> </li> </ol>"},{"location":"j/basic-syntax-and-arithmetic/","title":"Basic syntax","text":""},{"location":"j/basic-syntax-and-arithmetic/#functions-and-arguments","title":"Functions and arguments","text":"<p>Functions are called verbs in J.</p> <p>J has two-argument, infix verbs. These are called dyadic verbs.</p> <p><pre><code>   3 * 5</code></pre> <pre><code>15</code></pre></p> <p><pre><code>   3 - 5</code></pre> <pre><code>_2</code></pre></p> <p>Some verbs map between elements of their left and right argument arrays. It is easy to add lists of numbers together: <pre><code>   1 2 3 + 4 5 6</code></pre> <pre><code>5 7 9</code></pre></p> <p>Negative numbers are written with an underscore <code>_</code> to differentiate between negation (<code>-3</code>) and literal negative numbers (<code>_3</code>). <pre><code>   1 2 3 - 1 0 _1</code></pre> <pre><code>0 2 4</code></pre></p> <p>There are also one-argument, prefix verbs. These are called monadic verbs. <pre><code>   - 5 _3 0 _4 2</code></pre> <pre><code>_5 3 0 4 _2</code></pre></p> <p><pre><code>   |. 1 2 3 4 5</code></pre> <pre><code>5 4 3 2 1</code></pre></p> <p>All J built-ins are either one or two-character ASCII symbols.</p> <p>Some symbols represent both a monadic and a dyadic verb, but these are often closely related. As we will see later, even user-defined verbs can be monadic, dyadic or even both (ambivalent).</p> <p> Try this: Use these verbs monadically and dyadically:</p> <code>+</code> <code>-</code> <code>*</code> <code>%</code> <code>|</code> <code>^</code> <code>^.</code> <code>&gt;.</code> <code>&lt;.</code>"},{"location":"j/basic-syntax-and-arithmetic/#singleton-extension","title":"Singleton extension","text":"<p>Dyadic verbs can map between a single value and an array of values. <pre><code>   3 * 1 10 100</code></pre> <pre><code>3 30 300</code></pre></p> <p><pre><code>   3 = 1 2 3 4 5</code></pre> <pre><code>0 0 1 0 0</code></pre></p> <p> Try this: Replace the verbs in the previous two expressions with: <code>&gt;.</code> <code>&lt;.</code> <code>&lt;</code></p> <p>While experimenting, you may cause a <code>LENGTH ERROR</code>:</p> <p><pre><code>   1 2+3 4 5</code></pre> <pre><code>|length error\n|   1 2    +3 4 5\n|[-0] </code></pre></p> <p>Verbs such as <code>+ * &gt;.</code> apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the verb should be applied. Of course, you may want to apply a verb between all combinations of elements of the left and right argument, but that will be addressed soon enough.</p>"},{"location":"j/basic-syntax-and-arithmetic/#order-of-execution","title":"Order of execution","text":"<p>Expressions are executed from right to left.</p> <p><pre><code>   10*i.2+5</code></pre> <pre><code>0 10 20 30 40 50 60</code></pre></p> Show me step-by-step <p>To start, there is a literal number 5: <pre><code>   5\n5</code></pre></p> <p>Next, there is a plus <code>+</code> with a number 2 to its immediate left, so it is evaluated as two plus five: <pre><code>   2+5\n7</code></pre></p> <p>Then the symbol idot <code>i.</code>. To its left is another verb, times <code>*</code>, not a value. So the verb is called monadically. The monadic form of <code>i.</code> is the index generator, which generates an integer array of length defined by its right argument. <pre><code>   i.2+5\n0 1 2 3 4 5 6</code></pre></p> <p>Lastly, another dyadic verb, we multiply our list by ten: <pre><code>   10*i.2+5\n0 10 20 30 40 50 60</code></pre></p> <p>The expression above is \"ten times the indices from 0 to two plus five, or in short: \"ten times idot two plus five\". We can make it clearer using (superfluous) parentheses <code>()</code>. <pre><code>   10*(i.(2+5))</code></pre> <pre><code>0 10 20 30 40 50 60</code></pre></p> <p>Of course, we can change the order of execution using different parentheses.</p> <p><pre><code>   (10*i.2)+5</code></pre> <pre><code>5 15</code></pre></p> Show me step-by-step <p>Beginning from the right, there is a literal number 5: <pre><code>   (10*i.2)+5\n            5</code></pre></p> <p>Then there is a plus symbol <code>+</code>. Before we can decide if it is being called monadically or dyadically, we must look to the left.</p> <pre><code>      )+5</code></pre> <p>A right parenthesis. We must evaluate the contents of the parentheses to see if it is a verb or a value.</p> <pre><code>   (10*i.2)</code></pre> <p>This expression evaluates to the list <code>0 10</code>. Since it is a value, it is used as the left argument to our plus verb.</p> <pre><code>   (10*i.2)+5\n   (0   10)+5\n5 15</code></pre> <p>Infix (dyadic) verbs have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. </p> <p>If there is one, the left argument is the value to the immediate left.</p> <p>However, juxtaposed values form lists before any verbs are applied. This is called stranding and lets us write very natural expressions, such as:</p> <pre><code>   1 2 3 + 4 5 6\n5 7 9</code></pre> <p>but this can lead to some surprises if we are not aware:</p> <p><pre><code>   2 + 2 2 + 2</code></pre> <pre><code>6 6</code></pre></p> Show me step-by-step <p>First, there is a literal number 2 <pre><code>          2\n2</code></pre></p> <p>Then there is a symbol <code>+</code>. What, if any, is the value to its immediate left? <pre><code>       2 2 + 2</code></pre></p> <p>It is a 2-element vector <code>2 2</code>. The plus verb maps between these elements and the single number on the right: <pre><code>       2 2 + 2\n4 4</code></pre></p> <p>Finally there is another addition. The overall evaluation looks like the following: <pre><code>   2 + 2 2 + 2\n   2 + 4 4\n   6 6</code></pre></p>"},{"location":"j/basic-syntax-and-arithmetic/#comments","title":"Comments","text":"<p>Anything after a nota bene symbol <code>NB.</code> is ignored.</p> <p><pre><code>   NB. nothing happens on this line\n   2 * 3 NB. 4 5</code></pre> <pre><code>6</code></pre></p> <p><pre><code>   'A'   NB. It means \"note well\"</code></pre> <pre><code>A</code></pre></p>"},{"location":"j/basic-syntax-and-arithmetic/#the-reduction-operator","title":"The reduction operator","text":"<p>Adding a list of numbers could become very tedious... <pre><code>   1+2+3+4+5+6+7+8+9+10+11+12+13+14+15</code></pre> <pre><code>120</code></pre></p> <p>The insert adverb <code>u/</code> inserts the verb <code>u</code> to its left between parts of the right argument array. <pre><code>   +/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</code></pre> <pre><code>120</code></pre></p> <p>It is called insert because it has the effect of inserting the verb to its left between each element of its right argument. As a reduction operation, it also reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result.</p>"},{"location":"j/basic-syntax-and-arithmetic/#the-index-generator","title":"The index generator","text":"<p>The index generator <code>i. y</code> generates integers up to the integer right argument <code>y</code> <pre><code>   i.10</code></pre> <pre><code>0 1 2 3 4 5 6 7 8 9</code></pre></p> <p>Note: APL's <code>\u2373</code> starts at <code>1</code>, while J's <code>i.</code> starts at 0.</p> <p>So we can do an arithmetic sum as follows</p> Traditional Mathematical Notation (TMN) J \\(\\sum_{n=1}^N n\\) <code>+/i.N</code>"},{"location":"j/basic-syntax-and-arithmetic/#what-do-these-errors-mean","title":"What do these errors mean?","text":"<p>In the APL and BQN versions of this lesson, a negative number passed as the right argument to the index generator function produces an error. How can an item in an array have a negative index?</p> <p>In J, <code>i. y</code> treats a negative <code>y</code> as a signal to reverse the order of the indices produced:</p> <p><pre><code>   i._4</code></pre> <pre><code>3 2 1 0</code></pre></p> <p>Here's another error you might encounter:</p> <p><pre><code>   1+</code></pre> |syntax error |       1+ |[-0]  <pre><code>\nA `syntax error` means that the expression which you tried to execute does not make sense. In the case above, it is because verbs always either take a single argument to their right or two arguments, one to the right and one to the left. Verbs never take a single argument to their left.\n\n```J\n   a\n|value error: a\n|[-0]</code></pre></p> <p>A <code>value error</code> means that there is nothing associated with the name provided. We have not seen any named verbs or variables yet; nothing has been assigned to the name <code>a</code>, so trying to use it in an expression is meaningless.</p>"},{"location":"j/basic-syntax-and-arithmetic/#problem-set-1","title":"Problem Set 1","text":"<ol> <li> <p>The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable <code>t_allweek</code>.</p> <pre><code>t_allweek =: 11.7 8.6 9.7 14.2 6.7 11.8 9.2</code></pre> <p>Use J to compute the follwing:</p> <ol> <li>The highest daily temperature</li> <li>The lowest daily temperature</li> <li>The range of (difference between the largest and the smallest) temperatures</li> <li>Each temperature rounded to the nearest whole number</li> </ol> Answers <p><ol> <li> <pre><code>   &gt;./t_allweek\n14.2</code></pre> </li> <li> <pre><code>   &lt;./t_allweek\n6.7</code></pre> </li> <li> <pre><code>   (&gt;./t_allweek)-&lt;./t_allweek\n7.5</code></pre> <p>You may have found the correct answer using the following expression: <pre><code>   &gt;./t_allweek-&lt;./t_allweek\n7.5</code></pre></p> <p>but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: <pre><code>   &gt;./   t_allweek           - &lt;./ t_allweek\n   &gt;./   t_allweek           - 6.7\n   &gt;./ 11.7 8.6 9.7 14.2 6.7 11.8 9.2 - 6.7\n   &gt;./ 5 1.9 3 7.5 0 5.1 2.5\n   7.5</code></pre></p> <p>if we use parentheses <code>()</code> to force J to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: <pre><code>   ( &gt;./t_allweek ) - &lt;./ t_allweek\n   ( &gt;./t_allweek ) - 6.7\n   (     14.2    ) - 6.7\n   7.5</code></pre></p> <p> <li> To round to the nearest whole number, either add 0.5 and round down: <pre><code>   &lt;.0.5+t_allweek\n12 9 10 14 7 12 9</code></pre> <p>or subtract 0.5 and round up: <pre><code>   &gt;.t_allweek-0.5\n12 9 10 14 7 12 9</code></pre> </p> </li> <li> <p>A Mathematical Notation</p> <p>Use J to evaluate the following</p> <ol> <li> <p>\\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers)</p> </li> <li> <p>In TMN, the following expression is equal to <code>0</code>, why does the following return <code>70</code> in J?     <pre><code>   84 - 12 - 1 - 13 - 28 - 9 - 6 - 15  </code></pre> <pre><code>70</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code>   */1+i.12\n479001600</code></pre> </li> <li> ```J    +/(1+i.17)^2  NB. Using Power    +/*:1+i.17    NB. Using Square <p>1785     <code>``     The first version using Power</code>^` requires parentheses, since without parentheses we get the sum of the first 289 integers (17 squared), instead of the first 17 integers squared.</p> <pre><code>|TMN|J|\n|---|---|\n|$\\sum_n^{17^2} n$|`+/1+i.17^2`\n|$\\sum_n^{17} n^2$|`+/1+(i.17)^2`|\n\nThe second formulation using the Square `*:` verb directly avoids this.\n\n&lt;/li&gt;\n&lt;li&gt;\n```J\n   +/2*1+i.100\n</code></pre> <p>10100     <code>&lt;/li&gt;     &lt;li&gt;     We can either subtract 1 from the even numbers:</code>J        +/(2*1+i.100)-1     10000     ```</p> <pre><code>or we can add negative 1:\n```J\n   +/_1+2*1+i.100\n</code></pre> <p>10000     <code>The underscore denotes a literal negative, whereas the hyphen indicates subtraction.     &lt;/li&gt;     &lt;li&gt;     Remember the right-to-left rule: verbs take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how J evaluates our expression.</code>J        (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15)))))))     70     ```      </p> </li> <li> <p>Pyramid Schemes</p> <ol> <li> <p>Sugar cubes are stacked in an arrangement as shown by Figure 1.</p> <p> Figure 1. Stacked sugar cubes</p> <p>This stack has <code>4</code> layers and a total of <code>30</code> cubes. How many cubes are there in a similar stack with <code>467</code> layers?</p> </li> <li> <p>Now consider the stack in Figure 2.</p> <p> Figure 2. Differently stacked sugar cubes</p> <p>The arrangement in Figure 2 has <code>4</code> layers and <code>84</code> cubes. How many cubes are there in a similar stack with <code>812</code> layers?</p> </li> <li> <p>Now look at Figure 3.</p> <p> Figure 3. This is just a waste of sugar cubes by now...</p> <p>The stack in Figure 3 has <code>3</code> \"layers\" and <code>36</code> cubes in total. How many cubes are there in a similar stack with <code>68</code> \"layers\"?</p> </li> </ol> Answers <p><ol> <li> Each \\(n\\)th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. <pre><code>    +/(1+i.4)^2  NB. Using Power\n    +/*:1+i.4    NB. Using Square</code></pre> <pre><code>30</code></pre> <p><pre><code>    +/(1+i.467)^2  NB. Using Power, floating point result</code></pre> <pre><code>3.40583e7</code></pre></p> <p><pre><code>    +/*:1+i.467    NB. Using Square, integer result</code></pre> <pre><code>34058310</code></pre> <li> Each \\(n\\)th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. <pre><code>    +/(_1+2*1+i.4)^2  NB. Using Power\n    +/*:_1+2*1+i.4    NB. Using Power</code></pre> <pre><code>84</code></pre> <p><pre><code>    +/(_1+2*1+i.812)^2  NB. Using Power, floating point result</code></pre> <pre><code>7.1385e8</code></pre></p> <p><pre><code>    +/*:_1+2*1+i.812    NB. Using Square, integer result</code></pre> <pre><code>713849500</code></pre> <li> Each \\(n\\)th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. <pre><code>    +/(1+i.3)^3</code></pre> <pre><code>36</code></pre> <p><pre><code>    +/(1+i.68)^3  NB. Power returns a floating point result</code></pre> <pre><code>5.50372e6</code></pre></p> <p><pre><code>    &gt;.+/(1+i.68)^3  NB. Round up or down to coerce to integer</code></pre> <pre><code>5503716</code></pre> </p> </li> <li> <p>Rewrite the following expressions so that they do not use parentheses.</p> <ol> <li><code>(%a)*b</code></li> <li><code>(%a)%b</code></li> <li><code>(a+b)-5</code></li> <li><code>(a+b)+5</code></li> </ol> Answers <p><ol> <li>Multiplication is commutative, which means that the order of arguments does not matter, so we can write <code>b*%a</code>. Even more simply, it is <code>b%a</code> because multiplication by a reciprocal is the same as division.</li> <li>\\({{{1}\\over{a}}\\div{b}} = {{1}\\over{a\\times{b}}}\\) so we can write <code>%a*b</code></li> <li>Use a literal negative five:<code>\u00af5+a+b</code></li> <li>No parentheses needed: <code>a+b+5</code></li> </ol></p> </li>"},{"location":"j/verbs-and-assignment/","title":"Verbs and Assignment","text":""},{"location":"j/verbs-and-assignment/#verbs-and-direct-definition","title":"Verbs and Direct Definition","text":"<p>In J, normal functions\u2014those that take noun arguments and produce noun results\u2014are called verbs.</p> <p>A direct definition is a way of writing verbs in J. It starts and ends with double curly braces <code>{{}}</code>, has a right argument <code>y</code> and an optional left argument <code>x</code>.</p> <pre><code>   3{{x}}5     NB. x is the (optional) left argument\n3\n   {{y}}'apl'  NB. y is the right argument\napl\n   {{x}}5      NB. Calling a dyadic verb monadically results in an error\n|domain error\n|       {{x}}5\n|[-0] \n   3{{y}}      NB. Calling a verb without a right argument results in an error\n|syntax error\n|       3{{y}}\n|[-0] </code></pre> <p>From here, when verbs are first introduced, <code>v y</code> denotes a monadic verb <code>v</code> and <code>x F y</code> denotes a dyadic verb.</p>"},{"location":"j/verbs-and-assignment/#assignment","title":"Assignment","text":"<p>Primitives are the words defined by the system, but you can create your own names using the primitive <code>=.</code> called copula.</p> <p><pre><code>   one=.1\n   three=.3\n   equals=.=\n   plus=.+\n   four=.4\n   four equals one plus three   NB. 1 means true, 0 means false</code></pre> <pre><code>1</code></pre></p> <p>We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short.</p> <p>Read the following as \"squared numbers divided by the sum of squares\": <pre><code>   squared%+/squared=.*: _1 0 1 2</code></pre> <pre><code>0.1666666667 0 0.1666666667 0.6666666667`</code></pre></p> <p>Unlike APL and BQN, in J you are free to redefine names with new values of any type.</p>"},{"location":"j/verbs-and-assignment/#multiline-functions-and-the-editor","title":"Multiline functions and the editor","text":"<p>You can do quite a lot in a single line of J. However, it is not long before you want to keep sequences of multiple statements available for re-use. Of course we can write verbs which consist of multiple statements.</p> <p>You can separate each statement by a newline. Lines are evaluated top to bottom.</p> <p>The left verb <code>[</code> allows us to write multiple J statements in a single line, but unlike APL and BQN's diamond separator, evaluation occurs right-to-left.</p> <p>The following two definitions of the <code>mean</code> verb are equivalent.</p> <pre><code> mean =. {{\n   sum =. +/ y\n   count =. # y\n   sum % count\n }}\n\n mean =. {{ sum % count [ count =. # y [ sum =. +/ y }}</code></pre> <p>In the J Playground and the JQT tool, you will need to use an editor to write multi-line definitions like this, rather than the interactive prompt.</p>"},{"location":"j/verbs-and-assignment/#problem-set-2","title":"Problem set 2","text":"<p>The following problems can be solved with single-line dfns.</p> <ol> <li> <p>Eggs</p> <p>A recipe serving 4 people uses 3 eggs. Write the function <code>eggs</code> which computes the number of eggs which need cracking to serve <code>y</code> people. Using a fraction of an egg requires that a whole egg be cracked.</p> <p><pre><code>   eggs 4</code></pre> <pre><code>3</code></pre></p> <p><pre><code>   eggs 100</code></pre> <pre><code>75</code></pre></p> <p><pre><code>   eggs \u237312</code></pre> <pre><code>1 2 3 3 4 5 6 6 7 8 9 9</code></pre></p> Answer <pre><code>eggs =. {{&gt;.y*3%4}}</code></pre> </li> <li> <p>Write a function <code>to</code> which returns integers from <code>x</code> to <code>y</code> inclusive.</p> <pre><code>   3 to 3\n3\n   3 to 4\n3 4\n   1 to 7\n1 2 3 4 5 6 7\n   _3 to 5\n_3 _2 _1 0 1 2 3 4 5</code></pre> <p>BONUS: What if <code>x&gt;y</code>? <pre><code>   3 to 5\n3 4 5\n   5 to 3\n5 4 3\n   5 to _2\n5 4 3 2 1 0 _1 _2</code></pre></p> Answer <p>In the simple case, make sure to generate enough numbers and use <code>\u237a</code> as an offset: <pre><code>to =. {{x+i.1+y-x}}</code></pre> In general we take into account whether the difference is positive or negative: <pre><code>to =. {{x+(*d)*i.1+|[d=.y-x}}</code></pre></p> </li> <li> <p>The formula to convert temperature from Celsius (\\(T_C\\)) to Fahrenheit (\\(T_F\\)) in traditional mathematical notation is as follows:</p> \\[T_F = {32 + {{9}\\over{5}}\\times {T_C}}\\] <p>Write the function <code>CtoF</code> to convert temperatures from Celcius to Farenheit. <pre><code>   CtoF 11.3 23 0 16 _10 38\n52.34 73.4 32 60.8 14 100.4</code></pre></p> Answer <pre><code>CtoF =. {{32+y*9%5}}</code></pre> </li> <li> <p>Prime Time</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a verb which returns <code>1</code> if its argument is prime and <code>0</code> otherwise.</p> <pre><code>       isPrime 21\n0\n       isPrime 17\n1\n</code></pre> Answer <p>There are several ways to code this, but the basic method is to count the number of divisors. <pre><code>isPrime =. {{2=+/d=&lt;.d=.y%1+i.y}}\nisPrime =. {{2=+/0=(1+i.y)|y}}</code></pre></p> </li> </ol>"},{"location":"k/basic-syntax-and-arithmetic/","title":"Basic syntax","text":""},{"location":"k/basic-syntax-and-arithmetic/#functions-and-arguments","title":"Functions and arguments","text":"<p>K has two-argument, infix functions. These are called dyadic functions.</p> <p><pre><code> 3 * 5</code></pre> <pre><code>15</code></pre></p> <p><pre><code> 3 - 5</code></pre> <pre><code>-2</code></pre></p> <p>Some functions map between elements of their left and right argument arrays. It is easy to add lists of numbers together: <pre><code> 1 2 3 + 4 5 6</code></pre> <pre><code>5 7 9</code></pre></p> <p>Unlike APL, BQN, and J, K does not have a different symbol for negative numbers and subtraction; both rely on <code>-</code>.</p> <p><pre><code> 1 2 3 - 1 0 -1</code></pre> <pre><code>0 2 4</code></pre></p> <p>There are also one-argument, prefix functions. These are called monadic functions. <pre><code> - 5 -3 0 -4 2</code></pre> <pre><code>-5 3 0 4 -2</code></pre></p> <p><pre><code> | 1 2 3 4 5</code></pre> <pre><code>5 4 3 2 1</code></pre></p> <p>Most symbols represent both a monadic and a dyadic function, but these are often closely related. As we will see later, even user-defined functions can be monadic, dyadic, or have up to 8 arguments.</p> <p> Try this: Use these functions monadically and dyadically:</p> <code>+</code> <code>-</code> <code>*</code> <code>%</code> <code>!</code> <code>&lt;</code> <code>&gt;</code> <code>_</code>"},{"location":"k/basic-syntax-and-arithmetic/#singleton-extension","title":"Singleton extension","text":"<p>Dyadic functions can map between a single value and an array of values. <pre><code> 3 * 1 10 100</code></pre> <pre><code>3 30 300</code></pre></p> <p><pre><code> 3 = 1 2 3 4 5</code></pre> <pre><code>0 0 1 0 0</code></pre></p> <p> Try this: Replace the functions in the previous two expressions with: <code>&gt;</code> <code>&lt;</code> <code>%</code></p> <p>While experimenting, you may cause a <code>'length</code> error:</p> <p><pre><code> 1 2+3 4 5</code></pre> <pre><code>'length\n    1 2+3 4 5\n       ^</code></pre></p> <p>Functions such as <code>+ * &gt;</code> apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the function should be applied. Of course, you may want to apply a function between all combinations of elements of the left and right argument, but that will be addressed soon enough.</p>"},{"location":"k/basic-syntax-and-arithmetic/#order-of-execution","title":"Order of execution","text":"<p>Expressions are executed from right to left.</p> <p><pre><code> 10*!2+5</code></pre> <pre><code>0 10 20 30 40 50 60</code></pre></p> Show me step-by-step <p>To start, there is a literal number 5: <pre><code> 5\n5</code></pre></p> <p>Next, there is a plus <code>+</code> with a number 2 to its immediate left, so it is evaluated as two plus five: <pre><code> 2+5\n7</code></pre></p> <p>Then the symbol enum <code>!</code>. To its left is another function, multiply <code>*</code>, not a value. So the function is called monadically. The monadic form of <code>!</code> is the index generator, which generates an integer array of length defined by its right argument. <pre><code> !2+5\n0 1 2 3 4 5 6</code></pre></p> <p>Lastly, another dyadic function, we multiply our list by ten: <pre><code> 10*!2+5\n0 10 20 30 40 50 60</code></pre></p> <p>The expression above is \"ten times the indices from 0 to two plus five, or in short: \"ten times enum two plus five\". We can make it clearer using (superfluous) parentheses <code>()</code>. <pre><code> 10*(!(2+5))</code></pre> <pre><code>0 10 20 30 40 50 60</code></pre></p> <p>Of course, we can change the order of execution using different parentheses.</p> <p><pre><code> (10*!2)+5</code></pre> <pre><code>5 15</code></pre></p> Show me step-by-step <p>Beginning from the right, there is a literal number 5: <pre><code> (10*!2)+5\n        5</code></pre></p> <p>Then there is a plus symbol <code>+</code>. Before we can decide if it is being called monadically or dyadically, we must look to the left.</p> <pre><code>      )+5</code></pre> <p>A right parenthesis. We must evaluate the contents of the parentheses to see if it is a function or a value.</p> <pre><code> (10*!2)</code></pre> <p>This expression evaluates to the list <code>0 10</code>. Since it is a value, it is used as the left argument to our plus function.</p> <pre><code> (10*!2)+5\n (0  10)+5\n5 15</code></pre> <p>Infix (dyadic) functions have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. </p> <p>If there is one, the left argument is the value to the immediate left.</p> <p>However, juxtaposed values form lists before any functions are applied. This is called stranding and lets us write very natural expressions, such as:</p> <pre><code> 1 2 3 + 4 5 6\n5 7 9</code></pre> <p>but this can lead to some surprises if we are not aware:</p> <p><pre><code> 2 + 2 2 + 2</code></pre> <pre><code>6 6</code></pre></p> Show me step-by-step <p>First, there is a literal number 2 <pre><code>        2\n2</code></pre></p> <p>Then there is a symbol <code>+</code>. What, if any, is the value to its immediate left? <pre><code>     2 2 + 2</code></pre></p> <p>It is a 2-element vector <code>2 2</code>. The plus function maps between these elements and the single number on the right: <pre><code>     2 2 + 2\n4 4</code></pre></p> <p>Finally there is another addition. The overall evaluation looks like the following: <pre><code> 2 + 2 2 + 2\n 2 + 4 4\n 6 6</code></pre></p>"},{"location":"k/basic-syntax-and-arithmetic/#comments","title":"Comments","text":"<p>Anything after a forward slash <code>/</code> is ignored.</p> <p><pre><code> / nothing happens on this line\n 2 * 3 / 4 5</code></pre> <pre><code>6</code></pre></p> <p><pre><code> \"A\"   / K uses double quotes for single char</code></pre> <pre><code>\"A\"</code></pre></p>"},{"location":"k/basic-syntax-and-arithmetic/#the-reduction-operator","title":"The reduction operator","text":"<p>Adding a list of numbers could become very tedious... <pre><code> 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15</code></pre> <pre><code>120</code></pre></p> <p>The fold operator <code>F/</code> inserts the function <code>F</code> to its left between parts of the right argument array. <pre><code> +/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</code></pre> <pre><code>120</code></pre></p> <p>Fold is also known as reduce because it reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result.</p>"},{"location":"k/basic-syntax-and-arithmetic/#the-index-generator","title":"The index generator","text":"<p>The index generator <code>!i</code> generates integers up to the integer right argument <code>i</code></p> <p><pre><code> !10</code></pre> <pre><code>0 1 2 3 4 5 6 7 8 9</code></pre></p> <p>Note: APL's <code>\u2373</code> starts at <code>1</code>, while K's <code>!</code> starts at 0.</p> <p>So we can do an arithmetic sum as follows</p> Traditional Mathematical Notation (TMN) APL \\(\\sum_{n=1}^N n\\) <code>+/!N</code>"},{"location":"k/basic-syntax-and-arithmetic/#what-do-these-errors-mean","title":"What do these errors mean?","text":"<p>In the APL and BQN versions of this lesson, a negative number passed as the right argument to the index generator function produces an error. How can an item in an array have a negative index?</p> <p>In K, <code>!i</code> simply extends the domain to negative numbers and continues to return a monotonically increasing array with <code>i</code> as the starting point:</p> <p><pre><code> !-4</code></pre> <pre><code>-4 -3 -2 -1</code></pre></p> <p>Here's another behavior you might encounter:</p> <p><pre><code> 1+</code></pre> <pre><code>1+</code></pre></p> <p>What is this? We can use type <code>@</code> to interrogate the type:</p> <p><pre><code> @(1+)</code></pre> <pre><code>`p</code></pre></p> <p>The symbol <code>\\</code>p` represents a projection, which is a partially applied function. We'll talk more about that later.</p> <p>Here's an actual error you might encounter:</p> <p><pre><code> a</code></pre> <pre><code>'value\n a\n ^</code></pre></p> <p>A <code>'value</code> means that there is nothing associated with the name provided. We have not seen any named functions or variables yet; nothing has been assigned to the name <code>a</code>, so trying to use it in an expression is meaningless.</p>"},{"location":"k/basic-syntax-and-arithmetic/#problem-set-1","title":"Problem Set 1","text":"<ol> <li> <p>The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable <code>adt</code>. Note that unlike in APL, BQN, and J for which we named this variable <code>t_allweek</code>, K does not permit <code>_</code> in symbols because it's a built-in function.</p> <pre><code> adt:11.7 8.6 9.7 14.2 6.7 11.8 9.2</code></pre> <p>Use K to compute the follwing:</p> <ol> <li>The highest daily temperature</li> <li>The lowest daily temperature</li> <li>The range of (difference between the largest and the smallest) temperatures</li> <li>Each temperature rounded to the nearest whole number</li> </ol> Answers <p><ol> <li> <pre><code> |/adt\n14.2</code></pre> </li> <li> <pre><code> &amp;/adt\n6.7</code></pre> </li> <li> <pre><code> (|/adt)-&amp;/adt\n7.499999999999999</code></pre> <p>You may have found the correct answer using the following expression: <pre><code> |/adt-&amp;/adt\n7.499999999999999</code></pre></p> <p>but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: <pre><code> |/ adt - &amp;/ adt\n |/ adt - 6.7\n |/ 11.7 8.6 9.7 14.2 6.7 11.8 9.2 - 6.7\n |/ 5 1.9 3 7.5 0 5.1 2.5\n 7.5</code></pre></p> <p>if we use parentheses <code>()</code> to force K to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: <pre><code> ( |/adt ) - &amp;/ adt\n ( |/adt ) - 6.7\n ( 14.2  ) - 6.7\n 7.499999999999999</code></pre></p> <p> <li> To round to the nearest whole number, add 0.5 and round down: <pre><code> _0.5+adt\n12 9 10 14 7 12 9</code></pre> </li> </p> </li> <li> <p>A Mathematical Notation</p> <p>Use K to evaluate the following</p> <ol> <li> <p>\\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers)</p> </li> <li> <p>\\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers)</p> </li> <li> <p>In TMN, the following expression is equal to <code>0</code>, why does the following return <code>70</code> in K?     <pre><code> 84 - 12 - 1 - 13 - 28 - 9 - 6 - 15</code></pre> <pre><code>70</code></pre></p> </li> </ol> Answers <p><ol> <li> <pre><code> */1+!12\n479001600</code></pre> </li> <li> Let's define a <code>pow</code> function that raises its left argument to the power of the right argument, and the a <code>sq</code> function that squares its argument: <pre><code> pow:{*/y#x}\n sq:pow[;2]</code></pre> </li> <li> Now we can define our solution in terms of <code>sq</code>: <pre><code> +/sq'1+!17\n1785</code></pre> <p>The <code>'</code> is the each adverb, which applies the given function to each element in the argument list. We'll cover adverbs later.</p> <p> <li> <pre><code> +/2*1+!100\n10100</code></pre> </li> <li> We can either subtract 1 from the even numbers: <pre><code> +/(2*1+!100)-1\n10000</code></pre> <p>or we can add negative 1: <pre><code> +/-1+2*1+!100\n10000</code></pre> <li> Remember the right-to-left rule: functions take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how APL evaluates our expression. <pre><code> (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15)))))))\n70</code></pre> </li> </p> </li> <li> <p>Pyramid Schemes</p> <ol> <li> <p>Sugar cubes are stacked in an arrangement as shown by Figure 1.</p> <p> Figure 1. Stacked sugar cubes</p> <p>This stack has <code>4</code> layers and a total of <code>30</code> cubes. How many cubes are there in a similar stack with <code>467</code> layers?</p> </li> <li> <p>Now consider the stack in Figure 2.</p> <p> Figure 2. Differently stacked sugar cubes</p> <p>The arrangement in Figure 2 has <code>4</code> layers and <code>84</code> cubes. How many cubes are there in a similar stack with <code>812</code> layers?</p> </li> <li> <p>Now look at Figure 3.</p> <p> Figure 3. This is just a waste of sugar cubes by now...</p> <p>The stack in Figure 3 has <code>3</code> \"layers\" and <code>36</code> cubes in total. How many cubes are there in a similar stack with <code>68</code> \"layers\"?</p> </li> </ol> Answers <p><ol> <li> Each \\(n\\)th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. <pre><code> pow:{*/y#x}\n sq:pow[;2]\n +/sq'1+!4</code></pre> <pre><code>30</code></pre> <p><pre><code>/sq'1+!467</code></pre> <pre><code>34058310</code></pre> <li> Each \\(n\\)th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. <pre><code> /sq'-1+2*1+!4</code></pre> <pre><code>84</code></pre> <p><pre><code> +/sq'-1+2*1+!812</code></pre> <pre><code>713849500</code></pre> <li> Each \\(n\\)th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. <pre><code> cubed:pow[;3]\n +/cubed'1+!3</code></pre> <pre><code>36</code></pre> <p><pre><code> +/cubed'1+!68</code></pre> <pre><code>5503716</code></pre> </p> </li> <li> <p>Rewrite the following expressions so that they do not use parentheses.</p> <ol> <li><code>(%a)*b</code></li> <li><code>(%a)%b</code></li> <li><code>(a+b)-5</code></li> <li><code>(a+b)+5</code></li> </ol> Answers <p><ol> <li>Multiplication is commutative, which means that the order of arguments does not matter, so we can write <code>b*%a</code>. Even more simply, it is <code>b%a</code> because multiplication by a reciprocal is the same as division.</li> <li>\\({{{1}\\over{a}}\\div{b}} = {{1}\\over{a\\times{b}}}\\) so we can write <code>%a*b</code></li> <li>Use a literal negative five:<code>\u00af5+a+b</code></li> <li>No parentheses needed: <code>a+b+5</code></li> </ol></p> </li>"},{"location":"k/verbs-and-assignment/","title":"Verbs and Assignment","text":""},{"location":"k/verbs-and-assignment/#verbs","title":"Verbs","text":"<p>In K, normal functions\u2014those that take noun arguments and produce noun results\u2014are called verbs.</p> <p>A custom verb definition starts and ends with curly braces <code>{}</code>. It can receive either 1, 2, or 3 arguments, which are assigned the variables <code>x</code>, <code>y</code>, and <code>z</code> respectively.</p> <p>Built-in verbs can be used either in infix position or prefix; custom verbs can only be used in prefix position.</p> <pre><code> {x}3       / x is the first argument\n3\n {x}[3]     / you can optionally use [] for one arg, required for 2+\n3\n {y}[3;4]   / y is the second argument\n4\n {z}[3;4;5] / z is the third argument\n5\n {x+y}[3]     / providing too few args returns a partially-applied verb\n{x+y}[3;]\n plus3:{x+y}[3] / See it in action\n plus3 4\n7</code></pre> <p>See K's built-in documentation (enter <code>\\\\</code> at the REPL) to learn how verbs are specified. Most built-in verbs have different functionality depending on both the number and type of arguments provided.</p>"},{"location":"k/verbs-and-assignment/#assignment","title":"Assignment","text":"<p>Primitives are the words defined by the system, but you can create your own names using the primitive <code>:</code> called right.</p> <p><pre><code> one:1\n three:3\n equals:=\n plus:+\n four:4\n equals[four;plus[three;one]]  # 1 means true, 0 means false</code></pre> <pre><code>1</code></pre></p> <p>We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short.</p> <p>Read the following as \"squared numbers divided by the sum of squares\":</p> <p><pre><code> squared%+/squared:{x*x}(-1 0 1 2)</code></pre> <pre><code>0.16666666666666666 0.0 0.16666666666666666 0.6666666666666666</code></pre></p> <p>Unlike APL and BQN, in K you are free to redefine names with new values of any type.</p>"},{"location":"k/verbs-and-assignment/#multiline-functions","title":"Multiline functions","text":"<p>You can do quite a lot in a single line of K. However, it is not long before you want to keep sequences of multiple statements available for re-use. Of course we can write functions which consist of multiple statements.</p> <p>Multiline definitions must be written in a file and loaded via <code>\\l</code>. You can separate each statement by a newline. Lines are evaluated top to bottom. Note: Your K source files must end with a newline, otherwise you will get an <code>'eoleof</code> error.</p> <p>The statement separator <code>;</code> allows us to write multiple K statements in a single line. Some people think that it is more readable to spread multiple statements across multiple lines of a function. However, it is worth being aware that K separators <code>\u22c4</code> are equivalent to newline characters in terms of execution. The following two definitions of the <code>mean</code> function are equivalent.</p> <pre><code>mean:{\n sum:+/y\n count:#y\n sum % count\n}\n\nmean:{sum:+/x;count:#x;sum % count}</code></pre> <p>Separate statements are executed from left to right and top to bottom.</p>"},{"location":"k/verbs-and-assignment/#problem-set-2","title":"Problem set 2","text":"<p>The following problems can be solved with single-line dfns.</p> <ol> <li> <p>Eggs</p> <p>A recipe serving 4 people uses 3 eggs. Write the function <code>eggs</code> which computes the number of eggs which need cracking to serve <code>y</code> people. Using a fraction of an egg requires that a whole egg be cracked.</p> <p><pre><code> eggs 4</code></pre> <pre><code>3</code></pre></p> <p><pre><code> eggs 100</code></pre> <pre><code>75</code></pre></p> <p><pre><code> eggs 1+!12</code></pre> <pre><code>1 2 3 3 4 5 6 6 7 8 9 9</code></pre></p> Answer <pre><code> / Play with -_- step by step to see how it implements ceiling\n eggs:{-_-x*3%4}</code></pre> </li> <li> <p>Write a function <code>to</code> which returns integers from <code>x</code> to <code>y</code> inclusive.</p> <pre><code> to[3;3]\n,3\n to[3;4]\n3 4\n to[1;7]\n1 2 3 4 5 6 7\n to[-3;5]\n-3 -2 -1 0 1 2 3 4 5</code></pre> <p>BONUS: What if <code>\u237a&gt;\u2375</code>?</p> <pre><code> to[3;5]\n3 4 5\n to[5;3]\n5 4 3\n to[5;-2]\n5 4 3 2 1 0 -1 -2</code></pre> Answer <p>In the simple case, make sure to generate enough numbers and use <code>x</code> as an offset: <pre><code> to:{x+!1+y-x}</code></pre></p> <p>In general we take into account whether the difference is positive or negative. In K, there are no builtins for absolute value or signum, so we define these as well:</p> <pre><code> signum:{(x&gt;0)-x&lt;0}\n abs:{$[x&lt;0;x*-1;x]}\n to:{d:y-x;x+(signum[d])*!1+abs[d]}</code></pre> </li> <li> <p>The formula to convert temperature from Celsius (\\(T_C\\)) to Fahrenheit (\\(T_F\\)) in traditional mathematical notation is as follows:</p> \\[T_F = {32 + {{9}\\over{5}}\\times {T_C}}\\] <p>Write the function <code>CtoF</code> to convert temperatures from Celcius to Farenheit.</p> <pre><code> CtoF 11.3 23 0 16 -10 38\n52.34 73.4 32 60.8 14 100.4</code></pre> Answer <pre><code> CtoF:{32+x*9%5}</code></pre> </li> <li> <p>Prime Time</p> <p>A prime number is a positive whole number greater than \\(1\\) which can be divided only by itself and \\(1\\) with no remainder.</p> <p>Write a verb which returns <code>1</code> if its argument is prime and <code>0</code> otherwise.</p> <pre><code> isPrime 21\n0\n isPrime 17\n1</code></pre> Answer <p>There are several ways to code this, but the basic method is to count the number of divisors. <pre><code> isPrime:{2=+/d=_d:x%1+!x}\n isPrime:{2=+/0=(1+!x)!'x}</code></pre></p> </li> </ol>"}]}